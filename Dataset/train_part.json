[{"focal_src": "public static byte[]encryptAES(byte[]data, byte[]key) { return DESTemplet(data, key, AES_Algorithm, AES_Transformation, true); } ", "focal_tgt": "public static byte[]encryptAES(byte[]data, byte[]key) { return desTemplate(data, key, AES_Algorithm, AES_Transformation, true); } ", "test_src": "@Test public void encryptAES() { assertArrayEquals(bytesResAES, EncryptUtils.encryptAES(bytesDataAES, bytesKeyAES, \"AES/ECB/PKCS5Padding\", null)); assertEquals(resAES, EncryptUtils.encryptAES2HexString(bytesDataAES, bytesKeyAES, \"AES/ECB/PKCS5Padding\", null)); assertArrayEquals(base64Encode(bytesResAES), EncryptUtils.encryptAES2Base64(bytesDataAES, bytesKeyAES, \"AES/ECB/PKCS5Padding\", null)); } ", "label": 0, "focal_db": [1457827, "Blankj/AndroidUtilCode", "/data/comment_repos/Blankj@AndroidUtilCode", "4f8fa0ecfc671b3be9f712db91cd407393a8edee", "77a749e43baf114f9f614b055f769aca68605b42", "utilcode/src/main/java/com/blankj/utilcode/utils/EncryptUtils.java", "d09eb7b5aa54edc20b166388165b1debb33bc7e9", "utilcode/src/main/java/com/blankj/utilcode/utils/EncryptUtils.java", "public static byte[] encryptAES(byte[] data, byte[] key) {\r\n        return DESTemplet(data, key, AES_Algorithm, AES_Transformation, true);\r\n    }", "/**\n * AES\u52a0\u5bc6\n *\n * @param data \u660e\u6587\n * @param key  16\u300124\u300132\u5b57\u8282\u79d8\u94a5\n * @return \u5bc6\u6587\n */\n", "public static byte[] encryptAES(byte[] data, byte[] key) {\r\n        return desTemplate(data, key, AES_Algorithm, AES_Transformation, true);\r\n    }", "/**\n * AES\u52a0\u5bc6\n *\n * @param data \u660e\u6587\n * @param key  16\u300124\u300132\u5b57\u8282\u79d8\u94a5\n * @return \u5bc6\u6587\n */\n"], "test_db": ["4f8fa0ecfc671b3be9f712db91cd407393a8edee", "Blankj/AndroidUtilCode", "/data/comment_repos/Blankj@AndroidUtilCode", "encryptAES", "/data/comment_repos/Blankj@AndroidUtilCode/lib/utilcode/src/test/java/com/blankj/utilcode/util/EncryptUtilsTest.java", "encryptAES", "    @Test\n    public void encryptAES() {\n        assertArrayEquals(\n                bytesResAES,\n                EncryptUtils.encryptAES(bytesDataAES, bytesKeyAES, \"AES/ECB/PKCS5Padding\", null)\n        );\n        assertEquals(\n                resAES,\n                EncryptUtils.encryptAES2HexString(bytesDataAES, bytesKeyAES, \"AES/ECB/PKCS5Padding\", null)\n        );\n        assertArrayEquals(\n                base64Encode(bytesResAES),\n                EncryptUtils.encryptAES2Base64(bytesDataAES, bytesKeyAES, \"AES/ECB/PKCS5Padding\", null)\n        );\n    }", "public static byte[] encryptAES(byte[] data, byte[] key) {\r\n        return DESTemplet(data, key, AES_Algorithm, AES_Transformation, true);\r\n    }", "utilcode/src/main/java/com/blankj/utilcode/utils/EncryptUtils.java", "public static byte[] encryptAES(byte[] data, byte[] key) {\r\n        return desTemplate(data, key, AES_Algorithm, AES_Transformation, true);\r\n    }", "utilcode/src/main/java/com/blankj/utilcode/utils/EncryptUtils.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["byte", "byte", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["encrypt", "encrypt", "equal"], ["<con>", "<con>", "equal"], ["AES", "AES", "equal"], ["(", "(", "equal"], ["byte", "byte", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["data", "data", "equal"], [",", ",", "equal"], ["byte", "byte", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["key", "key", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["DES", "des", "replace"], ["<con>", "<con>", "equal"], ["Templet", "Template", "replace"], ["(", "(", "equal"], ["data", "data", "equal"], [",", ",", "equal"], ["key", "key", "equal"], [",", ",", "equal"], ["AES", "AES", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Algorithm", "Algorithm", "equal"], [",", ",", "equal"], ["AES", "AES", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Transformation", "Transformation", "equal"], [",", ",", "equal"], ["true", "true", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@Override public RTree < T, S > deserialize(long sizeBytes, InputStream is, InternalStructure structure)throws IOException { byte[]bytes = readFully(is, (int)sizeBytes); Tree_ t = Tree_.getRootAsTree_(ByteBuffer.wrap(bytes)); Node_ node = t.root(); Context < T, S > context = new Context < T, S > (t.context().minChildren(), t.context().maxChildren(), new SelectorRStar(), new SplitterRStar(), factory); final Node < T, S > root; if(structure == InternalStructure.FLATBUFFERS_SINGLE_ARRAY) { root = new NonLeafFlatBuffers < T, S > (node, context, factory.deserializer()); } else { root = toNodeDefault(node, context, factory.deserializer()); } return SerializerHelper.create(Optional.of(root), (int)t.size(), context); } ", "focal_tgt": "@Override public RTree < T, S > deserialize(long sizeBytes, InputStream is, InternalStructure structure)throws IOException { byte[]bytes = readFully(is, (int)sizeBytes); Tree_ t = Tree_.getRootAsTree_(ByteBuffer.wrap(bytes)); Node_ node = t.root(); Context < T, S > context = new Context < T, S > (t.context().minChildren(), t.context().maxChildren(), new SelectorRStar(), new SplitterRStar(), factory); final Node < T, S > root; if(structure == InternalStructure.SINGLE_ARRAY) { root = new NonLeafFlatBuffers < T, S > (node, context, factory.deserializer()); } else { root = toNodeDefault(node, context, factory.deserializer()); } return SerializerHelper.create(Optional.of(root), (int)t.size(), context); } ", "test_src": "private static void deserialize(InternalStructure structure, File file, Serializer < Object, Point > fbSerializer, boolean backpressure)throws Exception { long t = System.currentTimeMillis(); InputStream is = new FileInputStream(file); t = System.currentTimeMillis(); RTree < Object, Point > tr = fbSerializer.read(is, file.length(), structure); System.out.println(tr.root().get()); System.out.println(\"read in \" + (System.currentTimeMillis() - t) + \"ms\"); Observable < Entry < Object, Point > > o = tr.search(Geometries.rectangle(40, 27.0, 40.5, 27.5)); if(backpressure)o = o.take(10000); int found = o.count().toBlocking().single(); System.out.println(\"found=\" + found); assertEquals(22, found); System.out.println(tr.size()); } ", "label": 0, "focal_db": [1768044, "davidmoten/rtree", "/data/comment_repos/davidmoten@rtree", "43d214f2c0d55fb6409d9b5d2ee041e51d4a95c8", "01b53b55dc6930750e111cddc1ef7acc97eafe9f", "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "d26ab28f2cb3615ac1ba2d7173c09ddd45d61935", "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "@Override\n    public RTree<T, S> deserialize(long sizeBytes, InputStream is, InternalStructure structure)\n            throws IOException {\n        byte[] bytes = readFully(is, (int) sizeBytes);\n        Tree_ t = Tree_.getRootAsTree_(ByteBuffer.wrap(bytes));\n        Node_ node = t.root();\n        Context<T, S> context = new Context<T, S>(t.context().minChildren(),\n                t.context().maxChildren(), new SelectorRStar(), new SplitterRStar(), factory);\n        final Node<T, S> root;\n        if (structure == InternalStructure.FLATBUFFERS_SINGLE_ARRAY) {\n            root = new NonLeafFlatBuffers<T, S>(node, context, factory.deserializer());\n        } else {\n            root = toNodeDefault(node, context, factory.deserializer());\n        }\n        return SerializerHelper.create(Optional.of(root), (int) t.size(), context);\n    }", "/* (non-Javadoc)\n     * @see com.github.davidmoten.rtree.fbs.Serializer#deserialize(long, java.io.InputStream, com.github.davidmoten.rtree.InternalStructure)\n     */\n", "@Override\n    public RTree<T, S> deserialize(long sizeBytes, InputStream is, InternalStructure structure)\n            throws IOException {\n        byte[] bytes = readFully(is, (int) sizeBytes);\n        Tree_ t = Tree_.getRootAsTree_(ByteBuffer.wrap(bytes));\n        Node_ node = t.root();\n        Context<T, S> context = new Context<T, S>(t.context().minChildren(),\n                t.context().maxChildren(), new SelectorRStar(), new SplitterRStar(), factory);\n        final Node<T, S> root;\n        if (structure == InternalStructure.SINGLE_ARRAY) {\n            root = new NonLeafFlatBuffers<T, S>(node, context, factory.deserializer());\n        } else {\n            root = toNodeDefault(node, context, factory.deserializer());\n        }\n        return SerializerHelper.create(Optional.of(root), (int) t.size(), context);\n    }", "/* (non-Javadoc)\n     * @see com.github.davidmoten.rtree.fbs.Serializer#deserialize(long, java.io.InputStream, com.github.davidmoten.rtree.InternalStructure)\n     */\n"], "test_db": ["4044c55c2a0fd255e4c41f9586a3119247fc8339", "davidmoten/rtree", "/data/comment_repos/davidmoten@rtree", "deserialize", "/data/comment_repos/davidmoten@rtree/src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "deserialize", "    private static void deserialize(InternalStructure structure, File file,\n            Serializer<Object, Point> fbSerializer, boolean backpressure) throws Exception {\n        long t = System.currentTimeMillis();\n        InputStream is = new FileInputStream(file);\n        t = System.currentTimeMillis();\n        RTree<Object, Point> tr = fbSerializer.read(is, file.length(), structure);\n        System.out.println(tr.root().get());\n\n        System.out.println(\"read in \" + (System.currentTimeMillis() - t) + \"ms\");\n        Observable<Entry<Object, Point>> o = tr.search(Geometries.rectangle(40, 27.0, 40.5, 27.5));\n        if (backpressure)\n            o = o.take(10000);\n        int found = o.count().toBlocking().single();\n        System.out.println(\"found=\" + found);\n        assertEquals(22, found);\n        System.out.println(tr.size());\n    }", "public RTree<T, S> deserialize(long sizeBytes, InputStream is, InternalStructure structure)\n            throws IOException {\n        byte[] bytes = readFully(is, (int) sizeBytes);\n        Tree_ t = Tree_.getRootAsTree_(ByteBuffer.wrap(bytes));\n        Node_ node = t.root();\n        Context<T, S> context = new Context<T, S>(t.context().minChildren(),\n                t.context().maxChildren(), new SelectorRStar(), new SplitterRStar(), factory);\n        final Node<T, S> root;\n        if (structure == InternalStructure.FLATBUFFERS_SINGLE_ARRAY) {\n            root = new NonLeafFlatBuffers<T, S>(node, context, factory.deserializer());\n        } else {\n            root = toNodeDefault(node, context, factory.deserializer());\n        }\n        return SerializerHelper.create(Optional.of(root), (int) t.size(), context);\n    }", "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "@Override\n    public RTree<T, S> deserialize(long sizeBytes, InputStream is, InternalStructure structure)\n            throws IOException {\n        byte[] bytes = readFully(is, (int) sizeBytes);\n        Tree_ t = Tree_.getRootAsTree_(ByteBuffer.wrap(bytes));\n        Node_ node = t.root();\n        Context<T, S> context = new Context<T, S>(t.context().minChildren(),\n                t.context().maxChildren(), new SelectorRStar(), new SplitterRStar(), factory);\n        final Node<T, S> root;\n        if (structure == InternalStructure.FLATBUFFERS_SINGLE_ARRAY) {\n            root = new NonLeafFlatBuffers<T, S>(node, context, factory.deserializer());\n        } else {\n            root = toNodeDefault(node, context, factory.deserializer());\n        }\n        return SerializerHelper.create(Optional.of(root), (int) t.size(), context);\n    }", "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java"], "edit_seq": [["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["R", "R", "equal"], ["<con>", "<con>", "equal"], ["Tree", "Tree", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [",", ",", "equal"], ["S", "S", "equal"], [">", ">", "equal"], ["deserialize", "deserialize", "equal"], ["(", "(", "equal"], ["long", "long", "equal"], ["size", "size", "equal"], ["<con>", "<con>", "equal"], ["Bytes", "Bytes", "equal"], [",", ",", "equal"], ["Input", "Input", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], ["is", "is", "equal"], [",", ",", "equal"], ["Internal", "Internal", "equal"], ["<con>", "<con>", "equal"], ["Structure", "Structure", "equal"], ["structure", "structure", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["IO", "IO", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["byte", "byte", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["bytes", "bytes", "equal"], ["=", "=", "equal"], ["read", "read", "equal"], ["<con>", "<con>", "equal"], ["Fully", "Fully", "equal"], ["(", "(", "equal"], ["is", "is", "equal"], [",", ",", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], [")", ")", "equal"], ["size", "size", "equal"], ["<con>", "<con>", "equal"], ["Bytes", "Bytes", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Tree", "Tree", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["t", "t", "equal"], ["=", "=", "equal"], ["Tree", "Tree", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Root", "Root", "equal"], ["<con>", "<con>", "equal"], ["As", "As", "equal"], ["<con>", "<con>", "equal"], ["Tree", "Tree", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["(", "(", "equal"], ["Byte", "Byte", "equal"], ["<con>", "<con>", "equal"], ["Buffer", "Buffer", "equal"], [".", ".", "equal"], ["wrap", "wrap", "equal"], ["(", "(", "equal"], ["bytes", "bytes", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["node", "node", "equal"], ["=", "=", "equal"], ["t", "t", "equal"], [".", ".", "equal"], ["root", "root", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Context", "Context", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [",", ",", "equal"], ["S", "S", "equal"], [">", ">", "equal"], ["context", "context", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Context", "Context", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [",", ",", "equal"], ["S", "S", "equal"], [">", ">", "equal"], ["(", "(", "equal"], ["t", "t", "equal"], [".", ".", "equal"], ["context", "context", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["min", "min", "equal"], ["<con>", "<con>", "equal"], ["Children", "Children", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["t", "t", "equal"], [".", ".", "equal"], ["context", "context", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["Children", "Children", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["new", "new", "equal"], ["Selector", "Selector", "equal"], ["<con>", "<con>", "equal"], ["R", "R", "equal"], ["<con>", "<con>", "equal"], ["Star", "Star", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["new", "new", "equal"], ["Splitter", "Splitter", "equal"], ["<con>", "<con>", "equal"], ["R", "R", "equal"], ["<con>", "<con>", "equal"], ["Star", "Star", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["factory", "factory", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Node", "Node", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [",", ",", "equal"], ["S", "S", "equal"], [">", ">", "equal"], ["root", "root", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["structure", "structure", "equal"], ["==", "==", "equal"], ["Internal", "Internal", "equal"], ["<con>", "<con>", "equal"], ["Structure", "Structure", "equal"], [".", ".", "equal"], ["FLATBUFFERS", "", "delete"], ["<con>", "", "delete"], ["_", "", "delete"], ["<con>", "", "delete"], ["SINGLE", "SINGLE", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ARRAY", "ARRAY", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["root", "root", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Non", "Non", "equal"], ["<con>", "<con>", "equal"], ["Leaf", "Leaf", "equal"], ["<con>", "<con>", "equal"], ["Flat", "Flat", "equal"], ["<con>", "<con>", "equal"], ["Buffers", "Buffers", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [",", ",", "equal"], ["S", "S", "equal"], [">", ">", "equal"], ["(", "(", "equal"], ["node", "node", "equal"], [",", ",", "equal"], ["context", "context", "equal"], [",", ",", "equal"], ["factory", "factory", "equal"], [".", ".", "equal"], ["deserializer", "deserializer", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["root", "root", "equal"], ["=", "=", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Default", "Default", "equal"], ["(", "(", "equal"], ["node", "node", "equal"], [",", ",", "equal"], ["context", "context", "equal"], [",", ",", "equal"], ["factory", "factory", "equal"], [".", ".", "equal"], ["deserializer", "deserializer", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["Serializer", "Serializer", "equal"], ["<con>", "<con>", "equal"], ["Helper", "Helper", "equal"], [".", ".", "equal"], ["create", "create", "equal"], ["(", "(", "equal"], ["Optional", "Optional", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["(", "(", "equal"], ["root", "root", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], [")", ")", "equal"], ["t", "t", "equal"], [".", ".", "equal"], ["size", "size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["context", "context", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public CriteriaQuery notEmpty(String propName) { addCriterion(criterionBuilder.notEmpty(propName)); return this; } ", "focal_tgt": "public CriteriaQuery notEmpty(String propName) { criterion = criterion.and(criterionBuilder.notEmpty(propName)); return this; } ", "test_src": "@Test public void testNotEmpty() { assertTrue(instance.notEmpty(\"name\").getQueryCriterions().contains(new NotEmptyCriterion(\"name\"))); } ", "test_tgt": "@Test public void testNotEmpty() { assertEquals(new NotEmptyCriterion(\"name\"), instance.notEmpty(\"name\").getQueryCriterion()); } ", "label": 1, "focal_db": [1769263, "dayatang/dddlib", "/data/comment_repos/dayatang@dddlib", "32f7a3d1d6d33c31e154fe893ab8ea3b73b32389", "176d84df597d26c7e56b1c7ec46d69acf91c6453", "dddlib-domain/src/main/java/org/dayatang/domain/CriteriaQuery.java", "28b06d46f184529158cab05b3eb5d9e63b5cea20", "dddlib-domain/src/main/java/org/dayatang/domain/CriteriaQuery.java", "public CriteriaQuery notEmpty(String propName) {\n        addCriterion(criterionBuilder.notEmpty(propName));\n        return this;\n    }", "/**\n * \u6dfb\u52a0\u4e00\u4e2a\u201c\u96c6\u5408\u7c7b\u578b\u5c5e\u6027\u503c\u4e0d\u662f\u7a7a\u96c6\u5408\u201d\u7684\u67e5\u8be2\u6761\u4ef6\n * @param propName \u5c5e\u6027\u540d\uff0c\u5fc5\u987b\u662f\u96c6\u5408\u5c5e\u6027\uff08x-to-many\u6216ElementCollection\uff09\n * @return \u5f53\u524d\u67e5\u8be2\u5bf9\u8c61\n */\n", "public CriteriaQuery notEmpty(String propName) {\n        criterion = criterion.and(criterionBuilder.notEmpty(propName));\n        return this;\n    }", "/**\n * \u6dfb\u52a0\u4e00\u4e2a\u201c\u96c6\u5408\u7c7b\u578b\u5c5e\u6027\u503c\u4e0d\u662f\u7a7a\u96c6\u5408\u201d\u7684\u67e5\u8be2\u6761\u4ef6\n * @param propName \u5c5e\u6027\u540d\uff0c\u5fc5\u987b\u662f\u96c6\u5408\u5c5e\u6027\uff08x-to-many\u6216ElementCollection\uff09\n * @return \u5f53\u524d\u67e5\u8be2\u5bf9\u8c61\n */\n"], "test_db": [1769313, "dayatang/dddlib", "/data/comment_repos/dayatang@dddlib", "32f7a3d1d6d33c31e154fe893ab8ea3b73b32389", "34fbfc7f58fffd506e671e85276258bb59931e10", "dddlib-domain/src/test/java/org/dayatang/domain/repository/CriteriaQueryTest.java", "038b4bf678526aba40f9de45ce0a887b7ac43547", "dddlib-domain/src/test/java/org/dayatang/domain/repository/CriteriaQueryTest.java", "@Test\n    public void testNotEmpty() {\n        assertTrue(instance.notEmpty(\"name\").getQueryCriterions()\n                .contains(new NotEmptyCriterion(\"name\")));\n    }", "/**\n * Test of notEmpty method, of class CriteriaQuery.\n */\n", "@Test\n    public void testNotEmpty() {\n    \tassertEquals(new NotEmptyCriterion(\"name\"), instance.notEmpty(\"name\").getQueryCriterion());\n    }", "/**\n * Test of notEmpty method, of class CriteriaQuery.\n */\n"], "edit_seq": [["public", "public", "equal"], ["Criteria", "Criteria", "equal"], ["<con>", "<con>", "equal"], ["Query", "Query", "equal"], ["not", "not", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["prop", "prop", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["add", "", "delete"], ["<con>", "", "delete"], ["Criterion", "criterion", "replace"], ["", "=", "insert"], ["", "criterion", "insert"], ["", ".", "insert"], ["", "and", "insert"], ["(", "(", "equal"], ["criterion", "criterion", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], [".", ".", "equal"], ["not", "not", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["(", "(", "equal"], ["prop", "prop", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["this", "this", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@Transactional(readOnly = true)public List < Order > getOrderHistoryByConcept(Patient patient, Concept concept); ", "focal_tgt": "public List < Order > getOrderHistoryByConcept(Patient patient, Concept concept); ", "test_src": "@Test public void getOrderHistoryByConcept_shouldReturnOrdersWithTheGivenConcept() { Concept concept = Context.getConceptService().getConcept(88); Patient patient = Context.getPatientService().getPatient(2); List < Order > orders = orderService.getOrderHistoryByConcept(patient, concept); Assert.assertEquals(3, orders.size()); Assert.assertEquals(444, orders.get(0).getOrderId().intValue()); Assert.assertEquals(44, orders.get(1).getOrderId().intValue()); Assert.assertEquals(4, orders.get(2).getOrderId().intValue()); concept = Context.getConceptService().getConcept(792); orders = orderService.getOrderHistoryByConcept(patient, concept); Assert.assertEquals(4, orders.size()); Assert.assertEquals(3, orders.get(0).getOrderId().intValue()); Assert.assertEquals(222, orders.get(1).getOrderId().intValue()); Assert.assertEquals(22, orders.get(2).getOrderId().intValue()); Assert.assertEquals(2, orders.get(3).getOrderId().intValue()); } ", "label": 0, "focal_db": [2995032, "openmrs/openmrs-core", "/data/comment_repos/openmrs@openmrs-core", "7253a879522bec2d3be21c25512005c4508c2318", "90a45f99538758039a6d7d244a03e5eec620996e", "api/src/main/java/org/openmrs/api/OrderService.java", "5004378fa5a2c069cb43c03e95263ea44f484131", "api/src/main/java/org/openmrs/api/OrderService.java", "@Transactional(readOnly = true)\r\n\tpublic List<Order> getOrderHistoryByConcept(Patient patient, Concept concept);", "/**\n * Gets all Order objects that use this Concept for a given patient. Orders will be returned in\n * the order in which they occurred, i.e. sorted by dateCreated starting with the latest\n *\n * @param patient the patient.\n * @param concept the concept.\n * @return the list of orders.\n * @should return orders with the given concept\n * @should return empty list for concept without orders\n */\n", "public List<Order> getOrderHistoryByConcept(Patient patient, Concept concept);", "/**\n * Gets all Order objects that use this Concept for a given patient. Orders will be returned in\n * the order in which they occurred, i.e. sorted by dateCreated starting with the latest\n *\n * @param patient the patient.\n * @param concept the concept.\n * @return the list of orders.\n * @should return orders with the given concept\n * @should return empty list for concept without orders\n */\n"], "test_db": ["e4172b74bc397123cf55ca613a781b91c631b85f", "openmrs/openmrs-core", "/data/comment_repos/openmrs@openmrs-core", "getOrderHistoryByConcept", "/data/comment_repos/openmrs@openmrs-core/api/src/test/java/org/openmrs/api/OrderServiceTest.java", "getOrderHistoryByConcept_shouldReturnOrdersWithTheGivenConcept", "\t@Test\n\tpublic void getOrderHistoryByConcept_shouldReturnOrdersWithTheGivenConcept() {\n\t\t//We should have two orders with this concept.\n\t\tConcept concept = Context.getConceptService().getConcept(88);\n\t\tPatient patient = Context.getPatientService().getPatient(2);\n\t\tList<Order> orders = orderService.getOrderHistoryByConcept(patient, concept);\n\t\t\n\t\t//They must be sorted by dateActivated starting with the latest\n\t\tAssert.assertEquals(3, orders.size());\n\t\tAssert.assertEquals(444, orders.get(0).getOrderId().intValue());\n\t\tAssert.assertEquals(44, orders.get(1).getOrderId().intValue());\n\t\tAssert.assertEquals(4, orders.get(2).getOrderId().intValue());\n\t\t\n\t\tconcept = Context.getConceptService().getConcept(792);\n\t\torders = orderService.getOrderHistoryByConcept(patient, concept);\n\t\t\n\t\t//They must be sorted by dateActivated starting with the latest\n\t\tAssert.assertEquals(4, orders.size());\n\t\tAssert.assertEquals(3, orders.get(0).getOrderId().intValue());\n\t\tAssert.assertEquals(222, orders.get(1).getOrderId().intValue());\n\t\tAssert.assertEquals(22, orders.get(2).getOrderId().intValue());\n\t\tAssert.assertEquals(2, orders.get(3).getOrderId().intValue());\n\t}", "@Transactional(readOnly = true)\r\n\tpublic List<Order> getOrderHistoryByConcept(Patient patient, Concept concept);", "api/src/main/java/org/openmrs/api/OrderService.java", "@Transactional(readOnly = true)\r\n\t@Authorized(PrivilegeConstants.GET_ORDERS)\r\n\tpublic List<Order> getOrderHistoryByConcept(Patient patient, Concept concept);", "api/src/main/java/org/openmrs/api/OrderService.java"], "edit_seq": [["@", "", "delete"], ["Transactional", "", "delete"], ["(", "", "delete"], ["read", "", "delete"], ["<con>", "", "delete"], ["Only", "", "delete"], ["=", "", "delete"], ["true", "", "delete"], [")", "", "delete"], ["public", "public", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Order", "Order", "equal"], [">", ">", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Order", "Order", "equal"], ["<con>", "<con>", "equal"], ["History", "History", "equal"], ["<con>", "<con>", "equal"], ["By", "By", "equal"], ["<con>", "<con>", "equal"], ["Concept", "Concept", "equal"], ["(", "(", "equal"], ["Patient", "Patient", "equal"], ["patient", "patient", "equal"], [",", ",", "equal"], ["Concept", "Concept", "equal"], ["concept", "concept", "equal"], [")", ")", "equal"], [";", ";", "equal"]]}, {"focal_src": "protected RequestStatusResponse deleteServices(Set < ServiceRequest > request)throws AmbariException { Clusters clusters = getManagementController().getClusters(); Set < Service > removable = new HashSet < Service > (); for(ServiceRequest serviceRequest : request) { if(StringUtils.isEmpty(serviceRequest.getClusterName()) || StringUtils.isEmpty(serviceRequest.getServiceName())) { throw new AmbariException(\"invalid arguments\"); } else { Service service = clusters.getCluster(serviceRequest.getClusterName()).getService(serviceRequest.getServiceName()); for(ServiceComponent sc : service.getServiceComponents().values()) { if( ! sc.canBeRemoved()) { throw new AmbariException(\"Cannot remove \" + serviceRequest.getClusterName() + \"/\" + serviceRequest.getServiceName() + \". \" + sc.getName() + \" is in a non-removable state.\"); } } removable.add(service); } } for(Service service : removable) { service.getCluster().deleteService(service.getName()); } return null; } ", "focal_tgt": "protected RequestStatusResponse deleteServices(Set < ServiceRequest > request)throws AmbariException, AuthorizationException { Clusters clusters = getManagementController().getClusters(); Set < Service > removable = new HashSet < Service > (); for(ServiceRequest serviceRequest : request) { if(StringUtils.isEmpty(serviceRequest.getClusterName()) || StringUtils.isEmpty(serviceRequest.getServiceName())) { throw new AmbariException(\"invalid arguments\"); } else { if( ! AuthorizationHelper.isAuthorized(ResourceType.CLUSTER, getClusterId(serviceRequest.getClusterName()), RoleAuthorization.SERVICE_ADD_DELETE_SERVICES)) { throw new AuthorizationException(\"The user is not authorized to delete services\"); } Service service = clusters.getCluster(serviceRequest.getClusterName()).getService(serviceRequest.getServiceName()); for(ServiceComponent sc : service.getServiceComponents().values()) { if( ! sc.canBeRemoved()) { throw new AmbariException(\"Cannot remove \" + serviceRequest.getClusterName() + \"/\" + serviceRequest.getServiceName() + \". \" + sc.getName() + \" is in a non-removable state.\"); } } removable.add(service); } } for(Service service : removable) { service.getCluster().deleteService(service.getName()); } return null; } ", "test_src": "public static RequestStatusResponse deleteServices(AmbariManagementController controller, Set < ServiceRequest > requests)throws AmbariException, AuthorizationException, NoSuchFieldException, IllegalAccessException { ServiceResourceProvider provider = getServiceProvider(controller); return provider.deleteServices(requests); } ", "label": 0, "focal_db": [416502, "apache/ambari", "/data/comment_repos/apache@ambari", "f08db5c996757d265f3fe8d4ecfe5b5e03e693d2", "0df25076aaf58f4e3dd27b4fa12d9d08fcb0389d", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java", "28af9cbdf40d92c8a5e5985a2dee035196a1bd03", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java", "protected RequestStatusResponse deleteServices(Set<ServiceRequest> request)\n      throws AmbariException {\n\n    Clusters clusters    = getManagementController().getClusters();\n\n    Set<Service> removable = new HashSet<Service>();\n\n    for (ServiceRequest serviceRequest : request) {\n      if (StringUtils.isEmpty(serviceRequest.getClusterName()) || StringUtils.isEmpty(serviceRequest.getServiceName())) {\n        // FIXME throw correct error\n        throw new AmbariException(\"invalid arguments\");\n      } else {\n\n        Service service = clusters.getCluster(\n            serviceRequest.getClusterName()).getService(\n                serviceRequest.getServiceName());\n\n        //\n        // Run through the list of service components. If all components are in removable state,\n        // the service can be deleted, irrespective of it's state.\n        //\n        for (ServiceComponent sc : service.getServiceComponents().values()) {\n          if (!sc.canBeRemoved()) {\n            throw new AmbariException (\"Cannot remove \" +\n                    serviceRequest.getClusterName() + \"/\" + serviceRequest.getServiceName() +\n                    \". \" + sc.getName() + \" is in a non-removable state.\");\n          }\n        }\n\n        removable.add(service);\n      }\n    }\n\n    for (Service service : removable) {\n      service.getCluster().deleteService(service.getName());\n    }\n\n    return null;\n  }", "// Delete services based on the given set of requests\n", "protected RequestStatusResponse deleteServices(Set<ServiceRequest> request)\n      throws AmbariException, AuthorizationException {\n\n    Clusters clusters    = getManagementController().getClusters();\n\n    Set<Service> removable = new HashSet<Service>();\n\n    for (ServiceRequest serviceRequest : request) {\n      if (StringUtils.isEmpty(serviceRequest.getClusterName()) || StringUtils.isEmpty(serviceRequest.getServiceName())) {\n        // FIXME throw correct error\n        throw new AmbariException(\"invalid arguments\");\n      } else {\n\n        if(!AuthorizationHelper.isAuthorized(ResourceType.CLUSTER, getClusterId(serviceRequest.getClusterName()), RoleAuthorization.SERVICE_ADD_DELETE_SERVICES)) {\n          throw new AuthorizationException(\"The user is not authorized to delete services\");\n        }\n\n        Service service = clusters.getCluster(\n            serviceRequest.getClusterName()).getService(\n                serviceRequest.getServiceName());\n\n        //\n        // Run through the list of service components. If all components are in removable state,\n        // the service can be deleted, irrespective of it's state.\n        //\n        for (ServiceComponent sc : service.getServiceComponents().values()) {\n          if (!sc.canBeRemoved()) {\n            throw new AmbariException (\"Cannot remove \" +\n                    serviceRequest.getClusterName() + \"/\" + serviceRequest.getServiceName() +\n                    \". \" + sc.getName() + \" is in a non-removable state.\");\n          }\n        }\n\n        removable.add(service);\n      }\n    }\n\n    for (Service service : removable) {\n      service.getCluster().deleteService(service.getName());\n    }\n\n    return null;\n  }", "// Delete services based on the given set of requests\n"], "test_db": ["0a7b75f0d24458d80f7a2a321342cb47379ec23a", "apache/ambari", "/data/comment_repos/apache@ambari", "deleteServices", "/data/comment_repos/apache@ambari/ambari-server/src/test/java/org/apache/ambari/server/controller/internal/ServiceResourceProviderTest.java", "deleteServices", "  public static RequestStatusResponse deleteServices(AmbariManagementController controller, Set<ServiceRequest> requests)\n      throws AmbariException, AuthorizationException, NoSuchFieldException, IllegalAccessException {\n    ServiceResourceProvider provider = getServiceProvider(controller);\n    return provider.deleteServices(requests);\n  }", "protected RequestStatusResponse deleteServices(Set<ServiceRequest> request)\n      throws AmbariException {\n\n    Clusters clusters    = getManagementController().getClusters();\n\n    for (ServiceRequest serviceRequest : request) {\n      if (StringUtils.isEmpty(serviceRequest.getClusterName()) || StringUtils.isEmpty(serviceRequest.getServiceName())) {\n        // FIXME throw correct error\n        throw new AmbariException(\"invalid arguments\");\n      } else {\n        clusters.getCluster(serviceRequest.getClusterName()).deleteService(serviceRequest.getServiceName());\n      }\n    }\n    return null;\n  }", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java", "protected RequestStatusResponse deleteServices(Set<ServiceRequest> request)\n      throws AmbariException {\n\n    Clusters clusters    = getManagementController().getClusters();\n    \n    Set<Service> removable = new HashSet<Service>();\n    \n    for (ServiceRequest serviceRequest : request) {\n      if (StringUtils.isEmpty(serviceRequest.getClusterName()) || StringUtils.isEmpty(serviceRequest.getServiceName())) {\n        // FIXME throw correct error\n        throw new AmbariException(\"invalid arguments\");\n      } else {\n        \n        Service service = clusters.getCluster(\n            serviceRequest.getClusterName()).getService(\n                serviceRequest.getServiceName());\n        \n        if (!service.getDesiredState().isRemovableState()) {\n          throw new AmbariException(\"Cannot remove \" + service.getName() + \". Desired state \" +\n              service.getDesiredState() + \" is not removable.  Service must be stopped or disabled.\");\n        } else {\n          for (ServiceComponent sc : service.getServiceComponents().values()) {\n            if (!sc.canBeRemoved()) {\n              throw new AmbariException (\"Cannot remove \" +\n                  serviceRequest.getClusterName() + \"/\" + serviceRequest.getServiceName() +\n                  \". \" + sc.getName() + \" is in a non-removable state.\");\n            }\n          }\n        }\n        \n        removable.add(service);\n      }\n    }\n    \n    for (Service service : removable)\n      service.getCluster().deleteService(service.getName());\n    \n    return null;\n  }", "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java"], "edit_seq": [["protected", "protected", "equal"], ["Request", "Request", "equal"], ["<con>", "<con>", "equal"], ["Status", "Status", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["delete", "delete", "equal"], ["<con>", "<con>", "equal"], ["Services", "Services", "equal"], ["(", "(", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [">", ">", "equal"], ["request", "request", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Ambari", "Ambari", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["", ",", "insert"], ["", "Authorization", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["{", "{", "equal"], ["Clusters", "Clusters", "equal"], ["clusters", "clusters", "equal"], ["=", "=", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Management", "Management", "equal"], ["<con>", "<con>", "equal"], ["Controller", "Controller", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Clusters", "Clusters", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Service", "Service", "equal"], [">", ">", "equal"], ["removable", "removable", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Service", "Service", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], ["service", "service", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [":", ":", "equal"], ["request", "request", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["(", "(", "equal"], ["service", "service", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Cluster", "Cluster", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["(", "(", "equal"], ["service", "service", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Ambari", "Ambari", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["invalid", "invalid", "equal"], ["arguments", "arguments", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["", "if", "insert"], ["", "(", "insert"], ["", "!", "insert"], ["", "Authorization", "insert"], ["", "<con>", "insert"], ["", "Helper", "insert"], ["", ".", "insert"], ["", "is", "insert"], ["", "<con>", "insert"], ["", "Authorized", "insert"], ["", "(", "insert"], ["", "Resource", "insert"], ["", "<con>", "insert"], ["", "Type", "insert"], ["", ".", "insert"], ["", "CLUSTER", "insert"], ["", ",", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Cluster", "insert"], ["", "<con>", "insert"], ["", "Id", "insert"], ["", "(", "insert"], ["", "service", "insert"], ["", "<con>", "insert"], ["", "Request", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Cluster", "insert"], ["", "<con>", "insert"], ["", "Name", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ",", "insert"], ["", "Role", "insert"], ["", "<con>", "insert"], ["", "Authorization", "insert"], ["", ".", "insert"], ["", "SERVICE", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "ADD", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "DELETE", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "SERVICES", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "throw", "insert"], ["", "new", "insert"], ["", "Authorization", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["", "(", "insert"], ["", "\"", "insert"], ["", "The", "insert"], ["", "user", "insert"], ["", "is", "insert"], ["", "not", "insert"], ["", "authorized", "insert"], ["", "to", "insert"], ["", "delete", "insert"], ["", "services", "insert"], ["", "\"", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["Service", "Service", "equal"], ["service", "service", "equal"], ["=", "=", "equal"], ["clusters", "clusters", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Cluster", "Cluster", "equal"], ["(", "(", "equal"], ["service", "service", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Cluster", "Cluster", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["(", "(", "equal"], ["service", "service", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Component", "Component", "equal"], ["sc", "sc", "equal"], [":", ":", "equal"], ["service", "service", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Components", "Components", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["values", "values", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["sc", "sc", "equal"], [".", ".", "equal"], ["can", "can", "equal"], ["<con>", "<con>", "equal"], ["Be", "Be", "equal"], ["<con>", "<con>", "equal"], ["Removed", "Removed", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Ambari", "Ambari", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Can", "Can", "equal"], ["<con>", "<con>", "equal"], ["not", "not", "equal"], ["remove", "remove", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["service", "service", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Cluster", "Cluster", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["+", "+", "equal"], ["\"", "\"", "equal"], ["/", "/", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["service", "service", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["+", "+", "equal"], ["\"", "\"", "equal"], [".", ".", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["sc", "sc", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["+", "+", "equal"], ["\"", "\"", "equal"], ["is", "is", "equal"], ["in", "in", "equal"], ["a", "a", "equal"], ["non", "non", "equal"], ["<con>", "<con>", "equal"], ["-", "-", "equal"], ["<con>", "<con>", "equal"], ["removable", "removable", "equal"], ["state", "state", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["removable", "removable", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["service", "service", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["Service", "Service", "equal"], ["service", "service", "equal"], [":", ":", "equal"], ["removable", "removable", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["service", "service", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Cluster", "Cluster", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["delete", "delete", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["(", "(", "equal"], ["service", "service", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["null", "null", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@SuppressWarnings(\"unchecked\")public static < T > LinkedHashSet < T > ofAll(Iterable < ? extends T > elements) { Objects.requireNonNull(elements, \"elements is null\"); if(elements instanceof LinkedHashSet) { return(LinkedHashSet < T > )elements; } else { final LinkedHashMap < T, T > mao = addAll(LinkedHashMap.empty(), elements); return mao.isEmpty() ? empty() : new LinkedHashSet < > (mao); } } ", "focal_tgt": "@SuppressWarnings(\"unchecked\")public static < T > LinkedHashSet < T > ofAll(Iterable < ? extends T > elements) { Objects.requireNonNull(elements, \"elements is null\"); if(elements instanceof LinkedHashSet) { return(LinkedHashSet < T > )elements; } else { final LinkedHashMap < T, Object > mao = addAll(LinkedHashMap.empty(), elements); return mao.isEmpty() ? empty() : new LinkedHashSet < > (mao); } } ", "test_src": "@Override protected < T > LinkedHashSet < T > ofAll(Iterable < ? extends T > elements) { return LinkedHashSet.ofAll(elements); } ", "label": 0, "focal_db": [3808597, "vavr-io/vavr", "/data/comment_repos/vavr-io@vavr", "f78a7fb18410c08da7725beffafe3f32cf79420a", "18fc3f393189f9df7c37a0340b5511134029be69", "javaslang/src/main/java/javaslang/collection/LinkedHashSet.java", "24d22b59ac698ac9195834b6e2f39a69477e5e10", "javaslang/src/main/java/javaslang/collection/LinkedHashSet.java", "@SuppressWarnings(\"unchecked\")\n    public static <T> LinkedHashSet<T> ofAll(Iterable<? extends T> elements) {\n        Objects.requireNonNull(elements, \"elements is null\");\n        if (elements instanceof LinkedHashSet) {\n            return (LinkedHashSet<T>) elements;\n        } else {\n            final LinkedHashMap<T, T> mao = addAll(LinkedHashMap.empty(), elements);\n            return mao.isEmpty() ? empty() : new LinkedHashSet<>(mao);\n        }\n    }", "/**\n * Creates a LinkedHashSet of the given elements.\n *\n * @param elements Set elements\n * @param <T>      The value type\n * @return A new LinkedHashSet containing the given entries\n */\n", "@SuppressWarnings(\"unchecked\")\n    public static <T> LinkedHashSet<T> ofAll(Iterable<? extends T> elements) {\n        Objects.requireNonNull(elements, \"elements is null\");\n        if (elements instanceof LinkedHashSet) {\n            return (LinkedHashSet<T>) elements;\n        } else {\n            final LinkedHashMap<T, Object> mao = addAll(LinkedHashMap.empty(), elements);\n            return mao.isEmpty() ? empty() : new LinkedHashSet<>(mao);\n        }\n    }", "/**\n * Creates a LinkedHashSet of the given elements.\n *\n * @param elements Set elements\n * @param <T>      The value type\n * @return A new LinkedHashSet containing the given entries\n */\n"], "test_db": ["ff76f45c2594b9dc886fafdf1d2d7fe9515395a6", "vavr-io/vavr", "/data/comment_repos/vavr-io@vavr", "ofAll", "/data/comment_repos/vavr-io@vavr/src/test/java/io/vavr/collection/LinkedHashSetTest.java", "ofAll", "    @Override\n    protected <T> LinkedHashSet<T> ofAll(Iterable<? extends T> elements) {\n        return LinkedHashSet.ofAll(elements);\n    }", "@SafeVarargs\n    public static <T> LinkedHashSet<T> ofAll(T... elements) {\n        Objects.requireNonNull(elements, \"elements is null\");\n        LinkedHashMap<T, T> map = LinkedHashMap.empty();\n        for (T element : elements) {\n            map = map.put(element, element);\n        }\n        return new LinkedHashSet<>(map);\n    }", "src/main/java/javaslang/collection/LinkedHashSet.java", "@SafeVarargs\n    public static <T> LinkedHashSet<T> of(T... elements) {\n        Objects.requireNonNull(elements, \"elements is null\");\n        LinkedHashMap<T, T> map = LinkedHashMap.empty();\n        for (T element : elements) {\n            map = map.put(element, element);\n        }\n        return new LinkedHashSet<>(map);\n    }", "src/main/java/javaslang/collection/LinkedHashSet.java"], "edit_seq": [["@", "@", "equal"], ["Suppress", "Suppress", "equal"], ["<con>", "<con>", "equal"], ["Warnings", "Warnings", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["unchecked", "unchecked", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["public", "public", "equal"], ["static", "static", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["(", "(", "equal"], ["Iterable", "Iterable", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], ["extends", "extends", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["elements", "elements", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Objects", "Objects", "equal"], [".", ".", "equal"], ["require", "require", "equal"], ["<con>", "<con>", "equal"], ["Non", "Non", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["(", "(", "equal"], ["elements", "elements", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["elements", "elements", "equal"], ["is", "is", "equal"], ["null", "null", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["elements", "elements", "equal"], ["instanceof", "instanceof", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["(", "(", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], [")", ")", "equal"], ["elements", "elements", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [",", ",", "equal"], ["T", "Object", "replace"], [">", ">", "equal"], ["mao", "mao", "equal"], ["=", "=", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["(", "(", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], [".", ".", "equal"], ["empty", "empty", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["elements", "elements", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["mao", "mao", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["?", "?", "equal"], ["empty", "empty", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [":", ":", "equal"], ["new", "new", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], ["mao", "mao", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@Deprecated public static GeoPoint PixelXYToLatLong(final int pixelX, final int pixelY, final double zoomLevel, final GeoPoint reuse) { return getGeoFromMercator(pixelX, pixelY, MapSize(zoomLevel), reuse, true, true); } ", "focal_tgt": "@Deprecated public GeoPoint PixelXYToLatLong(final int pixelX, final int pixelY, final double zoomLevel, final GeoPoint reuse) { return getGeoFromMercator(pixelX, pixelY, MapSize(zoomLevel), reuse, true, true); } ", "test_src": "@Test public void test_PixelXYToLatLong() { final int pixelX = 45; final int pixelY = 45; final int levelOfDetail = 8; final double delta = 1E-3; final GeoPoint point = TileSystem.getGeoFromMercator(pixelX, pixelY, TileSystem.MapSize((double)levelOfDetail), null, true, true); Assert.assertEquals( - 179.752807617187, point.getLongitude(), delta); Assert.assertEquals(85.0297584051224, point.getLatitude(), delta); } ", "test_tgt": "@Test public void test_PixelXYToLatLong() { final int pixelX = 45; final int pixelY = 45; final int levelOfDetail = 8; final double delta = 1E-3; final GeoPoint point = tileSystem.getGeoFromMercator(pixelX, pixelY, TileSystem.MapSize((double)levelOfDetail), null, true, true); Assert.assertEquals( - 179.752807617187, point.getLongitude(), delta); Assert.assertEquals(85.0297584051224, point.getLatitude(), delta); } ", "label": 1, "focal_db": [3134419, "osmdroid/osmdroid", "/data/comment_repos/osmdroid@osmdroid", "7169427c610acbcb5a541401995af74b1af23931", "84efbfb11fa8e2079cf285c874aff0c5aab7575a", "osmdroid-android/src/main/java/org/osmdroid/util/TileSystem.java", "1f9884591162927805d22b85df20a2aebd7349b3", "osmdroid-android/src/main/java/org/osmdroid/util/TileSystem.java", "@Deprecated\n\tpublic static GeoPoint PixelXYToLatLong(\n\t\t\tfinal int pixelX, final int pixelY, final double zoomLevel, final GeoPoint reuse) {\n\t\treturn getGeoFromMercator(pixelX, pixelY, MapSize(zoomLevel), reuse, true, true);\n\t}", "/**\n * @since 6.0.0\n * Use {@link TileSystem#getGeoFromMercator(long, long, double, GeoPoint, boolean, boolean)} instead\n */\n", "@Deprecated\n\tpublic GeoPoint PixelXYToLatLong(\n\t\t\tfinal int pixelX, final int pixelY, final double zoomLevel, final GeoPoint reuse) {\n\t\treturn getGeoFromMercator(pixelX, pixelY, MapSize(zoomLevel), reuse, true, true);\n\t}", "/**\n * @since 6.0.0\n * Use {@link TileSystem#getGeoFromMercator(long, long, double, GeoPoint, boolean, boolean)} instead\n */\n"], "test_db": [3134457, "osmdroid/osmdroid", "/data/comment_repos/osmdroid@osmdroid", "7169427c610acbcb5a541401995af74b1af23931", "e3c7f6ce7195f7f8282b8f417f127c2a270eae04", "osmdroid-android/src/test/java/org/osmdroid/util/TileSystemTest.java", "3ff3e6d1a0c1b122df67f054c1c8a006bcda0bba", "osmdroid-android/src/test/java/org/osmdroid/util/TileSystemTest.java", "@Test\n    public void test_PixelXYToLatLong() {\n        final int pixelX = 45;\n        final int pixelY = 45;\n        final int levelOfDetail = 8;\n        final double delta = 1E-3;\n\n        final GeoPoint point = TileSystem.getGeoFromMercator(pixelX, pixelY, TileSystem.MapSize((double)levelOfDetail), null, true, true);\n\n        Assert.assertEquals(-179.752807617187, point.getLongitude(), delta);\n        Assert.assertEquals(85.0297584051224, point.getLatitude(), delta);\n    }", "/**\n * @since 6.0.2\n * Was previously in TileSystemMathTest\n */\n", "@Test\n    public void test_PixelXYToLatLong() {\n        final int pixelX = 45;\n        final int pixelY = 45;\n        final int levelOfDetail = 8;\n        final double delta = 1E-3;\n\n        final GeoPoint point = tileSystem.getGeoFromMercator(pixelX, pixelY, TileSystem.MapSize((double)levelOfDetail), null, true, true);\n\n        Assert.assertEquals(-179.752807617187, point.getLongitude(), delta);\n        Assert.assertEquals(85.0297584051224, point.getLatitude(), delta);\n    }", "/**\n * @since 6.0.2\n * Was previously in TileSystemMathTest\n */\n"], "edit_seq": [["@", "@", "equal"], ["Deprecated", "Deprecated", "equal"], ["public", "public", "equal"], ["static", "", "delete"], ["Geo", "Geo", "equal"], ["<con>", "<con>", "equal"], ["Point", "Point", "equal"], ["Pixel", "Pixel", "equal"], ["<con>", "<con>", "equal"], ["XY", "XY", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Lat", "Lat", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["int", "int", "equal"], ["pixel", "pixel", "equal"], ["<con>", "<con>", "equal"], ["X", "X", "equal"], [",", ",", "equal"], ["final", "final", "equal"], ["int", "int", "equal"], ["pixel", "pixel", "equal"], ["<con>", "<con>", "equal"], ["Y", "Y", "equal"], [",", ",", "equal"], ["final", "final", "equal"], ["double", "double", "equal"], ["zoom", "zoom", "equal"], ["<con>", "<con>", "equal"], ["Level", "Level", "equal"], [",", ",", "equal"], ["final", "final", "equal"], ["Geo", "Geo", "equal"], ["<con>", "<con>", "equal"], ["Point", "Point", "equal"], ["reuse", "reuse", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Geo", "Geo", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Mercator", "Mercator", "equal"], ["(", "(", "equal"], ["pixel", "pixel", "equal"], ["<con>", "<con>", "equal"], ["X", "X", "equal"], [",", ",", "equal"], ["pixel", "pixel", "equal"], ["<con>", "<con>", "equal"], ["Y", "Y", "equal"], [",", ",", "equal"], ["Map", "Map", "equal"], ["<con>", "<con>", "equal"], ["Size", "Size", "equal"], ["(", "(", "equal"], ["zoom", "zoom", "equal"], ["<con>", "<con>", "equal"], ["Level", "Level", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["reuse", "reuse", "equal"], [",", ",", "equal"], ["true", "true", "equal"], [",", ",", "equal"], ["true", "true", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public final List < String > getLastLogs(int count) { if(count > logList.size()) { count = logList.size(); } if(logList.size() == 0) { return new ArrayList < > (0); } else { final ArrayList < String > list = new ArrayList < > (count); count -- ; for(int i = 0; i < count; i ++ ) { list.add(logList.get(i)); } return list; } } ", "focal_tgt": "public final List < String > getLastLogs(int count) { if(count > logList.size()) { count = logList.size(); } if(logList.size() == 0) { return new ArrayList < > (0); } else { final ArrayDeque < String > list = new ArrayDeque < > (count); count -- ; int start = logList.size() - 1; int end = start - count; for(int i = start; i >= end; i -- ) { list.push(logList.get(i)); } return new ArrayList < > (list); } } ", "test_src": "@Test public void getLastLogsTest()throws Exception { startTest(false); DebugLogger log = new DebugLogger(true, 10); log.onLogEntry(2, \"tag\", \"2\"); log.onLogEntry(2, \"tag\", \"3\"); log.onLogEntry(2, \"tag\", \"4\"); log.onLogEntry(2, \"tag\", \"5\"); log.onLogEntry(2, \"tag\", \"6\"); log.onLogEntry(2, \"tag\", \"7\"); log.onLogEntry(2, \"tag\", \"8\"); log.onLogEntry(2, \"tag\", \"9\"); log.onLogEntry(2, \"tag\", \"10\"); log.onLogEntry(2, \"tag\", \"11\"); log.onLogEntry(2, \"tag\", \"12\"); List < String > list = log.getLastLogs(5); assertTrue(list.size() == 5); assertTrue(list.get(4).endsWith(\"12\")); succeed(); } ", "label": 0, "focal_db": [2269136, "iDevicesInc/SweetBlue", "/data/comment_repos/iDevicesInc@SweetBlue", "34f71792d1a2374d87317431f6f4f3d6320339f2", "a0467c2756e5acb2d005e3901d8dd6933c1253c7", "app/src/main/java/com/idevicesinc/sweetblue/utils/DebugLogger.java", "cb0671b618ebe48f0f15551ba6f00c4ae9db3687", "app/src/main/java/com/idevicesinc/sweetblue/utils/DebugLogger.java", "public final List<String> getLastLogs(int count)\n    {\n        if (count > logList.size())\n        {\n            count = logList.size();\n        }\n        if (logList.size() == 0)\n        {\n            return new ArrayList<>(0);\n        }\n        else\n        {\n            final ArrayList<String> list = new ArrayList<>(count);\n            count--;\n            for (int i = 0; i < count; i++)\n            {\n                list.add(logList.get(i));\n            }\n            return list;\n        }\n    }", "/**\n * Return a {@link List} with the last @param count of log statements. If there haven't been any yet, an empty list is returned.\n */\n", "public final List<String> getLastLogs(int count)\n    {\n        if (count > logList.size())\n        {\n            count = logList.size();\n        }\n        if (logList.size() == 0)\n        {\n            return new ArrayList<>(0);\n        }\n        else\n        {\n            final ArrayDeque<String> list = new ArrayDeque<>(count);\n            count--;\n            int start = logList.size() - 1;\n            int end = start - count;\n            for (int i = start; i >= end; i--)\n            {\n\n                list.push(logList.get(i));\n            }\n            return new ArrayList<>(list);\n        }\n    }", "/**\n * Return a {@link List} with the last count of log statements. If there haven't been any yet, an empty list is returned.\n */\n"], "test_db": ["34f71792d1a2374d87317431f6f4f3d6320339f2", "iDevicesInc/SweetBlue", "/data/comment_repos/iDevicesInc@SweetBlue", "getLastLogs", "/data/comment_repos/iDevicesInc@SweetBlue/tester/src/test/java/com/idevicesinc/sweetblue/utils/DebugLoggerTest.java", "getLastLogsTest", "    @Test\n    public void getLastLogsTest() throws Exception\n    {\n        startTest(false);\n        DebugLogger log = new DebugLogger(true, 10);\n        log.onLogEntry(2, \"tag\", \"2\");\n        log.onLogEntry(2, \"tag\", \"3\");\n        log.onLogEntry(2, \"tag\", \"4\");\n        log.onLogEntry(2, \"tag\", \"5\");\n        log.onLogEntry(2, \"tag\", \"6\");\n        log.onLogEntry(2, \"tag\", \"7\");\n        log.onLogEntry(2, \"tag\", \"8\");\n        log.onLogEntry(2, \"tag\", \"9\");\n        log.onLogEntry(2, \"tag\", \"10\");\n        log.onLogEntry(2, \"tag\", \"11\");\n        log.onLogEntry(2, \"tag\", \"12\");\n        List<String> list = log.getLastLogs(5);\n        assertTrue(list.size() == 5);\n        assertTrue(list.get(4).endsWith(\"12\"));\n        succeed();\n    }", "public final List<String> getLastLogs(int count)\n    {\n        if (count > logList.size())\n        {\n            count = logList.size();\n        }\n        if (logList.size() == 0)\n        {\n            return new ArrayList<>(0);\n        }\n        else\n        {\n            final ArrayList<String> list = new ArrayList<>(count);\n            count--;\n            for (int i = 0; i < count; i++)\n            {\n                list.add(logList.get(i));\n            }\n            return list;\n        }\n    }", "app/src/main/java/com/idevicesinc/sweetblue/utils/DebugLogger.java", "public final List<String> getLastLogs(int count)\n    {\n        if (count > logList.size())\n        {\n            count = logList.size();\n        }\n        if (logList.size() == 0)\n        {\n            return new ArrayList<>(0);\n        }\n        else\n        {\n            final ArrayDeque<String> list = new ArrayDeque<>(count);\n            count--;\n            int start = logList.size() - 1;\n            int end = start - count;\n            for (int i = start; i >= end; i--)\n            {\n\n                list.push(logList.get(i));\n            }\n            return new ArrayList<>(list);\n        }\n    }", "app/src/main/java/com/idevicesinc/sweetblue/utils/DebugLogger.java"], "edit_seq": [["public", "public", "equal"], ["final", "final", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["String", "String", "equal"], [">", ">", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Last", "Last", "equal"], ["<con>", "<con>", "equal"], ["Logs", "Logs", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], ["count", "count", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["count", "count", "equal"], [">", ">", "equal"], ["log", "log", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], [".", ".", "equal"], ["size", "size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["count", "count", "equal"], ["=", "=", "equal"], ["log", "log", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], [".", ".", "equal"], ["size", "size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["log", "log", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], [".", ".", "equal"], ["size", "size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["==", "==", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["new", "new", "equal"], ["Array", "Array", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], ["0", "0", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["Array", "Array", "equal"], ["<con>", "<con>", "equal"], ["List", "Deque", "replace"], ["<", "<", "equal"], ["String", "String", "equal"], [">", ">", "equal"], ["list", "list", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Array", "Array", "equal"], ["<con>", "<con>", "equal"], ["List", "Deque", "replace"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], ["count", "count", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["count", "count", "equal"], ["--", "--", "equal"], [";", ";", "equal"], ["", "int", "insert"], ["", "start", "insert"], ["", "=", "insert"], ["", "log", "insert"], ["", "<con>", "insert"], ["", "List", "insert"], ["", ".", "insert"], ["", "size", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "-", "insert"], ["", "1", "insert"], ["", ";", "insert"], ["", "int", "insert"], ["", "end", "insert"], ["", "=", "insert"], ["", "start", "insert"], ["", "-", "insert"], ["", "count", "insert"], ["", ";", "insert"], ["for", "for", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], ["i", "i", "equal"], ["=", "=", "equal"], ["0", "start", "replace"], [";", ";", "equal"], ["i", "i", "equal"], ["<", ">=", "replace"], ["count", "end", "replace"], [";", ";", "equal"], ["i", "i", "equal"], ["++", "--", "replace"], [")", ")", "equal"], ["{", "{", "equal"], ["list", "list", "equal"], [".", ".", "equal"], ["add", "push", "replace"], ["(", "(", "equal"], ["log", "log", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["i", "i", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["", "new", "insert"], ["", "Array", "insert"], ["", "<con>", "insert"], ["", "List", "insert"], ["", "<", "insert"], ["", ">", "insert"], ["", "(", "insert"], ["list", "list", "equal"], ["", ")", "insert"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static String replaceAll(String content, String regex, String replacementTemplate) { if(StrUtil.isEmpty(content)) { return content; } final Matcher matcher = Pattern.compile(regex, Pattern.DOTALL).matcher(content); matcher.reset(); boolean result = matcher.find(); if(result) { final Set < String > varNums = findAll(GROUP_VAR, replacementTemplate, 1, new HashSet < String > ()); final StringBuffer sb = new StringBuffer(); do { String replacement = replacementTemplate; for(String var : varNums) { int group = Integer.parseInt(var); replacement = replacement.replace(\"$\" + var, matcher.group(group)); } matcher.appendReplacement(sb, escape(replacement)); result = matcher.find(); } while(result); matcher.appendTail(sb); return sb.toString(); } return content; } ", "focal_tgt": "public static String replaceAll(String content, String regex, String replacementTemplate) { final Pattern pattern = Pattern.compile(regex, Pattern.DOTALL); return replaceAll(content, pattern, replacementTemplate); } ", "test_src": "@Test public void replaceAllTest() { String replaceAll = ReUtil.replaceAll(content, \"(\\\\d+)\", \"->$1<-\"); Assert.assertEquals(\"ZZZaaabbbccc\u4e2d\u6587->1234<-\", replaceAll); } ", "label": 0, "focal_db": [2654545, "looly/hutool", "/data/comment_repos/looly@hutool", "ef8b0ea3e67891876d4c2ce7e118d3f5094f6010", "b40e68146e0a7e98dc9070bfc4988f7f5a76caf9", "hutool-core/src/main/java/com/xiaoleilu/hutool/util/ReUtil.java", "b67d4e38057cecd412070ee5728de31b768c030f", "hutool-core/src/main/java/com/xiaoleilu/hutool/util/ReUtil.java", "public static String replaceAll(String content, String regex, String replacementTemplate) {\r\n\t\tif(StrUtil.isEmpty(content)){\r\n\t\t\treturn content;\r\n\t\t}\r\n\t\t\r\n\t\tfinal Matcher matcher = Pattern.compile(regex, Pattern.DOTALL).matcher(content);\r\n\t\tmatcher.reset();\r\n\t\tboolean result = matcher.find();\r\n\t\tif (result) {\r\n\t\t\tfinal Set<String> varNums = findAll(GROUP_VAR, replacementTemplate, 1, new HashSet<String>());\r\n\t\t\tfinal StringBuffer sb = new StringBuffer();\r\n\t\t\tdo {\r\n\t\t\t\tString replacement = replacementTemplate;\r\n\t\t\t\tfor (String var : varNums) {\r\n\t\t\t\t\tint group = Integer.parseInt(var);\r\n\t\t\t\t\treplacement = replacement.replace(\"$\" + var, matcher.group(group));\r\n\t\t\t\t}\r\n\t\t\t\tmatcher.appendReplacement(sb, escape(replacement));\r\n\t\t\t\tresult = matcher.find();\r\n\t\t\t} while (result);\r\n\t\t\tmatcher.appendTail(sb);\r\n\t\t\treturn sb.toString();\r\n\t\t}\r\n\t\treturn content;\r\n\t}", "/**\n * \u6b63\u5219\u66ff\u6362\u6307\u5b9a\u503c<br>\n * \u901a\u8fc7\u6b63\u5219\u67e5\u627e\u5230\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u628a\u5339\u914d\u5230\u7684\u5b57\u7b26\u4e32\u52a0\u5165\u5230replacementTemplate\u4e2d\uff0c$1\u8868\u793a\u5206\u7ec41\u7684\u5b57\u7b26\u4e32\n * @param content \u6587\u672c\n * @param regex \u6b63\u5219\n * @param replacementTemplate \u66ff\u6362\u7684\u6587\u672c\u6a21\u677f\uff0c\u53ef\u4ee5\u4f7f\u7528$1\u7c7b\u4f3c\u7684\u53d8\u91cf\u63d0\u53d6\u6b63\u5219\u5339\u914d\u51fa\u7684\u5185\u5bb9\n * @return \u5904\u7406\u540e\u7684\u6587\u672c\n */\n", "public static String replaceAll(String content, String regex, String replacementTemplate) {\r\n\t\tfinal Pattern pattern = Pattern.compile(regex, Pattern.DOTALL);\r\n\t\treturn replaceAll(content, pattern, replacementTemplate);\r\n\t}", "/**\n * \u6b63\u5219\u66ff\u6362\u6307\u5b9a\u503c<br>\n * \u901a\u8fc7\u6b63\u5219\u67e5\u627e\u5230\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u628a\u5339\u914d\u5230\u7684\u5b57\u7b26\u4e32\u52a0\u5165\u5230replacementTemplate\u4e2d\uff0c$1\u8868\u793a\u5206\u7ec41\u7684\u5b57\u7b26\u4e32\n * @param content \u6587\u672c\n * @param regex \u6b63\u5219\n * @param replacementTemplate \u66ff\u6362\u7684\u6587\u672c\u6a21\u677f\uff0c\u53ef\u4ee5\u4f7f\u7528$1\u7c7b\u4f3c\u7684\u53d8\u91cf\u63d0\u53d6\u6b63\u5219\u5339\u914d\u51fa\u7684\u5185\u5bb9\n * @return \u5904\u7406\u540e\u7684\u6587\u672c\n */\n"], "test_db": ["ef8b0ea3e67891876d4c2ce7e118d3f5094f6010", "looly/hutool", "/data/comment_repos/looly@hutool", "replaceAll", "/data/comment_repos/looly@hutool/hutool-core/src/test/java/cn/hutool/core/util/ReUtilTest.java", "replaceAllTest", "\t@Test\n\tpublic void replaceAllTest() {\n\t\t//\u901a\u8fc7\u6b63\u5219\u67e5\u627e\u5230\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u628a\u5339\u914d\u5230\u7684\u5b57\u7b26\u4e32\u52a0\u5165\u5230replacementTemplate\u4e2d\uff0c$1\u8868\u793a\u5206\u7ec41\u7684\u5b57\u7b26\u4e32\n\t\t//\u6b64\u5904\u628a1234\u66ff\u6362\u4e3a ->1234<-\n\t\tString replaceAll = ReUtil.replaceAll(content, \"(\\\\d+)\", \"->$1<-\");\n\t\tAssert.assertEquals(\"ZZZaaabbbccc\u4e2d\u6587->1234<-\", replaceAll);\n\t}", "public static String replaceAll(String content, String regex, String replacementTemplate) {\r\n\t\tif(StrUtil.isEmpty(content)){\r\n\t\t\treturn content;\r\n\t\t}\r\n\t\t\r\n\t\tfinal Matcher matcher = Pattern.compile(regex, Pattern.DOTALL).matcher(content);\r\n\t\tmatcher.reset();\r\n\t\tboolean result = matcher.find();\r\n\t\tif (result) {\r\n\t\t\tfinal Set<String> varNums = findAll(GROUP_VAR, replacementTemplate, 1, new HashSet<String>());\r\n\t\t\tfinal StringBuffer sb = new StringBuffer();\r\n\t\t\tdo {\r\n\t\t\t\tString replacement = replacementTemplate;\r\n\t\t\t\tfor (String var : varNums) {\r\n\t\t\t\t\tint group = Integer.parseInt(var);\r\n\t\t\t\t\treplacement = replacement.replace(\"$\" + var, matcher.group(group));\r\n\t\t\t\t}\r\n\t\t\t\tmatcher.appendReplacement(sb, escape(replacement));\r\n\t\t\t\tresult = matcher.find();\r\n\t\t\t} while (result);\r\n\t\t\tmatcher.appendTail(sb);\r\n\t\t\treturn sb.toString();\r\n\t\t}\r\n\t\treturn content;\r\n\t}", "hutool-core/src/main/java/com/xiaoleilu/hutool/util/ReUtil.java", "public static String replaceAll(String content, String regex, String replacementTemplate) {\r\n\t\tfinal Pattern pattern = Pattern.compile(regex, Pattern.DOTALL);\r\n\t\treturn replaceAll(content, pattern, replacementTemplate);\r\n\t}", "hutool-core/src/main/java/com/xiaoleilu/hutool/util/ReUtil.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["String", "String", "equal"], ["replace", "replace", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["content", "content", "equal"], [",", ",", "equal"], ["String", "String", "equal"], ["regex", "regex", "equal"], [",", ",", "equal"], ["String", "String", "equal"], ["replacement", "replacement", "equal"], ["<con>", "<con>", "equal"], ["Template", "Template", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "", "delete"], ["(", "", "delete"], ["Str", "", "delete"], ["<con>", "", "delete"], ["Util", "", "delete"], [".", "", "delete"], ["is", "", "delete"], ["<con>", "", "delete"], ["Empty", "", "delete"], ["(", "", "delete"], ["content", "", "delete"], [")", "", "delete"], [")", "", "delete"], ["{", "", "delete"], ["return", "", "delete"], ["content", "", "delete"], [";", "", "delete"], ["}", "", "delete"], ["final", "final", "equal"], ["Matcher", "Pattern", "replace"], ["matcher", "pattern", "replace"], ["=", "=", "equal"], ["Pattern", "Pattern", "equal"], [".", ".", "equal"], ["compile", "compile", "equal"], ["(", "(", "equal"], ["regex", "regex", "equal"], [",", ",", "equal"], ["Pattern", "Pattern", "equal"], [".", ".", "equal"], ["DOTALL", "DOTALL", "equal"], [")", ")", "equal"], ["", ";", "insert"], [".", "return", "replace"], ["matcher", "replace", "replace"], ["", "<con>", "insert"], ["", "All", "insert"], ["(", "(", "equal"], ["content", "content", "equal"], [")", ",", "replace"], [";", "pattern", "replace"], ["matcher", "", "delete"], [".", "", "delete"], ["reset", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["boolean", "", "delete"], ["result", "", "delete"], ["=", "", "delete"], ["matcher", "", "delete"], [".", "", "delete"], ["find", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["if", "", "delete"], ["(", "", "delete"], ["result", "", "delete"], [")", "", "delete"], ["{", "", "delete"], ["final", "", "delete"], ["Set", "", "delete"], ["<", "", "delete"], ["String", "", "delete"], [">", "", "delete"], ["var", "", "delete"], ["<con>", "", "delete"], ["Nums", "", "delete"], ["=", "", "delete"], ["find", "", "delete"], ["<con>", "", "delete"], ["All", "", "delete"], ["(", "", "delete"], ["GROUP", "", "delete"], ["<con>", "", "delete"], ["_", "", "delete"], ["<con>", "", "delete"], ["VAR", "", "delete"], [",", ",", "equal"], ["replacement", "replacement", "equal"], ["<con>", "<con>", "equal"], ["Template", "Template", "equal"], [",", "", "delete"], ["1", "", "delete"], [",", "", "delete"], ["new", "", "delete"], ["Hash", "", "delete"], ["<con>", "", "delete"], ["Set", "", "delete"], ["<", "", "delete"], ["String", "", "delete"], [">", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["final", "", "delete"], ["String", "", "delete"], ["<con>", "", "delete"], ["Buffer", "", "delete"], ["sb", "", "delete"], ["=", "", "delete"], ["new", "", "delete"], ["String", "", "delete"], ["<con>", "", "delete"], ["Buffer", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["do", "", "delete"], ["{", "", "delete"], ["String", "", "delete"], ["replacement", "", "delete"], ["=", "", "delete"], ["replacement", "", "delete"], ["<con>", "", "delete"], ["Template", "", "delete"], [";", "", "delete"], ["for", "", "delete"], ["(", "", "delete"], ["String", "", "delete"], ["var", "", "delete"], [":", "", "delete"], ["var", "", "delete"], ["<con>", "", "delete"], ["Nums", "", "delete"], [")", "", "delete"], ["{", "", "delete"], ["int", "", "delete"], ["group", "", "delete"], ["=", "", "delete"], ["Integer", "", "delete"], [".", "", "delete"], ["parse", "", "delete"], ["<con>", "", "delete"], ["Int", "", "delete"], ["(", "", "delete"], ["var", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["replacement", "", "delete"], ["=", "", "delete"], ["replacement", "", "delete"], [".", "", "delete"], ["replace", "", "delete"], ["(", "", "delete"], ["\"", "", "delete"], ["$", "", "delete"], ["\"", "", "delete"], ["+", "", "delete"], ["var", "", "delete"], [",", "", "delete"], ["matcher", "", "delete"], [".", "", "delete"], ["group", "", "delete"], ["(", "", "delete"], ["group", "", "delete"], [")", "", "delete"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["matcher", "", "delete"], [".", "", "delete"], ["append", "", "delete"], ["<con>", "", "delete"], ["Replacement", "", "delete"], ["(", "", "delete"], ["sb", "", "delete"], [",", "", "delete"], ["escape", "", "delete"], ["(", "", "delete"], ["replacement", "", "delete"], [")", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["result", "", "delete"], ["=", "", "delete"], ["matcher", "", "delete"], [".", "", "delete"], ["find", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["}", "", "delete"], ["while", "", "delete"], ["(", "", "delete"], ["result", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["matcher", "", "delete"], [".", "", "delete"], ["append", "", "delete"], ["<con>", "", "delete"], ["Tail", "", "delete"], ["(", "", "delete"], ["sb", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["return", "", "delete"], ["sb", "", "delete"], [".", "", "delete"], ["to", "", "delete"], ["<con>", "", "delete"], ["String", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["}", "", "delete"], ["return", "", "delete"], ["content", "", "delete"], [";", "", "delete"], ["}", "", "delete"]]}, {"focal_src": "public synchronized long reinitializeFile(String path, long blockSizeBytes, long ttl)throws InvalidPathException, FileDoesNotExistException { long fileId = mFileSystemMaster.getFileId(new TachyonURI(path)); FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId); if( ! fileInfo.isIsCompleted() || mFileSystemMaster.getLostFiles().contains(fileId)) { LOG.info(\"Recreate the file {} with block size of {} bytes\", path, blockSizeBytes); return mFileSystemMaster.reinitializeFile(new TachyonURI(path), blockSizeBytes, ttl); } return - 1; } ", "focal_tgt": "public synchronized long reinitializeFile(String path, long blockSizeBytes, long ttl)throws InvalidPathException, FileDoesNotExistException { long fileId = mFileSystemMaster.getFileId(new TachyonURI(path)); FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId); if( ! fileInfo.isCompleted() || mFileSystemMaster.getLostFiles().contains(fileId)) { LOG.info(\"Recreate the file {} with block size of {} bytes\", path, blockSizeBytes); return mFileSystemMaster.reinitializeFile(new TachyonURI(path), blockSizeBytes, ttl); } return - 1; } ", "test_src": "@Test public void reinitializeFileTest()throws Exception { mLineageMaster.createLineage(Lists. < TachyonURI > newArrayList(), Lists.newArrayList(new TachyonURI(\"/test1\")), mJob); FileInfo fileInfo = new FileInfo(); fileInfo.setIsCompleted(false); Mockito.when(mFileSystemMaster.getFileInfo(Mockito.any(Long.class))).thenReturn(fileInfo); mLineageMaster.reinitializeFile(\"/test1\", 500L, 10L); Mockito.verify(mFileSystemMaster).reinitializeFile(new TachyonURI(\"/test1\"), 500L, 10L); } ", "test_tgt": "@Test public void reinitializeFileTest()throws Exception { mLineageMaster.createLineage(Lists. < TachyonURI > newArrayList(), Lists.newArrayList(new TachyonURI(\"/test1\")), mJob); FileInfo fileInfo = new FileInfo(); fileInfo.setCompleted(false); Mockito.when(mFileSystemMaster.getFileInfo(Mockito.any(Long.class))).thenReturn(fileInfo); mLineageMaster.reinitializeFile(\"/test1\", 500L, 10L); Mockito.verify(mFileSystemMaster).reinitializeFile(new TachyonURI(\"/test1\"), 500L, 10L); } ", "label": 1, "focal_db": [262362, "Alluxio/alluxio", "/data/comment_repos/Alluxio@alluxio", "fa4aaf472a25df7d1baa402d20824404211b45d2", "d59c693cbea5f6ae2b1d7f020835d68b611c238b", "servers/src/main/java/tachyon/master/lineage/LineageMaster.java", "9dc20a88ee9daf5939bb47724e72958440a5870b", "servers/src/main/java/tachyon/master/lineage/LineageMaster.java", "public synchronized long reinitializeFile(String path, long blockSizeBytes, long ttl)\n      throws InvalidPathException, FileDoesNotExistException {\n    long fileId = mFileSystemMaster.getFileId(new TachyonURI(path));\n    FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId);\n    if (!fileInfo.isIsCompleted() || mFileSystemMaster.getLostFiles().contains(fileId)) {\n      LOG.info(\"Recreate the file {} with block size of {} bytes\", path, blockSizeBytes);\n      return mFileSystemMaster.reinitializeFile(new TachyonURI(path), blockSizeBytes, ttl);\n    }\n    return -1;\n  }", "/**\n * Reinitializes the file when the file is lost or not completed.\n *\n * @param path the path to the file\n * @param blockSizeBytes the block size\n * @param ttl the TTL\n * @return the id of the reinitialized file when the file is lost or not completed, -1 otherwise\n * @throws InvalidPathException the file path is invalid\n * @throws FileDoesNotExistException when the file does not exist\n */\n", "public synchronized long reinitializeFile(String path, long blockSizeBytes, long ttl)\n      throws InvalidPathException, FileDoesNotExistException {\n    long fileId = mFileSystemMaster.getFileId(new TachyonURI(path));\n    FileInfo fileInfo = mFileSystemMaster.getFileInfo(fileId);\n    if (!fileInfo.isCompleted() || mFileSystemMaster.getLostFiles().contains(fileId)) {\n      LOG.info(\"Recreate the file {} with block size of {} bytes\", path, blockSizeBytes);\n      return mFileSystemMaster.reinitializeFile(new TachyonURI(path), blockSizeBytes, ttl);\n    }\n    return -1;\n  }", "/**\n * Reinitializes the file when the file is lost or not completed.\n *\n * @param path the path to the file\n * @param blockSizeBytes the block size\n * @param ttl the TTL\n * @return the id of the reinitialized file when the file is lost or not completed, -1 otherwise\n * @throws InvalidPathException the file path is invalid\n * @throws FileDoesNotExistException when the file does not exist\n */\n"], "test_db": [262372, "Alluxio/alluxio", "/data/comment_repos/Alluxio@alluxio", "fa4aaf472a25df7d1baa402d20824404211b45d2", "af4690182a40e6de3dba6319475693fa8329a851", "servers/src/test/java/tachyon/master/lineage/LineageMasterTest.java", "68a22c14af1386841440576e084c48a7c05c856c", "servers/src/test/java/tachyon/master/lineage/LineageMasterTest.java", "@Test\n  public void reinitializeFileTest() throws Exception {\n    mLineageMaster.createLineage(Lists.<TachyonURI>newArrayList(),\n        Lists.newArrayList(new TachyonURI(\"/test1\")), mJob);\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setIsCompleted(false);\n    Mockito.when(mFileSystemMaster.getFileInfo(Mockito.any(Long.class))).thenReturn(fileInfo);\n    mLineageMaster.reinitializeFile(\"/test1\", 500L, 10L);\n    Mockito.verify(mFileSystemMaster).reinitializeFile(new TachyonURI(\"/test1\"), 500L, 10L);\n  }", "/**\n * Tests the {@link LineageMaster#reinitializeFile(String, long, long)} method.\n *\n * @throws Exception if an operation on a master fails\n */\n", "@Test\n  public void reinitializeFileTest() throws Exception {\n    mLineageMaster.createLineage(Lists.<TachyonURI>newArrayList(),\n        Lists.newArrayList(new TachyonURI(\"/test1\")), mJob);\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setCompleted(false);\n    Mockito.when(mFileSystemMaster.getFileInfo(Mockito.any(Long.class))).thenReturn(fileInfo);\n    mLineageMaster.reinitializeFile(\"/test1\", 500L, 10L);\n    Mockito.verify(mFileSystemMaster).reinitializeFile(new TachyonURI(\"/test1\"), 500L, 10L);\n  }", "/**\n * Tests the {@link LineageMaster#reinitializeFile(String, long, long)} method.\n *\n * @throws Exception if an operation on a master fails\n */\n"], "edit_seq": [["public", "public", "equal"], ["synchronized", "synchronized", "equal"], ["long", "long", "equal"], ["reinitialize", "reinitialize", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["path", "path", "equal"], [",", ",", "equal"], ["long", "long", "equal"], ["block", "block", "equal"], ["<con>", "<con>", "equal"], ["Size", "Size", "equal"], ["<con>", "<con>", "equal"], ["Bytes", "Bytes", "equal"], [",", ",", "equal"], ["long", "long", "equal"], ["ttl", "ttl", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Invalid", "Invalid", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], [",", ",", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Does", "Does", "equal"], ["<con>", "<con>", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Exist", "Exist", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["long", "long", "equal"], ["file", "file", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["=", "=", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["System", "System", "equal"], ["<con>", "<con>", "equal"], ["Master", "Master", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Tachyon", "Tachyon", "equal"], ["<con>", "<con>", "equal"], ["URI", "URI", "equal"], ["(", "(", "equal"], ["path", "path", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["file", "file", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["=", "=", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["System", "System", "equal"], ["<con>", "<con>", "equal"], ["Master", "Master", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["(", "(", "equal"], ["file", "file", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["file", "file", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Is", "", "delete"], ["<con>", "", "delete"], ["Completed", "Completed", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["System", "System", "equal"], ["<con>", "<con>", "equal"], ["Master", "Master", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Lost", "Lost", "equal"], ["<con>", "<con>", "equal"], ["Files", "Files", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["contains", "contains", "equal"], ["(", "(", "equal"], ["file", "file", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["LOG", "LOG", "equal"], [".", ".", "equal"], ["info", "info", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Recreate", "Recreate", "equal"], ["the", "the", "equal"], ["file", "file", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["with", "with", "equal"], ["block", "block", "equal"], ["size", "size", "equal"], ["of", "of", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["bytes", "bytes", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["path", "path", "equal"], [",", ",", "equal"], ["block", "block", "equal"], ["<con>", "<con>", "equal"], ["Size", "Size", "equal"], ["<con>", "<con>", "equal"], ["Bytes", "Bytes", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["System", "System", "equal"], ["<con>", "<con>", "equal"], ["Master", "Master", "equal"], [".", ".", "equal"], ["reinitialize", "reinitialize", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Tachyon", "Tachyon", "equal"], ["<con>", "<con>", "equal"], ["URI", "URI", "equal"], ["(", "(", "equal"], ["path", "path", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["block", "block", "equal"], ["<con>", "<con>", "equal"], ["Size", "Size", "equal"], ["<con>", "<con>", "equal"], ["Bytes", "Bytes", "equal"], [",", ",", "equal"], ["ttl", "ttl", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static long merge(Row existing, Row update, Columns mergedColumns, Row.Builder builder, int nowInSec) { Clustering clustering = existing.clustering(); builder.newRow(clustering); LivenessInfo existingInfo = existing.primaryKeyLivenessInfo(); LivenessInfo updateInfo = update.primaryKeyLivenessInfo(); LivenessInfo mergedInfo = existingInfo.supersedes(updateInfo) ? existingInfo : updateInfo; long timeDelta = Math.abs(existingInfo.timestamp() - mergedInfo.timestamp()); DeletionTime deletion = existing.deletion().supersedes(update.deletion()) ? existing.deletion() : update.deletion(); if(deletion.deletes(mergedInfo))mergedInfo = LivenessInfo.EMPTY; builder.addPrimaryKeyLivenessInfo(mergedInfo); builder.addRowDeletion(deletion); for(int i = 0; i < mergedColumns.simpleColumnCount(); i ++ ) { ColumnDefinition c = mergedColumns.getSimple(i); Cell existingCell = existing.getCell(c); Cell updateCell = update.getCell(c); timeDelta = Math.min(timeDelta, Cells.reconcile(existingCell, updateCell, deletion, builder, nowInSec)); } for(int i = 0; i < mergedColumns.complexColumnCount(); i ++ ) { ColumnDefinition c = mergedColumns.getComplex(i); ComplexColumnData existingData = existing.getComplexColumnData(c); ComplexColumnData updateData = update.getComplexColumnData(c); DeletionTime existingDt = existingData == null ? DeletionTime.LIVE : existingData.complexDeletion(); DeletionTime updateDt = updateData == null ? DeletionTime.LIVE : updateData.complexDeletion(); DeletionTime maxDt = existingDt.supersedes(updateDt) ? existingDt : updateDt; if(maxDt.supersedes(deletion))builder.addComplexDeletion(c, maxDt); else maxDt = deletion; Iterator < Cell > existingCells = existingData == null ? null : existingData.iterator(); Iterator < Cell > updateCells = updateData == null ? null : updateData.iterator(); timeDelta = Math.min(timeDelta, Cells.reconcileComplex(c, existingCells, updateCells, maxDt, builder, nowInSec)); } return timeDelta; } ", "focal_tgt": "public static long merge(Row existing, Row update, Row.Builder builder, int nowInSec) { Clustering clustering = existing.clustering(); builder.newRow(clustering); LivenessInfo existingInfo = existing.primaryKeyLivenessInfo(); LivenessInfo updateInfo = update.primaryKeyLivenessInfo(); LivenessInfo mergedInfo = existingInfo.supersedes(updateInfo) ? existingInfo : updateInfo; long timeDelta = Math.abs(existingInfo.timestamp() - mergedInfo.timestamp()); DeletionTime deletion = existing.deletion().supersedes(update.deletion()) ? existing.deletion() : update.deletion(); if(deletion.deletes(mergedInfo))mergedInfo = LivenessInfo.EMPTY; builder.addPrimaryKeyLivenessInfo(mergedInfo); builder.addRowDeletion(deletion); Iterator < ColumnData > a = existing.iterator(); Iterator < ColumnData > b = update.iterator(); ColumnData nexta = a.hasNext() ? a.next() : null, nextb = b.hasNext() ? b.next() : null; while(nexta != null | nextb != null) { int comparison = nexta == null ? 1 : nextb == null ? - 1 : nexta.column.compareTo(nextb.column); ColumnData cura = comparison <= 0 ? nexta : null; ColumnData curb = comparison >= 0 ? nextb : null; ColumnDefinition column = (cura != null ? cura : curb).column; if(column.isSimple()) { timeDelta = Math.min(timeDelta, Cells.reconcile((Cell)cura, (Cell)curb, deletion, builder, nowInSec)); } else { ComplexColumnData existingData = (ComplexColumnData)cura; ComplexColumnData updateData = (ComplexColumnData)curb; DeletionTime existingDt = existingData == null ? DeletionTime.LIVE : existingData.complexDeletion(); DeletionTime updateDt = updateData == null ? DeletionTime.LIVE : updateData.complexDeletion(); DeletionTime maxDt = existingDt.supersedes(updateDt) ? existingDt : updateDt; if(maxDt.supersedes(deletion))builder.addComplexDeletion(column, maxDt); else maxDt = deletion; Iterator < Cell > existingCells = existingData == null ? null : existingData.iterator(); Iterator < Cell > updateCells = updateData == null ? null : updateData.iterator(); timeDelta = Math.min(timeDelta, Cells.reconcileComplex(column, existingCells, updateCells, maxDt, builder, nowInSec)); } if(cura != null)nexta = a.hasNext() ? a.next() : null; if(curb != null)nextb = b.hasNext() ? b.next() : null; } return timeDelta; } ", "test_src": "@Test public void merge() { int now1 = FBUtilities.nowInSeconds(); Row.Builder existingBuilder = createBuilder(c1, now1, BB1, BB1, BB1); int now2 = now1 + 1; long ts2 = secondToTs(now2); Cell expectedVCell = BufferCell.live(v, ts2, BB2); Cell expectedMCell = BufferCell.live(m, ts2, BB2, CellPath.create(BB1)); DeletionTime expectedComplexDeletionTime = new DeletionTime(ts2 - 1, now2); Row.Builder updateBuilder = createBuilder(c1, now2, null, null, null); updateBuilder.addCell(expectedVCell); updateBuilder.addComplexDeletion(m, expectedComplexDeletionTime); updateBuilder.addCell(expectedMCell); RowBuilder builder = new RowBuilder(); long td = Rows.merge(existingBuilder.build(), updateBuilder.build(), builder); Assert.assertEquals(c1, builder.clustering); Assert.assertEquals(LivenessInfo.create(ts2, now2), builder.livenessInfo); Assert.assertEquals(Lists.newArrayList(Pair.create(m, new DeletionTime(ts2 - 1, now2))), builder.complexDeletions); Assert.assertEquals(2, builder.cells.size()); Assert.assertEquals(Lists.newArrayList(expectedVCell, expectedMCell), Lists.newArrayList(builder.cells)); Assert.assertEquals(ts2 - secondToTs(now1), td); } ", "label": 0, "focal_db": [529818, "apache/cassandra", "/data/comment_repos/apache@cassandra", "aa5762633a06e229cd9122983eec94bdb74fc23a", "ce177f2b988031ca76ee4a7326a62e66933c147b", "src/java/org/apache/cassandra/db/rows/Rows.java", "bf9ed5e4b2ef56b204b32b8e38652b72e9882727", "src/java/org/apache/cassandra/db/rows/Rows.java", "public static long merge(Row existing,\n                             Row update,\n                             Columns mergedColumns,\n                             Row.Builder builder,\n                             int nowInSec)\n    {\n        Clustering clustering = existing.clustering();\n        builder.newRow(clustering);\n\n        LivenessInfo existingInfo = existing.primaryKeyLivenessInfo();\n        LivenessInfo updateInfo = update.primaryKeyLivenessInfo();\n        LivenessInfo mergedInfo = existingInfo.supersedes(updateInfo) ? existingInfo : updateInfo;\n\n        long timeDelta = Math.abs(existingInfo.timestamp() - mergedInfo.timestamp());\n\n        DeletionTime deletion = existing.deletion().supersedes(update.deletion()) ? existing.deletion() : update.deletion();\n\n        if (deletion.deletes(mergedInfo))\n            mergedInfo = LivenessInfo.EMPTY;\n\n        builder.addPrimaryKeyLivenessInfo(mergedInfo);\n        builder.addRowDeletion(deletion);\n\n        for (int i = 0; i < mergedColumns.simpleColumnCount(); i++)\n        {\n            ColumnDefinition c = mergedColumns.getSimple(i);\n            Cell existingCell = existing.getCell(c);\n            Cell updateCell = update.getCell(c);\n            timeDelta = Math.min(timeDelta, Cells.reconcile(existingCell,\n                                                            updateCell,\n                                                            deletion,\n                                                            builder,\n                                                            nowInSec));\n        }\n\n        for (int i = 0; i < mergedColumns.complexColumnCount(); i++)\n        {\n            ColumnDefinition c = mergedColumns.getComplex(i);\n            ComplexColumnData existingData = existing.getComplexColumnData(c);\n            ComplexColumnData updateData = update.getComplexColumnData(c);\n\n            DeletionTime existingDt = existingData == null ? DeletionTime.LIVE : existingData.complexDeletion();\n            DeletionTime updateDt = updateData == null ? DeletionTime.LIVE : updateData.complexDeletion();\n            DeletionTime maxDt = existingDt.supersedes(updateDt) ? existingDt : updateDt;\n            if (maxDt.supersedes(deletion))\n                builder.addComplexDeletion(c, maxDt);\n            else\n                maxDt = deletion;\n\n            Iterator<Cell> existingCells = existingData == null ? null : existingData.iterator();\n            Iterator<Cell> updateCells = updateData == null ? null : updateData.iterator();\n            timeDelta = Math.min(timeDelta, Cells.reconcileComplex(c, existingCells, updateCells, maxDt, builder, nowInSec));\n        }\n\n        return timeDelta;\n    }", "// Return the minimum timestamp delta between existing and update\n", "public static long merge(Row existing,\n                             Row update,\n                             Row.Builder builder,\n                             int nowInSec)\n    {\n        Clustering clustering = existing.clustering();\n        builder.newRow(clustering);\n\n        LivenessInfo existingInfo = existing.primaryKeyLivenessInfo();\n        LivenessInfo updateInfo = update.primaryKeyLivenessInfo();\n        LivenessInfo mergedInfo = existingInfo.supersedes(updateInfo) ? existingInfo : updateInfo;\n\n        long timeDelta = Math.abs(existingInfo.timestamp() - mergedInfo.timestamp());\n\n        DeletionTime deletion = existing.deletion().supersedes(update.deletion()) ? existing.deletion() : update.deletion();\n\n        if (deletion.deletes(mergedInfo))\n            mergedInfo = LivenessInfo.EMPTY;\n\n        builder.addPrimaryKeyLivenessInfo(mergedInfo);\n        builder.addRowDeletion(deletion);\n\n        Iterator<ColumnData> a = existing.iterator();\n        Iterator<ColumnData> b = update.iterator();\n        ColumnData nexta = a.hasNext() ? a.next() : null, nextb = b.hasNext() ? b.next() : null;\n        while (nexta != null | nextb != null)\n        {\n            int comparison = nexta == null ? 1 : nextb == null ? -1 : nexta.column.compareTo(nextb.column);\n            ColumnData cura = comparison <= 0 ? nexta : null;\n            ColumnData curb = comparison >= 0 ? nextb : null;\n            ColumnDefinition column = (cura != null ? cura : curb).column;\n            if (column.isSimple())\n            {\n                timeDelta = Math.min(timeDelta, Cells.reconcile((Cell) cura, (Cell) curb, deletion, builder, nowInSec));\n            }\n            else\n            {\n                ComplexColumnData existingData = (ComplexColumnData) cura;\n                ComplexColumnData updateData = (ComplexColumnData) curb;\n\n                DeletionTime existingDt = existingData == null ? DeletionTime.LIVE : existingData.complexDeletion();\n                DeletionTime updateDt = updateData == null ? DeletionTime.LIVE : updateData.complexDeletion();\n                DeletionTime maxDt = existingDt.supersedes(updateDt) ? existingDt : updateDt;\n                if (maxDt.supersedes(deletion))\n                    builder.addComplexDeletion(column, maxDt);\n                else\n                    maxDt = deletion;\n\n                Iterator<Cell> existingCells = existingData == null ? null : existingData.iterator();\n                Iterator<Cell> updateCells = updateData == null ? null : updateData.iterator();\n                timeDelta = Math.min(timeDelta, Cells.reconcileComplex(column, existingCells, updateCells, maxDt, builder, nowInSec));\n            }\n\n            if (cura != null)\n                nexta = a.hasNext() ? a.next() : null;\n            if (curb != null)\n                nextb = b.hasNext() ? b.next() : null;\n        }\n        return timeDelta;\n    }", "// Return the minimum timestamp delta between existing and update\n"], "test_db": ["2457599427d361314dce4833abeb5cd4915d0b06", "apache/cassandra", "/data/comment_repos/apache@cassandra", "merge", "/data/comment_repos/apache@cassandra/test/unit/org/apache/cassandra/db/rows/RowsTest.java", "merge", "    @Test\n    public void merge()\n    {\n        int now1 = FBUtilities.nowInSeconds();\n        Row.Builder existingBuilder = createBuilder(c1, now1, BB1, BB1, BB1);\n\n        int now2 = now1 + 1;\n        long ts2 = secondToTs(now2);\n\n        Cell expectedVCell = BufferCell.live(v, ts2, BB2);\n        Cell expectedMCell = BufferCell.live(m, ts2, BB2, CellPath.create(BB1));\n        DeletionTime expectedComplexDeletionTime = new DeletionTime(ts2 - 1, now2);\n\n        Row.Builder updateBuilder = createBuilder(c1, now2, null, null, null);\n        updateBuilder.addCell(expectedVCell);\n        updateBuilder.addComplexDeletion(m, expectedComplexDeletionTime);\n        updateBuilder.addCell(expectedMCell);\n\n        RowBuilder builder = new RowBuilder();\n        long td = Rows.merge(existingBuilder.build(), updateBuilder.build(), builder);\n\n        Assert.assertEquals(c1, builder.clustering);\n        Assert.assertEquals(LivenessInfo.create(ts2, now2), builder.livenessInfo);\n        Assert.assertEquals(Lists.newArrayList(Pair.create(m, new DeletionTime(ts2-1, now2))), builder.complexDeletions);\n\n        Assert.assertEquals(2, builder.cells.size());\n        Assert.assertEquals(Lists.newArrayList(expectedVCell, expectedMCell), Lists.newArrayList(builder.cells));\n        Assert.assertEquals(ts2 - secondToTs(now1), td);\n    }", "public static long merge(Row existing,\n                             Row update,\n                             Columns mergedColumns,\n                             Row.Writer writer,\n                             int nowInSec,\n                             SecondaryIndexManager.Updater indexUpdater)\n    {\n        Clustering clustering = existing.clustering();\n        writeClustering(clustering, writer);\n\n        LivenessInfo existingInfo = existing.primaryKeyLivenessInfo();\n        LivenessInfo updateInfo = update.primaryKeyLivenessInfo();\n        LivenessInfo mergedInfo = existingInfo.mergeWith(updateInfo);\n\n        long timeDelta = Math.abs(existingInfo.timestamp() - mergedInfo.timestamp());\n\n        DeletionTime deletion = existing.deletion().supersedes(update.deletion()) ? existing.deletion() : update.deletion();\n\n        if (deletion.deletes(mergedInfo))\n            mergedInfo = LivenessInfo.NONE;\n\n        writer.writePartitionKeyLivenessInfo(mergedInfo);\n        writer.writeRowDeletion(deletion);\n\n        indexUpdater.maybeIndex(clustering, mergedInfo.timestamp(), mergedInfo.ttl(), deletion);\n\n        for (int i = 0; i < mergedColumns.simpleColumnCount(); i++)\n        {\n            ColumnDefinition c = mergedColumns.getSimple(i);\n            Cell existingCell = existing.getCell(c);\n            Cell updateCell = update.getCell(c);\n            timeDelta = Math.min(timeDelta, Cells.reconcile(clustering,\n                                                            existingCell,\n                                                            updateCell,\n                                                            deletion,\n                                                            writer,\n                                                            nowInSec,\n                                                            indexUpdater));\n        }\n\n        for (int i = 0; i < mergedColumns.complexColumnCount(); i++)\n        {\n            ColumnDefinition c = mergedColumns.getComplex(i);\n            DeletionTime existingDt = existing.getDeletion(c);\n            DeletionTime updateDt = update.getDeletion(c);\n            DeletionTime maxDt = existingDt.supersedes(updateDt) ? existingDt : updateDt;\n            if (maxDt.supersedes(deletion))\n                writer.writeComplexDeletion(c, maxDt);\n            else\n                maxDt = deletion;\n\n            Iterator<Cell> existingCells = existing.getCells(c);\n            Iterator<Cell> updateCells = update.getCells(c);\n            timeDelta = Math.min(timeDelta, Cells.reconcileComplex(clustering, c, existingCells, updateCells, maxDt, writer, nowInSec, indexUpdater));\n        }\n\n        writer.endOfRow();\n        return timeDelta;\n    }", "src/java/org/apache/cassandra/db/rows/Rows.java", "public static long merge(Row existing,\n                             Row update,\n                             Columns mergedColumns,\n                             Row.Builder builder,\n                             int nowInSec,\n                             SecondaryIndexManager.Updater indexUpdater)\n    {\n        Clustering clustering = existing.clustering();\n        builder.newRow(clustering);\n\n        LivenessInfo existingInfo = existing.primaryKeyLivenessInfo();\n        LivenessInfo updateInfo = update.primaryKeyLivenessInfo();\n        LivenessInfo mergedInfo = existingInfo.supersedes(updateInfo) ? existingInfo : updateInfo;\n\n        long timeDelta = Math.abs(existingInfo.timestamp() - mergedInfo.timestamp());\n\n        DeletionTime deletion = existing.deletion().supersedes(update.deletion()) ? existing.deletion() : update.deletion();\n\n        if (deletion.deletes(mergedInfo))\n            mergedInfo = LivenessInfo.EMPTY;\n\n        builder.addPrimaryKeyLivenessInfo(mergedInfo);\n        builder.addRowDeletion(deletion);\n\n        indexUpdater.maybeIndex(clustering, mergedInfo.timestamp(), mergedInfo.ttl(), deletion);\n\n        for (int i = 0; i < mergedColumns.simpleColumnCount(); i++)\n        {\n            ColumnDefinition c = mergedColumns.getSimple(i);\n            Cell existingCell = existing.getCell(c);\n            Cell updateCell = update.getCell(c);\n            timeDelta = Math.min(timeDelta, Cells.reconcile(clustering,\n                                                            existingCell,\n                                                            updateCell,\n                                                            deletion,\n                                                            builder,\n                                                            nowInSec,\n                                                            indexUpdater));\n        }\n\n        for (int i = 0; i < mergedColumns.complexColumnCount(); i++)\n        {\n            ColumnDefinition c = mergedColumns.getComplex(i);\n            ComplexColumnData existingData = existing.getComplexColumnData(c);\n            ComplexColumnData updateData = update.getComplexColumnData(c);\n\n            DeletionTime existingDt = existingData == null ? DeletionTime.LIVE : existingData.complexDeletion();\n            DeletionTime updateDt = updateData == null ? DeletionTime.LIVE : updateData.complexDeletion();\n            DeletionTime maxDt = existingDt.supersedes(updateDt) ? existingDt : updateDt;\n            if (maxDt.supersedes(deletion))\n                builder.addComplexDeletion(c, maxDt);\n            else\n                maxDt = deletion;\n\n            Iterator<Cell> existingCells = existingData == null ? null : existingData.iterator();\n            Iterator<Cell> updateCells = updateData == null ? null : updateData.iterator();\n            timeDelta = Math.min(timeDelta, Cells.reconcileComplex(clustering, c, existingCells, updateCells, maxDt, builder, nowInSec, indexUpdater));\n        }\n\n        return timeDelta;\n    }", "src/java/org/apache/cassandra/db/rows/Rows.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["long", "long", "equal"], ["merge", "merge", "equal"], ["(", "(", "equal"], ["Row", "Row", "equal"], ["existing", "existing", "equal"], [",", ",", "equal"], ["Row", "Row", "equal"], ["update", "update", "equal"], [",", ",", "equal"], ["Columns", "", "delete"], ["merged", "", "delete"], ["<con>", "", "delete"], ["Columns", "", "delete"], [",", "", "delete"], ["Row", "Row", "equal"], [".", ".", "equal"], ["Builder", "Builder", "equal"], ["builder", "builder", "equal"], [",", ",", "equal"], ["int", "int", "equal"], ["now", "now", "equal"], ["<con>", "<con>", "equal"], ["In", "In", "equal"], ["<con>", "<con>", "equal"], ["Sec", "Sec", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Clustering", "Clustering", "equal"], ["clustering", "clustering", "equal"], ["=", "=", "equal"], ["existing", "existing", "equal"], [".", ".", "equal"], ["clustering", "clustering", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["new", "new", "equal"], ["<con>", "<con>", "equal"], ["Row", "Row", "equal"], ["(", "(", "equal"], ["clustering", "clustering", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Liveness", "Liveness", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["=", "=", "equal"], ["existing", "existing", "equal"], [".", ".", "equal"], ["primary", "primary", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "<con>", "equal"], ["Liveness", "Liveness", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Liveness", "Liveness", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["=", "=", "equal"], ["update", "update", "equal"], [".", ".", "equal"], ["primary", "primary", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "<con>", "equal"], ["Liveness", "Liveness", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Liveness", "Liveness", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["merged", "merged", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["=", "=", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], [".", ".", "equal"], ["supersedes", "supersedes", "equal"], ["(", "(", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], [")", ")", "equal"], ["?", "?", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], [":", ":", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], [";", ";", "equal"], ["long", "long", "equal"], ["time", "time", "equal"], ["<con>", "<con>", "equal"], ["Delta", "Delta", "equal"], ["=", "=", "equal"], ["Math", "Math", "equal"], [".", ".", "equal"], ["abs", "abs", "equal"], ["(", "(", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], [".", ".", "equal"], ["timestamp", "timestamp", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["-", "-", "equal"], ["merged", "merged", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], [".", ".", "equal"], ["timestamp", "timestamp", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Deletion", "Deletion", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["deletion", "deletion", "equal"], ["=", "=", "equal"], ["existing", "existing", "equal"], [".", ".", "equal"], ["deletion", "deletion", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["supersedes", "supersedes", "equal"], ["(", "(", "equal"], ["update", "update", "equal"], [".", ".", "equal"], ["deletion", "deletion", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["?", "?", "equal"], ["existing", "existing", "equal"], [".", ".", "equal"], ["deletion", "deletion", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [":", ":", "equal"], ["update", "update", "equal"], [".", ".", "equal"], ["deletion", "deletion", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["deletion", "deletion", "equal"], [".", ".", "equal"], ["deletes", "deletes", "equal"], ["(", "(", "equal"], ["merged", "merged", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["merged", "merged", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["=", "=", "equal"], ["Liveness", "Liveness", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], [".", ".", "equal"], ["EMPTY", "EMPTY", "equal"], [";", ";", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["Primary", "Primary", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "<con>", "equal"], ["Liveness", "Liveness", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["(", "(", "equal"], ["merged", "merged", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["Row", "Row", "equal"], ["<con>", "<con>", "equal"], ["Deletion", "Deletion", "equal"], ["(", "(", "equal"], ["deletion", "deletion", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "Iterator", "replace"], ["(", "<", "replace"], ["", "Column", "insert"], ["", "<con>", "insert"], ["", "Data", "insert"], ["", ">", "insert"], ["", "a", "insert"], ["", "=", "insert"], ["", "existing", "insert"], ["", ".", "insert"], ["", "iterator", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "Iterator", "insert"], ["", "<", "insert"], ["", "Column", "insert"], ["", "<con>", "insert"], ["", "Data", "insert"], ["", ">", "insert"], ["", "b", "insert"], ["", "=", "insert"], ["", "update", "insert"], ["", ".", "insert"], ["", "iterator", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "Column", "insert"], ["", "<con>", "insert"], ["", "Data", "insert"], ["", "nexta", "insert"], ["", "=", "insert"], ["", "a", "insert"], ["", ".", "insert"], ["", "has", "insert"], ["", "<con>", "insert"], ["", "Next", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "?", "insert"], ["", "a", "insert"], ["", ".", "insert"], ["", "next", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ":", "insert"], ["", "null", "insert"], ["", ",", "insert"], ["", "nextb", "insert"], ["", "=", "insert"], ["", "b", "insert"], ["", ".", "insert"], ["", "has", "insert"], ["", "<con>", "insert"], ["", "Next", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "?", "insert"], ["", "b", "insert"], ["", ".", "insert"], ["", "next", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ":", "insert"], ["", "null", "insert"], ["", ";", "insert"], ["", "while", "insert"], ["", "(", "insert"], ["", "nexta", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", "|", "insert"], ["", "nextb", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["int", "int", "equal"], ["", "comparison", "insert"], ["", "=", "insert"], ["", "nexta", "insert"], ["", "==", "insert"], ["", "null", "insert"], ["", "?", "insert"], ["", "1", "insert"], ["", ":", "insert"], ["", "nextb", "insert"], ["", "==", "insert"], ["", "null", "insert"], ["", "?", "insert"], ["", "-", "insert"], ["", "1", "insert"], ["", ":", "insert"], ["", "nexta", "insert"], ["", ".", "insert"], ["", "column", "insert"], ["", ".", "insert"], ["", "compare", "insert"], ["", "<con>", "insert"], ["", "To", "insert"], ["", "(", "insert"], ["", "nextb", "insert"], ["", ".", "insert"], ["", "column", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "Column", "insert"], ["", "<con>", "insert"], ["", "Data", "insert"], ["", "cura", "insert"], ["", "=", "insert"], ["i", "comparison", "replace"], ["=", "<=", "replace"], ["0", "0", "equal"], [";", "?", "replace"], ["i", "nexta", "replace"], ["<", ":", "replace"], ["merged", "", "delete"], ["<con>", "", "delete"], ["Columns", "null", "replace"], [".", ";", "replace"], ["simple", "", "delete"], ["<con>", "", "delete"], ["Column", "Column", "equal"], ["<con>", "<con>", "equal"], ["Count", "Data", "replace"], ["(", "curb", "replace"], [")", "=", "replace"], [";", "comparison", "replace"], ["i", ">=", "replace"], ["++", "0", "replace"], ["", "?", "insert"], ["", "nextb", "insert"], ["", ":", "insert"], ["", "null", "insert"], ["", ";", "insert"], ["", "Column", "insert"], ["", "<con>", "insert"], ["", "Definition", "insert"], ["", "column", "insert"], ["", "=", "insert"], ["", "(", "insert"], ["", "cura", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", "?", "insert"], ["", "cura", "insert"], ["", ":", "insert"], ["", "curb", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "column", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "column", "insert"], ["", ".", "insert"], ["", "is", "insert"], ["", "<con>", "insert"], ["", "Simple", "insert"], ["", "(", "insert"], ["", ")", "insert"], [")", ")", "equal"], ["{", "{", "equal"], ["Column", "time", "replace"], ["<con>", "<con>", "equal"], ["Definition", "Delta", "replace"], ["c", "=", "replace"], ["=", "Math", "replace"], ["merged", ".", "replace"], ["<con>", "", "delete"], ["Columns", "", "delete"], [".", "min", "replace"], ["get", "(", "replace"], ["<con>", "", "delete"], ["Simple", "", "delete"], ["(", "time", "replace"], ["", "<con>", "insert"], ["", "Delta", "insert"], ["i", ",", "replace"], [")", "Cells", "replace"], [";", ".", "replace"], ["", "reconcile", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["Cell", "Cell", "equal"], ["existing", ")", "replace"], ["<con>", "", "delete"], ["Cell", "", "delete"], ["=", "cura", "replace"], ["existing", ",", "replace"], [".", "(", "replace"], ["get", "", "delete"], ["<con>", "", "delete"], ["Cell", "", "delete"], ["(", "", "delete"], ["c", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["Cell", "Cell", "equal"], ["update", "", "delete"], ["<con>", "", "delete"], ["Cell", "", "delete"], ["=", "", "delete"], ["update", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Cell", "", "delete"], ["(", "", "delete"], ["c", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["time", "", "delete"], ["<con>", "", "delete"], ["Delta", "", "delete"], ["=", "", "delete"], ["Math", "", "delete"], [".", "", "delete"], ["min", "", "delete"], ["(", "", "delete"], ["time", "", "delete"], ["<con>", "", "delete"], ["Delta", "", "delete"], [",", "", "delete"], ["Cells", "", "delete"], [".", "", "delete"], ["reconcile", "", "delete"], ["(", "", "delete"], ["existing", "", "delete"], ["<con>", "", "delete"], ["Cell", "", "delete"], [",", ")", "replace"], ["update", "curb", "replace"], ["<con>", "", "delete"], ["Cell", "", "delete"], [",", ",", "equal"], ["deletion", "deletion", "equal"], [",", ",", "equal"], ["builder", "builder", "equal"], [",", ",", "equal"], ["now", "now", "equal"], ["<con>", "<con>", "equal"], ["In", "In", "equal"], ["<con>", "<con>", "equal"], ["Sec", "Sec", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["for", "else", "replace"], ["(", "", "delete"], ["int", "", "delete"], ["i", "", "delete"], ["=", "", "delete"], ["0", "", "delete"], [";", "", "delete"], ["i", "", "delete"], ["<", "", "delete"], ["merged", "", "delete"], ["<con>", "", "delete"], ["Columns", "", "delete"], [".", "", "delete"], ["complex", "", "delete"], ["<con>", "", "delete"], ["Column", "", "delete"], ["<con>", "", "delete"], ["Count", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["i", "", "delete"], ["++", "", "delete"], [")", "", "delete"], ["{", "{", "equal"], ["Column", "", "delete"], ["<con>", "", "delete"], ["Definition", "", "delete"], ["c", "", "delete"], ["=", "", "delete"], ["merged", "", "delete"], ["<con>", "", "delete"], ["Columns", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Complex", "", "delete"], ["(", "", "delete"], ["i", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["Complex", "Complex", "equal"], ["<con>", "<con>", "equal"], ["Column", "Column", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["=", "=", "equal"], ["existing", "(", "replace"], [".", "Complex", "replace"], ["", "<con>", "insert"], ["", "Column", "insert"], ["", "<con>", "insert"], ["", "Data", "insert"], ["get", ")", "replace"], ["<con>", "", "delete"], ["Complex", "", "delete"], ["<con>", "", "delete"], ["Column", "", "delete"], ["<con>", "", "delete"], ["Data", "", "delete"], ["(", "cura", "replace"], ["c", "", "delete"], [")", "", "delete"], [";", ";", "equal"], ["Complex", "Complex", "equal"], ["<con>", "<con>", "equal"], ["Column", "Column", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["=", "=", "equal"], ["update", "(", "replace"], [".", "Complex", "replace"], ["", "<con>", "insert"], ["", "Column", "insert"], ["", "<con>", "insert"], ["", "Data", "insert"], ["get", ")", "replace"], ["<con>", "", "delete"], ["Complex", "", "delete"], ["<con>", "", "delete"], ["Column", "", "delete"], ["<con>", "", "delete"], ["Data", "", "delete"], ["(", "curb", "replace"], ["c", "", "delete"], [")", "", "delete"], [";", ";", "equal"], ["Deletion", "Deletion", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], ["=", "=", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], ["?", "?", "equal"], ["Deletion", "Deletion", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], [".", ".", "equal"], ["LIVE", "LIVE", "equal"], [":", ":", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [".", ".", "equal"], ["complex", "complex", "equal"], ["<con>", "<con>", "equal"], ["Deletion", "Deletion", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Deletion", "Deletion", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], ["=", "=", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], ["?", "?", "equal"], ["Deletion", "Deletion", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], [".", ".", "equal"], ["LIVE", "LIVE", "equal"], [":", ":", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [".", ".", "equal"], ["complex", "complex", "equal"], ["<con>", "<con>", "equal"], ["Deletion", "Deletion", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Deletion", "Deletion", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], ["=", "=", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], [".", ".", "equal"], ["supersedes", "supersedes", "equal"], ["(", "(", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], [")", ")", "equal"], ["?", "?", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], [":", ":", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], [".", ".", "equal"], ["supersedes", "supersedes", "equal"], ["(", "(", "equal"], ["deletion", "deletion", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["Complex", "Complex", "equal"], ["<con>", "<con>", "equal"], ["Deletion", "Deletion", "equal"], ["(", "(", "equal"], ["c", "column", "replace"], [",", ",", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["else", "else", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], ["=", "=", "equal"], ["deletion", "deletion", "equal"], [";", ";", "equal"], ["Iterator", "Iterator", "equal"], ["<", "<", "equal"], ["Cell", "Cell", "equal"], [">", ">", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Cells", "Cells", "equal"], ["=", "=", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], ["?", "?", "equal"], ["null", "null", "equal"], [":", ":", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [".", ".", "equal"], ["iterator", "iterator", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Iterator", "Iterator", "equal"], ["<", "<", "equal"], ["Cell", "Cell", "equal"], [">", ">", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Cells", "Cells", "equal"], ["=", "=", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], ["?", "?", "equal"], ["null", "null", "equal"], [":", ":", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [".", ".", "equal"], ["iterator", "iterator", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["time", "time", "equal"], ["<con>", "<con>", "equal"], ["Delta", "Delta", "equal"], ["=", "=", "equal"], ["Math", "Math", "equal"], [".", ".", "equal"], ["min", "min", "equal"], ["(", "(", "equal"], ["time", "time", "equal"], ["<con>", "<con>", "equal"], ["Delta", "Delta", "equal"], [",", ",", "equal"], ["Cells", "Cells", "equal"], [".", ".", "equal"], ["reconcile", "reconcile", "equal"], ["<con>", "<con>", "equal"], ["Complex", "Complex", "equal"], ["(", "(", "equal"], ["c", "column", "replace"], [",", ",", "equal"], ["existing", "existing", "equal"], ["<con>", "<con>", "equal"], ["Cells", "Cells", "equal"], [",", ",", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Cells", "Cells", "equal"], [",", ",", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["Dt", "Dt", "equal"], [",", ",", "equal"], ["builder", "builder", "equal"], [",", ",", "equal"], ["now", "now", "equal"], ["<con>", "<con>", "equal"], ["In", "In", "equal"], ["<con>", "<con>", "equal"], ["Sec", "Sec", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["", ";", "insert"], ["", "}", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "cura", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", ")", "insert"], ["", "nexta", "insert"], ["", "=", "insert"], ["", "a", "insert"], ["", ".", "insert"], ["", "has", "insert"], ["", "<con>", "insert"], ["", "Next", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "?", "insert"], ["", "a", "insert"], ["", ".", "insert"], ["", "next", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ":", "insert"], ["", "null", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "curb", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", ")", "insert"], ["", "nextb", "insert"], ["", "=", "insert"], ["", "b", "insert"], ["", ".", "insert"], ["", "has", "insert"], ["", "<con>", "insert"], ["", "Next", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "?", "insert"], ["", "b", "insert"], ["", ".", "insert"], ["", "next", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ":", "insert"], ["", "null", "insert"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["time", "time", "equal"], ["<con>", "<con>", "equal"], ["Delta", "Delta", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static String insertFromLeft(String str, int interval, String stringToInsert) { if(interval < 0)throw new IllegalArgumentException(\"interval value cannot be negative.\"); if(str == null || interval == 0 || interval >= str.length() || isNullOrEmpty(stringToInsert))return str; StringBuilder b = new StringBuilder(); int i = 0; for(char c : str.toCharArray()) { b.append(c); i ++ ; if(i % interval == 0 && i <= str.length() - 1)b.append(stringToInsert); } return b.toString(); } ", "focal_tgt": "public static String insertFromLeft(String str, int interval, String stringToInsert) { if(interval < 0) { throw new IllegalArgumentException(\"interval value cannot be negative.\"); } if(str == null || interval == 0 || interval >= str.length() || isNullOrEmpty(stringToInsert)) { return str; } StringBuilder b = new StringBuilder(); int i = 0; for(char c : str.toCharArray()) { b.append(c); i ++ ; if(i % interval == 0 && i <= str.length() - 1) { b.append(stringToInsert); } } return b.toString(); } ", "test_src": "@Test public void insertFromLeftTest() { final String s = \"0123456789\"; assertEquals(insertFromLeft(s, 0, \"-\"), \"0123456789\"); assertEquals(insertFromLeft(s, 1, \"-\"), \"0-1-2-3-4-5-6-7-8-9\"); assertEquals(insertFromLeft(\"ahmet\", 1, \" \"), \"a h m e t\"); assertEquals(insertFromLeft(s, 2, \"-\"), \"01-23-45-67-89\"); assertEquals(insertFromLeft(s, 3, \"-\"), \"012-345-678-9\"); assertEquals(insertFromLeft(s, 5, \"-\"), \"01234-56789\"); assertEquals(insertFromLeft(s, 6, \"-\"), \"012345-6789\"); assertEquals(insertFromLeft(s, 9, \"-\"), \"012345678-9\"); assertEquals(insertFromLeft(s, 10, \"-\"), \"0123456789\"); assertEquals(insertFromLeft(s, 12, \"-\"), \"0123456789\"); assertEquals(insertFromLeft(s, 2, \"--\"), \"01--23--45--67--89\"); } ", "label": 0, "focal_db": [79106, "ahmetaa/zemberek-nlp", "/data/comment_repos/ahmetaa@zemberek-nlp", "d2c533ba38334e5eb768d45a1b1d87263bc2238a", "9cf352fd421d09b585b1180c737e0277acd70a7e", "core/src/main/java/zemberek/core/io/Strings.java", "e999977ea640cd52a0f050de584e67bc2ab1d78f", "core/src/main/java/zemberek/core/io/Strings.java", "public static String insertFromLeft(String str, int interval, String stringToInsert) {\n        if (interval < 0)\n            throw new IllegalArgumentException(\"interval value cannot be negative.\");\n        if (str == null || interval == 0 || interval >= str.length() || isNullOrEmpty(stringToInsert))\n            return str;\n        StringBuilder b = new StringBuilder();\n        int i = 0;\n        for (char c : str.toCharArray()) {\n            b.append(c);\n            i++;\n            if (i % interval == 0 && i <= str.length() - 1)\n                b.append(stringToInsert);\n        }\n        return b.toString();\n    }", "/**\n * inserts the <code>stringToInsert</code> with given <code>interval</code> starting from left.\n * </p>\n * <pre>(\"0123456\", 2, \"-\") returns \"01-23-45-6\"</pre>\n *\n * @param str            input string\n * @param interval       : interval amount\n * @param stringToInsert : character to insert.\n * @return the formatted string. null, if <code>str</code> is null\n * @throws IllegalArgumentException if <code>interval</code> is negative\n */\n", "public static String insertFromLeft(String str, int interval, String stringToInsert) {\n    if (interval < 0) {\n      throw new IllegalArgumentException(\"interval value cannot be negative.\");\n    }\n    if (str == null || interval == 0 || interval >= str.length() || isNullOrEmpty(stringToInsert)) {\n      return str;\n    }\n    StringBuilder b = new StringBuilder();\n    int i = 0;\n    for (char c : str.toCharArray()) {\n      b.append(c);\n      i++;\n      if (i % interval == 0 && i <= str.length() - 1) {\n        b.append(stringToInsert);\n      }\n    }\n    return b.toString();\n  }", "/**\n * inserts the <code>stringToInsert</code> with given <code>interval</code> starting from left.\n * </p>\n * <pre>(\"0123456\", 2, \"-\") returns \"01-23-45-6\"</pre>\n *\n * @param str input string\n * @param interval : interval amount\n * @param stringToInsert : character to insert.\n * @return the formatted string. null, if <code>str</code> is null\n * @throws IllegalArgumentException if <code>interval</code> is negative\n */\n"], "test_db": ["d2c533ba38334e5eb768d45a1b1d87263bc2238a", "ahmetaa/zemberek-nlp", "/data/comment_repos/ahmetaa@zemberek-nlp", "insertFromLeft", "/data/comment_repos/ahmetaa@zemberek-nlp/core/src/test/java/zemberek/core/io/StringsTest.java", "insertFromLeftTest", "  @Test\n  public void insertFromLeftTest() {\n    final String s = \"0123456789\";\n    assertEquals(insertFromLeft(s, 0, \"-\"), \"0123456789\");\n    assertEquals(insertFromLeft(s, 1, \"-\"), \"0-1-2-3-4-5-6-7-8-9\");\n    assertEquals(insertFromLeft(\"ahmet\", 1, \" \"), \"a h m e t\");\n    assertEquals(insertFromLeft(s, 2, \"-\"), \"01-23-45-67-89\");\n    assertEquals(insertFromLeft(s, 3, \"-\"), \"012-345-678-9\");\n    assertEquals(insertFromLeft(s, 5, \"-\"), \"01234-56789\");\n    assertEquals(insertFromLeft(s, 6, \"-\"), \"012345-6789\");\n    assertEquals(insertFromLeft(s, 9, \"-\"), \"012345678-9\");\n    assertEquals(insertFromLeft(s, 10, \"-\"), \"0123456789\");\n    assertEquals(insertFromLeft(s, 12, \"-\"), \"0123456789\");\n    assertEquals(insertFromLeft(s, 2, \"--\"), \"01--23--45--67--89\");\n  }", "public static String insertFromLeft(String str, int interval, String stringToInsert) {\n        if (interval < 0)\n            throw new IllegalArgumentException(\"interval value cannot be negative.\");\n        if (str == null || interval == 0 || interval >= str.length() || isNullOrEmpty(stringToInsert))\n            return str;\n        StringBuilder b = new StringBuilder();\n        int i = 0;\n        for (char c : str.toCharArray()) {\n            b.append(c);\n            i++;\n            if (i % interval == 0 && i <= str.length() - 1)\n                b.append(stringToInsert);\n        }\n        return b.toString();\n    }", "core/src/main/java/zemberek/core/io/Strings.java", "public static String insertFromLeft(String str, int interval, String stringToInsert) {\n    if (interval < 0) {\n      throw new IllegalArgumentException(\"interval value cannot be negative.\");\n    }\n    if (str == null || interval == 0 || interval >= str.length() || isNullOrEmpty(stringToInsert)) {\n      return str;\n    }\n    StringBuilder b = new StringBuilder();\n    int i = 0;\n    for (char c : str.toCharArray()) {\n      b.append(c);\n      i++;\n      if (i % interval == 0 && i <= str.length() - 1) {\n        b.append(stringToInsert);\n      }\n    }\n    return b.toString();\n  }", "core/src/main/java/zemberek/core/io/Strings.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["String", "String", "equal"], ["insert", "insert", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Left", "Left", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["str", "str", "equal"], [",", ",", "equal"], ["int", "int", "equal"], ["interval", "interval", "equal"], [",", ",", "equal"], ["String", "String", "equal"], ["string", "string", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Insert", "Insert", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["interval", "interval", "equal"], ["<", "<", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["", "{", "insert"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["Argument", "Argument", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["interval", "interval", "equal"], ["value", "value", "equal"], ["can", "can", "equal"], ["<con>", "<con>", "equal"], ["not", "not", "equal"], ["be", "be", "equal"], ["negative", "negative", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["", "}", "insert"], ["if", "if", "equal"], ["(", "(", "equal"], ["str", "str", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], ["||", "||", "equal"], ["interval", "interval", "equal"], ["==", "==", "equal"], ["0", "0", "equal"], ["||", "||", "equal"], ["interval", "interval", "equal"], [">=", ">=", "equal"], ["str", "str", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["<con>", "<con>", "equal"], ["Or", "Or", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["(", "(", "equal"], ["string", "string", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Insert", "Insert", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["", "{", "insert"], ["return", "return", "equal"], ["str", "str", "equal"], [";", ";", "equal"], ["", "}", "insert"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["b", "b", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["int", "int", "equal"], ["i", "i", "equal"], ["=", "=", "equal"], ["0", "0", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["char", "char", "equal"], ["c", "c", "equal"], [":", ":", "equal"], ["str", "str", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Char", "Char", "equal"], ["<con>", "<con>", "equal"], ["Array", "Array", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["b", "b", "equal"], [".", ".", "equal"], ["append", "append", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["++", "++", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["i", "i", "equal"], ["%", "%", "equal"], ["interval", "interval", "equal"], ["==", "==", "equal"], ["0", "0", "equal"], ["&&", "&&", "equal"], ["i", "i", "equal"], ["<=", "<=", "equal"], ["str", "str", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["", "{", "insert"], ["b", "b", "equal"], [".", ".", "equal"], ["append", "append", "equal"], ["(", "(", "equal"], ["string", "string", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Insert", "Insert", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["", "}", "insert"], ["}", "}", "equal"], ["return", "return", "equal"], ["b", "b", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["String", "String", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public Object toObject() { if(this.size() < 1)return null; if(this.size() == 1)return this.get(0).toObject(); return this.toArray(); } ", "focal_tgt": "public Object toObject() { if(isSingleResult())return resultObject; if(this.size() == 1)return this.get(0).toObject(); throw new LogicException(\"This result represents more than one result, you cannot call toObject on multiple results\"); } ", "test_src": "@Test public void toObject_shouldReturnResultObjectForSingleResults() { Result firstResult = new Result(new Date(), \"some value\", new Encounter(123)); Assert.assertEquals(123, ((Encounter)firstResult.toObject()).getId().intValue()); } ", "label": 0, "focal_db": [3017007, "openmrs/openmrs-core", "/data/comment_repos/openmrs@openmrs-core", "e4d2b2e1fbef8626fc1b761f57638b99f9d989c3", "43342fbdce583f3248174a94a27ccccee2bc4514", "src/api/org/openmrs/logic/result/Result.java", "065f373e9b10d1c679e38cef4a4e100abd611400", "src/api/org/openmrs/logic/result/Result.java", "public Object toObject() {\r\n\t\tif (this.size() < 1)\r\n\t\t\treturn null;\r\n\t\tif (this.size() == 1)\r\n\t\t\treturn this.get(0).toObject();\r\n\t\treturn this.toArray();\r\n\t}", "/**\n * @return the object associated with the result (generally, this is used internally or for\n *         advanced rule design)\n */\n", "public Object toObject() {\r\n\t\tif (isSingleResult())\r\n\t\t\treturn resultObject;\r\n\t\tif (this.size() == 1)\r\n\t\t\treturn this.get(0).toObject();\r\n\t\tthrow new LogicException(\"This result represents more than one result, you cannot call toObject on multiple results\");\r\n\t}", "/**\n * @return the object associated with the result (generally, this is used internally or for\n *         advanced rule design)\n * @should return resultObject for single results\n * @should return all results for result list\n */\n"], "test_db": ["810f76ec5b9b2a886672d198adb75aa3e2c8ff3b", "openmrs/openmrs-core", "/data/comment_repos/openmrs@openmrs-core", "toObject", "/data/comment_repos/openmrs@openmrs-core/api/src/test/java/org/openmrs/logic/result/ResultTest.java", "toObject_shouldReturnResultObjectForSingleResults", "\t@Test\n\tpublic void toObject_shouldReturnResultObjectForSingleResults() {\n\t\tResult firstResult = new Result(new Date(), \"some value\", new Encounter(123));\n\t\t\n\t\tAssert.assertEquals(123, ((Encounter) firstResult.toObject()).getId().intValue());\n\t}", "public Object toObject() {\r\n\t\tif (this.size() < 1)\r\n\t\t\treturn null;\r\n\t\tif (this.size() == 1)\r\n\t\t\treturn this.get(0).toObject();\r\n\t\treturn this.toArray();\r\n\t}", "src/api/org/openmrs/logic/result/Result.java", "public Object toObject() {\r\n\t\tif (isSingleResult())\r\n\t\t\treturn resultObject;\r\n\t\tif (this.size() == 1)\r\n\t\t\treturn this.get(0).toObject();\r\n\t\tthrow new LogicException(\"This result represents more than one result, you cannot call toObject on multiple results\");\r\n\t}", "src/api/org/openmrs/logic/result/Result.java"], "edit_seq": [["public", "public", "equal"], ["Object", "Object", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Object", "Object", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["this", "is", "replace"], ["", "<con>", "insert"], ["", "Single", "insert"], ["", "<con>", "insert"], ["", "Result", "insert"], [".", "", "delete"], ["size", "", "delete"], ["(", "(", "equal"], [")", ")", "equal"], ["<", "", "delete"], ["1", "", "delete"], [")", ")", "equal"], ["return", "return", "equal"], ["null", "result", "replace"], ["", "<con>", "insert"], ["", "Object", "insert"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["size", "size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["==", "==", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["return", "return", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["0", "0", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Object", "Object", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "throw", "replace"], ["this", "new", "replace"], [".", "Logic", "replace"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["to", "", "delete"], ["<con>", "", "delete"], ["Array", "", "delete"], ["(", "(", "equal"], ["", "\"", "insert"], ["", "This", "insert"], ["", "result", "insert"], ["", "represents", "insert"], ["", "more", "insert"], ["", "than", "insert"], ["", "one", "insert"], ["", "result", "insert"], ["", "<con>", "insert"], ["", ",", "insert"], ["", "you", "insert"], ["", "can", "insert"], ["", "<con>", "insert"], ["", "not", "insert"], ["", "call", "insert"], ["", "to", "insert"], ["", "<con>", "insert"], ["", "Object", "insert"], ["", "on", "insert"], ["", "multiple", "insert"], ["", "results", "insert"], ["", "\"", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static < K > long getLongValue(final Map < ? super K, ? > map, final K key) { final Long longObject = getLong(map, key); if(longObject == null) { return 0L; } return longObject.longValue(); } ", "focal_tgt": "public static < K > long getLongValue(final Map < ? super K, ? > map, final K key) { return applyDefaultValue(map, key, MapUtils :: getLong, 0L).longValue(); } ", "test_src": "@Test public void testgetLongValue() { final Map < String, Long > in = new HashMap < > (); in.put(\"key\", 2L); assertEquals(2.0, MapUtils.getLongValue(in, \"key\", 0L), 0); assertEquals(2.0, MapUtils.getLongValue(in, \"key\"), 0); assertEquals(1, MapUtils.getLongValue(in, \"noKey\", 1L), 0); assertEquals(1, MapUtils.getLongValue(in, \"noKey\", (key) -> { return 1L; }), 0); assertEquals(0, MapUtils.getLongValue(in, \"noKey\"), 0); assertEquals(2.0, MapUtils.getLong(in, \"key\", 0L), 0); assertEquals(1, MapUtils.getLong(in, \"noKey\", 1L), 0); assertEquals(1, MapUtils.getLong(in, \"noKey\", (key) -> { return 1L; }), 0); final Map < String, String > inStr = new HashMap < > (); inStr.put(\"str1\", \"2\"); assertEquals(MapUtils.getLongValue(inStr, \"str1\", 0L), 2, 0); assertEquals(MapUtils.getLong(inStr, \"str1\", 1L), 2, 0); } ", "label": 0, "focal_db": [557616, "apache/commons-collections", "/data/comment_repos/apache@commons-collections", "b1511c79aa749a245b48f5bf18c22e9c203882f0", "08727a0b6555acf1a09f77b1920153e66f668981", "src/main/java/org/apache/commons/collections4/MapUtils.java", "c5a151685c6b10cfc9913170af0ed168ed799c37", "src/main/java/org/apache/commons/collections4/MapUtils.java", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key) {\n        final Long longObject = getLong(map, key);\n        if (longObject == null) {\n            return 0L;\n        }\n        return longObject.longValue();\n    }", "/**\n * Gets a long from a Map in a null-safe manner.\n * <p>\n * The long is obtained from the results of {@link #getNumber(Map,Object)}.\n *\n * @param <K>  the key type\n * @param map  the map to use\n * @param key  the key to look up\n * @return the value in the Map as a long, <code>0L</code> if null map input\n */\n", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key) {\n        return applyDefaultValue(map, key, MapUtils::getLong, 0L).longValue();\n    }", "/**\n * Gets a long from a Map in a null-safe manner.\n * <p>\n * The long is obtained from the results of {@link #getNumber(Map,Object)}.\n * </p>\n *\n * @param <K> the key type\n * @param map the map to use\n * @param key the key to look up\n * @return the value in the Map as a long, <code>0L</code> if null map input\n */\n"], "test_db": ["884baf0ddc6b869d9d4340b6fc9b1ff4d018e7c2", "apache/commons-collections", "/data/comment_repos/apache@commons-collections", "getLongValue", "/data/comment_repos/apache@commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "testgetLongValue", "    @Test\n    public void testgetLongValue() {\n        final Map<String, Long> in = new HashMap<>();\n        in.put(\"key\", 2L);\n\n        assertEquals(2.0, MapUtils.getLongValue(in,\"key\", 0L), 0);\n        assertEquals(2.0, MapUtils.getLongValue(in,\"key\"), 0);\n        assertEquals(1, MapUtils.getLongValue(in,\"noKey\", 1L), 0);\n        assertEquals(1, MapUtils.getLongValue(in,\"noKey\", (key)->{\n            return 1L;\n        }), 0);\n        assertEquals(0, MapUtils.getLongValue(in,\"noKey\"), 0);\n        assertEquals(2.0, MapUtils.getLong(in,\"key\", 0L), 0);\n        assertEquals(1, MapUtils.getLong(in,\"noKey\", 1L), 0);\n        assertEquals(1, MapUtils.getLong(in,\"noKey\", (key)->{\n            return 1L;\n        }), 0);\n\n        final Map<String, String> inStr = new HashMap<>();\n        inStr.put(\"str1\", \"2\");\n\n        assertEquals(MapUtils.getLongValue(inStr,\"str1\", 0L), 2, 0);\n        assertEquals(MapUtils.getLong(inStr, \"str1\", 1L), 2, 0);\n\n    }", "public static long getLongValue(final Map map, final Object key, long defaultValue) {\n        Long longObject = getLong(map, key);\n        if (longObject == null) {\n            return defaultValue;\n        }\n        return longObject.longValue();\n    }", "src/java/org/apache/commons/collections/MapUtils.java", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, long defaultValue) {\n        Long longObject = getLong(map, key);\n        if (longObject == null) {\n            return defaultValue;\n        }\n        return longObject.longValue();\n    }", "src/java/org/apache/commons/collections/MapUtils.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["<", "<", "equal"], ["K", "K", "equal"], [">", ">", "equal"], ["long", "long", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["Map", "Map", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], ["super", "super", "equal"], ["K", "K", "equal"], [",", ",", "equal"], ["?", "?", "equal"], [">", ">", "equal"], ["map", "map", "equal"], [",", ",", "equal"], ["final", "final", "equal"], ["K", "K", "equal"], ["key", "key", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "return", "replace"], ["Long", "apply", "replace"], ["", "<con>", "insert"], ["", "Default", "insert"], ["", "<con>", "insert"], ["", "Value", "insert"], ["long", "", "delete"], ["<con>", "", "delete"], ["Object", "", "delete"], ["=", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Long", "", "delete"], ["(", "(", "equal"], ["map", "map", "equal"], [",", ",", "equal"], ["key", "key", "equal"], ["", ",", "insert"], ["", "Map", "insert"], ["", "<con>", "insert"], ["", "Utils", "insert"], ["", "::", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Long", "insert"], ["", ",", "insert"], ["", "0L", "insert"], [")", ")", "equal"], [";", "", "delete"], ["if", "", "delete"], ["(", "", "delete"], ["long", "", "delete"], ["<con>", "", "delete"], ["Object", "", "delete"], ["==", "", "delete"], ["null", "", "delete"], [")", "", "delete"], ["{", "", "delete"], ["return", "", "delete"], ["0L", "", "delete"], [";", "", "delete"], ["}", "", "delete"], ["return", "", "delete"], ["long", "", "delete"], ["<con>", "", "delete"], ["Object", "", "delete"], [".", ".", "equal"], ["long", "long", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public void validatePersonName(PersonName personName, Errors errors, boolean arrayInd, boolean testInd) { if(personName == null)errors.reject(\"error.name\"); if(StringUtils.isBlank(personName.getGivenName()) || StringUtils.isBlank(personName.getGivenName().replaceAll(\"\\\"\", \"\")))errors.rejectValue(getFieldKey(\"givenName\", arrayInd, testInd), \"Patient.names.required.given.family\"); if(StringUtils.isBlank(personName.getFamilyName()) || StringUtils.isBlank(personName.getFamilyName().replaceAll(\"\\\"\", \"\")))errors.rejectValue(getFieldKey(\"familyName\", arrayInd, testInd), \"Patient.names.required.given.family\"); String namePattern = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_NAME_REGEX); if(StringUtils.isNotBlank(namePattern)) { if(StringUtils.isNotBlank(personName.getGivenName()) && ! personName.getGivenName().matches(namePattern))errors.rejectValue(getFieldKey(\"givenName\", arrayInd, testInd), \"GivenName.invalid\"); if(StringUtils.isNotBlank(personName.getMiddleName()) && ! personName.getMiddleName().matches(namePattern))errors.rejectValue(getFieldKey(\"middleName\", arrayInd, testInd), \"MiddleName.invalid\"); if(StringUtils.isNotBlank(personName.getFamilyName()) && ! personName.getFamilyName().matches(namePattern))errors.rejectValue(getFieldKey(\"familyName\", arrayInd, testInd), \"FamilyName.invalid\"); if(StringUtils.isNotBlank(personName.getFamilyName2()) && ! personName.getFamilyName2().matches(namePattern))errors.rejectValue(getFieldKey(\"familyName2\", arrayInd, testInd), \"FamilyName2.invalid\"); } if(StringUtils.length(personName.getPrefix()) > 50)rejectPersonNameOnLength(errors, \"prefix\", arrayInd, testInd); if(StringUtils.length(personName.getGivenName()) > 50)rejectPersonNameOnLength(errors, \"givenName\", arrayInd, testInd); if(StringUtils.length(personName.getMiddleName()) > 50)rejectPersonNameOnLength(errors, \"middleName\", arrayInd, testInd); if(StringUtils.length(personName.getFamilyNamePrefix()) > 50)rejectPersonNameOnLength(errors, \"familyNamePrefix\", arrayInd, testInd); if(StringUtils.length(personName.getFamilyName()) > 50)rejectPersonNameOnLength(errors, \"familyName\", arrayInd, testInd); if(StringUtils.length(personName.getFamilyName2()) > 50)rejectPersonNameOnLength(errors, \"familyName2\", arrayInd, testInd); if(StringUtils.length(personName.getFamilyNameSuffix()) > 50)rejectPersonNameOnLength(errors, \"familyNameSuffix\", arrayInd, testInd); if(StringUtils.length(personName.getDegree()) > 50)rejectPersonNameOnLength(errors, \"degree\", arrayInd, testInd); } ", "focal_tgt": "public void validatePersonName(PersonName personName, Errors errors, boolean arrayInd, boolean testInd) { if(personName == null) { errors.reject(\"error.name\"); return; } if(StringUtils.isBlank(personName.getGivenName()) || StringUtils.isBlank(personName.getGivenName().replaceAll(\"\\\"\", \"\")))errors.rejectValue(getFieldKey(\"givenName\", arrayInd, testInd), \"Patient.names.required.given.family\"); if(StringUtils.isBlank(personName.getFamilyName()) || StringUtils.isBlank(personName.getFamilyName().replaceAll(\"\\\"\", \"\")))errors.rejectValue(getFieldKey(\"familyName\", arrayInd, testInd), \"Patient.names.required.given.family\"); String namePattern = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_NAME_REGEX); if(StringUtils.isNotBlank(namePattern)) { if(StringUtils.isNotBlank(personName.getGivenName()) && ! personName.getGivenName().matches(namePattern))errors.rejectValue(getFieldKey(\"givenName\", arrayInd, testInd), \"GivenName.invalid\"); if(StringUtils.isNotBlank(personName.getMiddleName()) && ! personName.getMiddleName().matches(namePattern))errors.rejectValue(getFieldKey(\"middleName\", arrayInd, testInd), \"MiddleName.invalid\"); if(StringUtils.isNotBlank(personName.getFamilyName()) && ! personName.getFamilyName().matches(namePattern))errors.rejectValue(getFieldKey(\"familyName\", arrayInd, testInd), \"FamilyName.invalid\"); if(StringUtils.isNotBlank(personName.getFamilyName2()) && ! personName.getFamilyName2().matches(namePattern))errors.rejectValue(getFieldKey(\"familyName2\", arrayInd, testInd), \"FamilyName2.invalid\"); } if(StringUtils.length(personName.getPrefix()) > 50)rejectPersonNameOnLength(errors, \"prefix\", arrayInd, testInd); if(StringUtils.length(personName.getGivenName()) > 50)rejectPersonNameOnLength(errors, \"givenName\", arrayInd, testInd); if(StringUtils.length(personName.getMiddleName()) > 50)rejectPersonNameOnLength(errors, \"middleName\", arrayInd, testInd); if(StringUtils.length(personName.getFamilyNamePrefix()) > 50)rejectPersonNameOnLength(errors, \"familyNamePrefix\", arrayInd, testInd); if(StringUtils.length(personName.getFamilyName()) > 50)rejectPersonNameOnLength(errors, \"familyName\", arrayInd, testInd); if(StringUtils.length(personName.getFamilyName2()) > 50)rejectPersonNameOnLength(errors, \"familyName2\", arrayInd, testInd); if(StringUtils.length(personName.getFamilyNameSuffix()) > 50)rejectPersonNameOnLength(errors, \"familyNameSuffix\", arrayInd, testInd); if(StringUtils.length(personName.getDegree()) > 50)rejectPersonNameOnLength(errors, \"degree\", arrayInd, testInd); } ", "test_src": "@Test public void validatePersonName_shouldNotValidateAgainstRegexForBlankNames() { personName.setGivenName(\"given\"); personName.setFamilyName(\"family\"); personName.setMiddleName(\"\"); personName.setFamilyName2(\"\"); validator.validatePersonName(personName, errors, false, true); Assert.assertFalse(errors.hasErrors()); } ", "label": 0, "focal_db": [2994911, "openmrs/openmrs-core", "/data/comment_repos/openmrs@openmrs-core", "a50d75a218509b761d2b279520f048ab7a7d253f", "f64f78255679c45dbef8b37466728f86805a0ce9", "api/src/main/java/org/openmrs/validator/PersonNameValidator.java", "603dfe4d930bdd14b9737237a87c68029cc3c935", "api/src/main/java/org/openmrs/validator/PersonNameValidator.java", "public void validatePersonName(PersonName personName, Errors errors, boolean arrayInd, boolean testInd) {\r\n\t\t\r\n\t\tif (personName == null)\r\n\t\t\terrors.reject(\"error.name\");\r\n\t\t// Make sure they assign a name\r\n\t\tif (StringUtils.isBlank(personName.getGivenName())\r\n\t\t        || StringUtils.isBlank(personName.getGivenName().replaceAll(\"\\\"\", \"\")))\r\n\t\t\terrors.rejectValue(getFieldKey(\"givenName\", arrayInd, testInd), \"Patient.names.required.given.family\");\r\n\t\tif (StringUtils.isBlank(personName.getFamilyName())\r\n\t\t        || StringUtils.isBlank(personName.getFamilyName().replaceAll(\"\\\"\", \"\")))\r\n\t\t\terrors.rejectValue(getFieldKey(\"familyName\", arrayInd, testInd), \"Patient.names.required.given.family\");\r\n\t\t// Make sure the entered name value is sensible \r\n\t\tString namePattern = Context.getAdministrationService().getGlobalProperty(\r\n\t\t    OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_NAME_REGEX);\r\n\t\tif (StringUtils.isNotBlank(namePattern)) {\r\n\t\t\tif (StringUtils.isNotBlank(personName.getGivenName()) && !personName.getGivenName().matches(namePattern))\r\n\t\t\t\terrors.rejectValue(getFieldKey(\"givenName\", arrayInd, testInd), \"GivenName.invalid\");\r\n\t\t\tif (StringUtils.isNotBlank(personName.getMiddleName()) && !personName.getMiddleName().matches(namePattern))\r\n\t\t\t\terrors.rejectValue(getFieldKey(\"middleName\", arrayInd, testInd), \"MiddleName.invalid\");\r\n\t\t\tif (StringUtils.isNotBlank(personName.getFamilyName()) && !personName.getFamilyName().matches(namePattern))\r\n\t\t\t\terrors.rejectValue(getFieldKey(\"familyName\", arrayInd, testInd), \"FamilyName.invalid\");\r\n\t\t\tif (StringUtils.isNotBlank(personName.getFamilyName2()) && !personName.getFamilyName2().matches(namePattern))\r\n\t\t\t\terrors.rejectValue(getFieldKey(\"familyName2\", arrayInd, testInd), \"FamilyName2.invalid\");\r\n\t\t}\r\n\t\t// Make sure the length does not exceed database column size\r\n\t\tif (StringUtils.length(personName.getPrefix()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"prefix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getGivenName()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"givenName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getMiddleName()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"middleName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyNamePrefix()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"familyNamePrefix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyName()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"familyName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyName2()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"familyName2\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyNameSuffix()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"familyNameSuffix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getDegree()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"degree\", arrayInd, testInd);\r\n\t}", "/**\n * Checks that the given {@link PersonName} is valid\n *\n * @param personName the {@link PersonName} to validate\n * @param errors\n * @param arrayInd indicates whether or not a names[0] array needs to be prepended to field\n * @should fail validation if PersonName object is null\n * @should fail validation if PersonName.givenName is null\n * @should fail validation if PersonName.givenName is empty\n * @should fail validation if PersonName.givenName is just spaces\n * @should fail validation if PersonName.givenName is spaces surrounded by quotation marks\n * @should pass validation if PersonName.givenName is not blank\n * @should fail validation if PersonName.familyName is null\n * @should fail validation if PersonName.familyName is empty\n * @should fail validation if PersonName.familyName is just spaces\n * @should fail validation if PersonName.familyName is spaces surrounded by quotation marks\n * @should pass validation if PersonName.familyName is not blank\n * @should fail validation if PersonName.prefix is too long\n * @should pass validation if PersonName.prefix is exactly max length\n * @should pass validation if PersonName.prefix is less than maximum field length\n * @should fail validation if PersonName.givenName is too long\n * @should pass validation if PersonName.givenName is exactly max length\n * @should pass validation if PersonName.givenName is less than maximum field length\n * @should fail validation if PersonName.middleName is too long\n * @should pass validation if PersonName.middleName is exactly max length\n * @should pass validation if PersonName.middleName is less than maximum field length\n * @should fail validation if PersonName.familyNamePrefix is too long\n * @should pass validation if PersonName.familyNamePrefix is exactly max length\n * @should pass validation if PersonName.familyNamePrefix is less than maximum field length\n * @should fail validation if PersonName.familyName is too long\n * @should pass validation if PersonName.familyName is exactly max length\n * @should pass validation if PersonName.familyName is less than maximum field length\n * @should fail validation if PersonName.familyName2 is too long\n * @should pass validation if PersonName.familyName2 is exactly max length\n * @should pass validation if PersonName.familyName2 is less than maximum field length\n * @should fail validation if PersonName.familyNameSuffix is too long\n * @should pass validation if PersonName.familyNameSuffix is exactly max length\n * @should pass validation if PersonName.familyNameSuffix is less than maximum field length\n * @should fail validation if PersonName.degree is too long\n * @should pass validation if PersonName.degree is exactly max length\n * @should pass validation if PersonName.degree is less than maximum field length\n * @should fail validation if PersonName.givenName is invalid\n * @should pass validation if PersonName.givenName is valid\n * @should fail validation if PersonName.middleName is invalid\n * @should pass validation if PersonName.middleName is valid\n * @should fail validation if PersonName.familyName is invalid\n * @should pass validation if PersonName.familyName is valid\n * @should fail validation if PersonName.familyName2 is invalid\n * @should pass validation if PersonName.familyName2 is valid\n * @should pass validation if regex string is null\n * @should pass validation if regex string is empty\n * @should not validate against regex for blank names\n */\n", "public void validatePersonName(PersonName personName, Errors errors, boolean arrayInd, boolean testInd) {\r\n\t\t\r\n\t\tif (personName == null) {\r\n\t\t\terrors.reject(\"error.name\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Make sure they assign a name\r\n\t\tif (StringUtils.isBlank(personName.getGivenName())\r\n\t\t        || StringUtils.isBlank(personName.getGivenName().replaceAll(\"\\\"\", \"\")))\r\n\t\t\terrors.rejectValue(getFieldKey(\"givenName\", arrayInd, testInd), \"Patient.names.required.given.family\");\r\n\t\tif (StringUtils.isBlank(personName.getFamilyName())\r\n\t\t        || StringUtils.isBlank(personName.getFamilyName().replaceAll(\"\\\"\", \"\")))\r\n\t\t\terrors.rejectValue(getFieldKey(\"familyName\", arrayInd, testInd), \"Patient.names.required.given.family\");\r\n\t\t// Make sure the entered name value is sensible \r\n\t\tString namePattern = Context.getAdministrationService().getGlobalProperty(\r\n\t\t    OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_NAME_REGEX);\r\n\t\tif (StringUtils.isNotBlank(namePattern)) {\r\n\t\t\tif (StringUtils.isNotBlank(personName.getGivenName()) && !personName.getGivenName().matches(namePattern))\r\n\t\t\t\terrors.rejectValue(getFieldKey(\"givenName\", arrayInd, testInd), \"GivenName.invalid\");\r\n\t\t\tif (StringUtils.isNotBlank(personName.getMiddleName()) && !personName.getMiddleName().matches(namePattern))\r\n\t\t\t\terrors.rejectValue(getFieldKey(\"middleName\", arrayInd, testInd), \"MiddleName.invalid\");\r\n\t\t\tif (StringUtils.isNotBlank(personName.getFamilyName()) && !personName.getFamilyName().matches(namePattern))\r\n\t\t\t\terrors.rejectValue(getFieldKey(\"familyName\", arrayInd, testInd), \"FamilyName.invalid\");\r\n\t\t\tif (StringUtils.isNotBlank(personName.getFamilyName2()) && !personName.getFamilyName2().matches(namePattern))\r\n\t\t\t\terrors.rejectValue(getFieldKey(\"familyName2\", arrayInd, testInd), \"FamilyName2.invalid\");\r\n\t\t}\r\n\t\t// Make sure the length does not exceed database column size\r\n\t\tif (StringUtils.length(personName.getPrefix()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"prefix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getGivenName()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"givenName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getMiddleName()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"middleName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyNamePrefix()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"familyNamePrefix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyName()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"familyName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyName2()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"familyName2\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyNameSuffix()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"familyNameSuffix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getDegree()) > 50)\r\n\t\t\trejectPersonNameOnLength(errors, \"degree\", arrayInd, testInd);\r\n\t}", "/**\n * Checks that the given {@link PersonName} is valid\n *\n * @param personName the {@link PersonName} to validate\n * @param errors\n * @param arrayInd indicates whether or not a names[0] array needs to be prepended to field\n * @should fail validation if PersonName object is null\n * @should fail validation if PersonName.givenName is null\n * @should fail validation if PersonName.givenName is empty\n * @should fail validation if PersonName.givenName is just spaces\n * @should fail validation if PersonName.givenName is spaces surrounded by quotation marks\n * @should pass validation if PersonName.givenName is not blank\n * @should fail validation if PersonName.familyName is null\n * @should fail validation if PersonName.familyName is empty\n * @should fail validation if PersonName.familyName is just spaces\n * @should fail validation if PersonName.familyName is spaces surrounded by quotation marks\n * @should pass validation if PersonName.familyName is not blank\n * @should fail validation if PersonName.prefix is too long\n * @should pass validation if PersonName.prefix is exactly max length\n * @should pass validation if PersonName.prefix is less than maximum field length\n * @should fail validation if PersonName.givenName is too long\n * @should pass validation if PersonName.givenName is exactly max length\n * @should pass validation if PersonName.givenName is less than maximum field length\n * @should fail validation if PersonName.middleName is too long\n * @should pass validation if PersonName.middleName is exactly max length\n * @should pass validation if PersonName.middleName is less than maximum field length\n * @should fail validation if PersonName.familyNamePrefix is too long\n * @should pass validation if PersonName.familyNamePrefix is exactly max length\n * @should pass validation if PersonName.familyNamePrefix is less than maximum field length\n * @should fail validation if PersonName.familyName is too long\n * @should pass validation if PersonName.familyName is exactly max length\n * @should pass validation if PersonName.familyName is less than maximum field length\n * @should fail validation if PersonName.familyName2 is too long\n * @should pass validation if PersonName.familyName2 is exactly max length\n * @should pass validation if PersonName.familyName2 is less than maximum field length\n * @should fail validation if PersonName.familyNameSuffix is too long\n * @should pass validation if PersonName.familyNameSuffix is exactly max length\n * @should pass validation if PersonName.familyNameSuffix is less than maximum field length\n * @should fail validation if PersonName.degree is too long\n * @should pass validation if PersonName.degree is exactly max length\n * @should pass validation if PersonName.degree is less than maximum field length\n * @should fail validation if PersonName.givenName is invalid\n * @should pass validation if PersonName.givenName is valid\n * @should fail validation if PersonName.middleName is invalid\n * @should pass validation if PersonName.middleName is valid\n * @should fail validation if PersonName.familyName is invalid\n * @should pass validation if PersonName.familyName is valid\n * @should fail validation if PersonName.familyName2 is invalid\n * @should pass validation if PersonName.familyName2 is valid\n * @should pass validation if regex string is null\n * @should pass validation if regex string is empty\n * @should not validate against regex for blank names\n */\n"], "test_db": ["3ea3c2b1ecdacd88c6b5c836210f3a93bd94ad1f", "openmrs/openmrs-core", "/data/comment_repos/openmrs@openmrs-core", "validatePersonName", "/data/comment_repos/openmrs@openmrs-core/api/src/test/java/org/openmrs/validator/PersonNameValidatorTest.java", "validatePersonName_shouldNotValidateAgainstRegexForBlankNames", "\t@Test\n\tpublic void validatePersonName_shouldNotValidateAgainstRegexForBlankNames() {\n\t\t\n\t\tpersonName.setGivenName(\"given\");\n\t\tpersonName.setFamilyName(\"family\");\n\t\tpersonName.setMiddleName(\"\");\n\t\tpersonName.setFamilyName2(\"\");\n\t\t\n\t\tvalidator.validatePersonName(personName, errors, false, true);\n\t\t\n\t\tAssert.assertFalse(errors.hasErrors());\n\t}", "public void validatePersonName(PersonName personName, Errors errors, boolean arrayInd, boolean testInd) {\r\n\r\n\t\t// Make sure they assign a name\r\n\t\tif (StringUtils.isBlank(personName.getGivenName()) || StringUtils.isBlank(personName.getGivenName().replaceAll(\"\\\"\", \"\"))) errors.rejectValue(getFieldKey(\"givenName\", arrayInd, testInd),\"Person.name.required\");\r\n\t\tif (StringUtils.isBlank(personName.getFamilyName()) || StringUtils.isBlank(personName.getFamilyName().replaceAll(\"\\\"\", \"\"))) errors.rejectValue(getFieldKey(\"familyName\", arrayInd, testInd),\"Person.name.required\");\r\n\r\n\t\t// Make sure the length does not exceed database column size\r\n\t\tif (StringUtils.length(personName.getPrefix()) > 50) rejectPersonName(errors, \"prefix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getGivenName()) > 50) rejectPersonName(errors, \"givenName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getMiddleName()) > 50) rejectPersonName(errors, \"middleName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyNamePrefix()) > 50) rejectPersonName(errors, \"familyNamePrefix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyName()) > 50) rejectPersonName(errors, \"familyName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyName2()) > 50) rejectPersonName(errors, \"familyName2\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyNameSuffix()) > 50) rejectPersonName(errors, \"familyNameSuffix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getDegree()) > 50) rejectPersonName(errors, \"degree\", arrayInd, testInd);\r\n\t\t\r\n\t}", "api/src/main/java/org/openmrs/validator/PersonNameValidator.java", "public void validatePersonName(PersonName personName, Errors errors, boolean arrayInd, boolean testInd) {\r\n\t\t\r\n\t\tif (personName == null) \r\n\t\t\terrors.reject(\"error.name\");\r\n\t\t// Make sure they assign a name\r\n\t\tif (StringUtils.isBlank(personName.getGivenName()) || StringUtils.isBlank(personName.getGivenName().replaceAll(\"\\\"\", \"\"))) \r\n\t\t\terrors.rejectValue(getFieldKey(\"givenName\", arrayInd, testInd),\"Patient.names.required.given.family\");\r\n\t\tif (StringUtils.isBlank(personName.getFamilyName()) || StringUtils.isBlank(personName.getFamilyName().replaceAll(\"\\\"\", \"\"))) \r\n\t\t\terrors.rejectValue(getFieldKey(\"familyName\", arrayInd, testInd),\"Patient.names.required.given.family\");\r\n\r\n\t\t// Make sure the length does not exceed database column size\r\n\t\tif (StringUtils.length(personName.getPrefix()) > 50) rejectPersonName(errors, \"prefix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getGivenName()) > 50) rejectPersonName(errors, \"givenName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getMiddleName()) > 50) rejectPersonName(errors, \"middleName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyNamePrefix()) > 50) rejectPersonName(errors, \"familyNamePrefix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyName()) > 50) rejectPersonName(errors, \"familyName\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyName2()) > 50) rejectPersonName(errors, \"familyName2\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getFamilyNameSuffix()) > 50) rejectPersonName(errors, \"familyNameSuffix\", arrayInd, testInd);\r\n\t\tif (StringUtils.length(personName.getDegree()) > 50) rejectPersonName(errors, \"degree\", arrayInd, testInd);\r\n\t\t\r\n\t}", "api/src/main/java/org/openmrs/validator/PersonNameValidator.java"], "edit_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["validate", "validate", "equal"], ["<con>", "<con>", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [",", ",", "equal"], ["Errors", "Errors", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["boolean", "boolean", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["boolean", "boolean", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["", "{", "insert"], ["errors", "errors", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["error", "error", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["name", "name", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["", "return", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Blank", "Blank", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Given", "Given", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Blank", "Blank", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Given", "Given", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["replace", "replace", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["\\", "\\", "equal"], ["<con>", "<con>", "equal"], ["``", "``", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["errors", "errors", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Field", "Field", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["given", "given", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["Patient", "Patient", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["names", "names", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["required", "required", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["given", "given", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["family", "family", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Blank", "Blank", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Blank", "Blank", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["replace", "replace", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["\\", "\\", "equal"], ["<con>", "<con>", "equal"], ["``", "``", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["errors", "errors", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Field", "Field", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["family", "family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["Patient", "Patient", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["names", "names", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["required", "required", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["given", "given", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["family", "family", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["String", "String", "equal"], ["name", "name", "equal"], ["<con>", "<con>", "equal"], ["Pattern", "Pattern", "equal"], ["=", "=", "equal"], ["Context", "Context", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Administration", "Administration", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Global", "Global", "equal"], ["<con>", "<con>", "equal"], ["Property", "Property", "equal"], ["(", "(", "equal"], ["Openmrs", "Openmrs", "equal"], ["<con>", "<con>", "equal"], ["Constants", "Constants", "equal"], [".", ".", "equal"], ["GLOBAL", "GLOBAL", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["PROPERTY", "PROPERTY", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["PATIENT", "PATIENT", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["NAME", "NAME", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["REGEX", "REGEX", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Blank", "Blank", "equal"], ["(", "(", "equal"], ["name", "name", "equal"], ["<con>", "<con>", "equal"], ["Pattern", "Pattern", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Blank", "Blank", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Given", "Given", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["&&", "&&", "equal"], ["!", "!", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Given", "Given", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["matches", "matches", "equal"], ["(", "(", "equal"], ["name", "name", "equal"], ["<con>", "<con>", "equal"], ["Pattern", "Pattern", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["errors", "errors", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Field", "Field", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["given", "given", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["Given", "Given", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["invalid", "invalid", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Blank", "Blank", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Middle", "Middle", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["&&", "&&", "equal"], ["!", "!", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Middle", "Middle", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["matches", "matches", "equal"], ["(", "(", "equal"], ["name", "name", "equal"], ["<con>", "<con>", "equal"], ["Pattern", "Pattern", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["errors", "errors", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Field", "Field", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["middle", "middle", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["Middle", "Middle", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["invalid", "invalid", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Blank", "Blank", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["&&", "&&", "equal"], ["!", "!", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["matches", "matches", "equal"], ["(", "(", "equal"], ["name", "name", "equal"], ["<con>", "<con>", "equal"], ["Pattern", "Pattern", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["errors", "errors", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Field", "Field", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["family", "family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["invalid", "invalid", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Blank", "Blank", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name2", "Name2", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["&&", "&&", "equal"], ["!", "!", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name2", "Name2", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["matches", "matches", "equal"], ["(", "(", "equal"], ["name", "name", "equal"], ["<con>", "<con>", "equal"], ["Pattern", "Pattern", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["errors", "errors", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Field", "Field", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["family", "family", "equal"], ["<con>", "<con>", "equal"], ["Name2", "Name2", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name2", "Name2", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["invalid", "invalid", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Prefix", "Prefix", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [">", ">", "equal"], ["50", "50", "equal"], [")", ")", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Length", "Length", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["prefix", "prefix", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Given", "Given", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [">", ">", "equal"], ["50", "50", "equal"], [")", ")", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Length", "Length", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["given", "given", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Middle", "Middle", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [">", ">", "equal"], ["50", "50", "equal"], [")", ")", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Length", "Length", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["middle", "middle", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["Prefix", "Prefix", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [">", ">", "equal"], ["50", "50", "equal"], [")", ")", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Length", "Length", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["family", "family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["Prefix", "Prefix", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [">", ">", "equal"], ["50", "50", "equal"], [")", ")", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Length", "Length", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["family", "family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name2", "Name2", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [">", ">", "equal"], ["50", "50", "equal"], [")", ")", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Length", "Length", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["family", "family", "equal"], ["<con>", "<con>", "equal"], ["Name2", "Name2", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Family", "Family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["Suffix", "Suffix", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [">", ">", "equal"], ["50", "50", "equal"], [")", ")", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Length", "Length", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["family", "family", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["Suffix", "Suffix", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Degree", "Degree", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [">", ">", "equal"], ["50", "50", "equal"], [")", ")", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Length", "Length", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["degree", "degree", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [",", ",", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Ind", "Ind", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static < T > MSeq < T > empty() { return(MSeq < T > )EMPTY; } ", "focal_tgt": "@SuppressWarnings(\"unchecked\")public static < T > MSeq < T > empty() { return(MSeq < T > )EMPTY; } ", "test_src": "@Test public void empty() { Assert.assertNotNull(MSeq.EMPTY); Assert.assertNotNull(MSeq.empty()); Assert.assertSame(MSeq.EMPTY, MSeq.empty()); Assert.assertEquals(MSeq.EMPTY.length(), 0); Assert.assertEquals(MSeq.empty().asList().size(), 0); } ", "label": 0, "focal_db": [2430222, "jenetics/jenetics", "/data/comment_repos/jenetics@jenetics", "71eaf94953bbfe6c5b68ee0ec045b1921f01648b", "545dd491b8f54c69f8ddd8739802a81b239d3227", "org.jenetics/src/main/java/org/jenetics/util/MSeq.java", "3993b087acf2f516bfe7e47001abdd6ac244508a", "org.jenetics/src/main/java/org/jenetics/util/MSeq.java", "public static <T> MSeq<T> empty() {\n\t\treturn (MSeq<T>)EMPTY;\n\t}", "/**\n * Return an empty {@code MSeq}.\n *\n * @param <T> the element type of the new {@code MSeq}.\n * @return an empty {@code MSeq}.\n */\n", "@SuppressWarnings(\"unchecked\")\n\tpublic static <T> MSeq<T> empty() {\n\t\treturn (MSeq<T>)EMPTY;\n\t}", "/**\n * Return an empty {@code MSeq}.\n *\n * @param <T> the element type of the new {@code MSeq}.\n * @return an empty {@code MSeq}.\n */\n"], "test_db": ["71eaf94953bbfe6c5b68ee0ec045b1921f01648b", "jenetics/jenetics", "/data/comment_repos/jenetics@jenetics", "empty", "/data/comment_repos/jenetics@jenetics/jenetics/src/test/java/io/jenetics/util/MSeqTest.java", "empty", "\t@Test\n\tpublic void empty() {\n\t\tAssert.assertNotNull(MSeq.EMPTY);\n\t\tAssert.assertNotNull(MSeq.empty());\n\t\tAssert.assertSame(MSeq.EMPTY, MSeq.empty());\n\t\tAssert.assertEquals(MSeq.EMPTY.length(), 0);\n\t\tAssert.assertEquals(MSeq.empty().asList().size(), 0);\n\t}", "public static <T> MSeq<T> empty() {\n\t\treturn (MSeq<T>)EMPTY;\n\t}", "org.jenetics/src/main/java/org/jenetics/util/MSeq.java", "@SuppressWarnings(\"unchecked\")\n\tpublic static <T> MSeq<T> empty() {\n\t\treturn (MSeq<T>)EMPTY;\n\t}", "org.jenetics/src/main/java/org/jenetics/util/MSeq.java"], "edit_seq": [["", "@", "insert"], ["", "Suppress", "insert"], ["", "<con>", "insert"], ["", "Warnings", "insert"], ["", "(", "insert"], ["", "\"", "insert"], ["", "unchecked", "insert"], ["", "\"", "insert"], ["", ")", "insert"], ["public", "public", "equal"], ["static", "static", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["M", "M", "equal"], ["<con>", "<con>", "equal"], ["Seq", "Seq", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["empty", "empty", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["(", "(", "equal"], ["M", "M", "equal"], ["<con>", "<con>", "equal"], ["Seq", "Seq", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], [")", ")", "equal"], ["EMPTY", "EMPTY", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public String convertColumnNameToPropertyName(String columnName) { StringBuilder propertyName = new StringBuilder(columnName.length()); int len = columnName.length(); if(splitCamelCase) { boolean toUpper = false; for(int i = 0; i < len; i ++ ) { char c = columnName.charAt(i); if(c == separatorChar) { toUpper = true; continue; } if(toUpper) { propertyName.append(Character.toUpperCase(c)); toUpper = false; } else { propertyName.append(Character.toLowerCase(c)); } } return propertyName.toString(); } return columnName; } ", "focal_tgt": "public String convertColumnNameToPropertyName(final String columnName) { StringBuilder propertyName = new StringBuilder(columnName.length()); int len = columnName.length(); if(splitCamelCase) { boolean toUpper = false; for(int i = 0; i < len; i ++ ) { char c = columnName.charAt(i); if(c == separatorChar) { toUpper = true; continue; } if(toUpper) { propertyName.append(Character.toUpperCase(c)); toUpper = false; } else { propertyName.append(Character.toLowerCase(c)); } } return propertyName.toString(); } return columnName; } ", "test_src": "static String convertColumnNameToPropertyName(String columnName) { ColumnNamingStrategy columnNamingStrategy = new ColumnNamingStrategy(); return columnNamingStrategy.convertColumnNameToPropertyName(columnName); } ", "label": 0, "focal_db": [2889776, "oblac/jodd", "/data/comment_repos/oblac@jodd", "0f989f1e35564d0daaadd61ae3ab5e211085d187", "85c68074afeb5c58014e57141054e45f08c63325", "jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java", "103112c9c4089f8a64c241e6efc7640d785d6909", "jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java", "public String convertColumnNameToPropertyName(String columnName) {\n\t\tStringBuilder propertyName = new StringBuilder(columnName.length());\n\t\tint len = columnName.length();\n\n\t\tif (splitCamelCase) {\n\t\t\tboolean toUpper = false;\n\t\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\tchar c = columnName.charAt(i);\n\t\t\t\tif (c == separatorChar) {\n\t\t\t\t\ttoUpper = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (toUpper) {\n\t\t\t\t\tpropertyName.append(Character.toUpperCase(c));\n\t\t\t\t\ttoUpper = false;\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName.append(Character.toLowerCase(c));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn propertyName.toString();\n\t\t}\n\t\treturn columnName;\n\t}", "/**\n * Converts column name to property name.\n */\n", "public String convertColumnNameToPropertyName(final String columnName) {\n\t\tStringBuilder propertyName = new StringBuilder(columnName.length());\n\t\tint len = columnName.length();\n\n\t\tif (splitCamelCase) {\n\t\t\tboolean toUpper = false;\n\t\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\tchar c = columnName.charAt(i);\n\t\t\t\tif (c == separatorChar) {\n\t\t\t\t\ttoUpper = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (toUpper) {\n\t\t\t\t\tpropertyName.append(Character.toUpperCase(c));\n\t\t\t\t\ttoUpper = false;\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName.append(Character.toLowerCase(c));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn propertyName.toString();\n\t\t}\n\t\treturn columnName;\n\t}", "/**\n * Converts column name to property name.\n */\n"], "test_db": ["8637aa50012802f0f1859acd87b95f4290f456be", "oblac/jodd", "/data/comment_repos/oblac@jodd", "convertColumnNameToPropertyName", "/data/comment_repos/oblac@jodd/jodd-db/src/test/java/jodd/db/oom/naming/ColumnNamingStrategyTest.java", "convertColumnNameToPropertyName", "\tstatic String convertColumnNameToPropertyName(String columnName) {\n\t\tColumnNamingStrategy columnNamingStrategy = new ColumnNamingStrategy();\n\t\treturn columnNamingStrategy.convertColumnNameToPropertyName(columnName);\n\t}", "public String convertColumnNameToPropertyName(String columnName) {\r\n\t\tStringBuilder propertyName = new StringBuilder(columnName.length());\r\n\t\tint len = columnName.length();\r\n\r\n\t\tif (splitCamelCase == true) {\r\n\t\t\tboolean toUpper = false;\r\n\t\t\tfor (int i = 0; i < len; i++) {\r\n\t\t\t\tchar c = columnName.charAt(i);\r\n\t\t\t\tif (c == separatorChar) {\r\n\t\t\t\t\ttoUpper = true;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (toUpper == true) {\r\n\t\t\t\t\tpropertyName.append(Character.toUpperCase(c));\r\n\t\t\t\t\ttoUpper = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpropertyName.append(Character.toLowerCase(c));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn propertyName.toString();\r\n\t\t}\r\n\t\treturn columnName;\r\n\t}", "jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java", "public String convertColumnNameToPropertyName(String columnName) {\r\n\t\tStringBuilder propertyName = new StringBuilder(columnName.length());\r\n\t\tint len = columnName.length();\r\n\r\n\t\tif (splitCamelCase) {\r\n\t\t\tboolean toUpper = false;\r\n\t\t\tfor (int i = 0; i < len; i++) {\r\n\t\t\t\tchar c = columnName.charAt(i);\r\n\t\t\t\tif (c == separatorChar) {\r\n\t\t\t\t\ttoUpper = true;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (toUpper) {\r\n\t\t\t\t\tpropertyName.append(Character.toUpperCase(c));\r\n\t\t\t\t\ttoUpper = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpropertyName.append(Character.toLowerCase(c));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn propertyName.toString();\r\n\t\t}\r\n\t\treturn columnName;\r\n\t}", "jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java"], "edit_seq": [["public", "public", "equal"], ["String", "String", "equal"], ["convert", "convert", "equal"], ["<con>", "<con>", "equal"], ["Column", "Column", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Property", "Property", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], ["", "final", "insert"], ["String", "String", "equal"], ["column", "column", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["property", "property", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["(", "(", "equal"], ["column", "column", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["int", "int", "equal"], ["len", "len", "equal"], ["=", "=", "equal"], ["column", "column", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["split", "split", "equal"], ["<con>", "<con>", "equal"], ["Camel", "Camel", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["boolean", "boolean", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], ["i", "i", "equal"], ["=", "=", "equal"], ["0", "0", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["<", "<", "equal"], ["len", "len", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["char", "char", "equal"], ["c", "c", "equal"], ["=", "=", "equal"], ["column", "column", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["char", "char", "equal"], ["<con>", "<con>", "equal"], ["At", "At", "equal"], ["(", "(", "equal"], ["i", "i", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], ["==", "==", "equal"], ["separator", "separator", "equal"], ["<con>", "<con>", "equal"], ["Char", "Char", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["=", "=", "equal"], ["true", "true", "equal"], [";", ";", "equal"], ["continue", "continue", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["property", "property", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["append", "append", "equal"], ["(", "(", "equal"], ["Character", "Character", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["property", "property", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["append", "append", "equal"], ["(", "(", "equal"], ["Character", "Character", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Lower", "Lower", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["property", "property", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["String", "String", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["column", "column", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static < T > ToDoubleNullable < T > powOrNull(ToByteNullable < T > expression, int power) { return new ToDoubleNullableImpl < > (PowUtil.pow(expression.orThrow(), power), expression.isNull()); } ", "focal_tgt": "public static < T > ToDoubleNullable < T > powOrNull(ToByteNullable < T > expression, int power) { return new ToDoubleNullableImpl < > (PowUtil.bytePowInt(expression.orThrow(), power), expression.isNull()); } ", "test_src": "@Test void powOrNull() { assertNotNull(Expressions.powOrNull(ToByteNullable.of(b -> (byte)1), 1)); assertNotNull(Expressions.powOrNull(ToByteNullable.of(b -> (byte)1), ToInt.of(i -> 1))); assertNotNull(Expressions.powOrNull(ToByteNullable.of(b -> (byte)1), 1d)); assertNotNull(Expressions.powOrNull(ToByteNullable.of(b -> (byte)1), ToDouble.of(d -> 1))); assertNotNull(Expressions.powOrNull(ToShortNullable.of(s -> (short)1), 1)); assertNotNull(Expressions.powOrNull(ToShortNullable.of(s -> (short)1), ToInt.of(i -> 1))); assertNotNull(Expressions.powOrNull(ToShortNullable.of(s -> (short)1), 1d)); assertNotNull(Expressions.powOrNull(ToShortNullable.of(s -> (short)1), ToDouble.of(d -> 1))); assertNotNull(Expressions.powOrNull(ToIntNullable.of(i -> 1), 1)); assertNotNull(Expressions.powOrNull(ToIntNullable.of(i -> 1), ToInt.of(i -> 1))); assertNotNull(Expressions.powOrNull(ToIntNullable.of(i -> 1), 1d)); assertNotNull(Expressions.powOrNull(ToIntNullable.of(i -> 1), ToDouble.of(d -> 1))); assertNotNull(Expressions.powOrNull(ToLongNullable.of(l -> 1L), 1)); assertNotNull(Expressions.powOrNull(ToLongNullable.of(l -> 1L), ToInt.of(i -> 1))); assertNotNull(Expressions.powOrNull(ToLongNullable.of(l -> 1L), 1d)); assertNotNull(Expressions.powOrNull(ToLongNullable.of(l -> 1L), ToDouble.of(d -> 1))); assertNotNull(Expressions.powOrNull(ToFloatNullable.of(f -> 1f), 1)); assertNotNull(Expressions.powOrNull(ToFloatNullable.of(f -> 1f), ToInt.of(i -> 1))); assertNotNull(Expressions.powOrNull(ToFloatNullable.of(f -> 1f), 1d)); assertNotNull(Expressions.powOrNull(ToFloatNullable.of(f -> 1f), ToDouble.of(d -> 1))); assertNotNull(Expressions.powOrNull(ToDoubleNullable.of(d -> 1d), 1)); assertNotNull(Expressions.powOrNull(ToDoubleNullable.of(d -> 1d), ToInt.of(i -> 1))); assertNotNull(Expressions.powOrNull(ToDoubleNullable.of(d -> 1d), 1d)); assertNotNull(Expressions.powOrNull(ToDoubleNullable.of(d -> 1d), ToDouble.of(d -> 1))); } ", "label": 0, "focal_db": [3507296, "speedment/speedment", "/data/comment_repos/speedment@speedment", "c96fd8e456bf6cbde58c474a04f5f3ad0ecda473", "718f0fec59d0f7bb3fa697394133df628cf161df", "runtime-parent/runtime-compute/src/main/java/com/speedment/runtime/compute/expression/Expressions.java", "d362638c4d388e594e09bc1ab3b90bd1a81fab63", "runtime-parent/runtime-compute/src/main/java/com/speedment/runtime/compute/expression/Expressions.java", "public static <T> ToDoubleNullable<T>\n    powOrNull(ToByteNullable<T> expression, int power) {\n        return new ToDoubleNullableImpl<>(\n            PowUtil.pow(expression.orThrow(), power),\n            expression.isNull()\n        );\n    }", "/**\n * Creates and returns an expression that takes the result of an input\n * expression and multiplies it with itself {@code power} times.\n *\n * @param expression  the input expression\n * @param power       the power\n * @param <T>         the input type\n * @return            the new expression\n */\n", "public static <T> ToDoubleNullable<T>\n    powOrNull(ToByteNullable<T> expression, int power) {\n        return new ToDoubleNullableImpl<>(\n            PowUtil.bytePowInt(expression.orThrow(), power),\n            expression.isNull()\n        );\n    }", "/**\n * Creates and returns an expression that takes the result of an input\n * expression and multiplies it with itself {@code power} times.\n *\n * @param expression  the input expression\n * @param power       the power\n * @param <T>         the input type\n * @return            the new expression\n */\n"], "test_db": ["988d9b3491477ba34d7954826e7a2fb11b52eea0", "speedment/speedment", "/data/comment_repos/speedment@speedment", "powOrNull", "/data/comment_repos/speedment@speedment/runtime-parent/runtime-compute/src/test/java/com/speedment/runtime/compute/expression/ExpressionsTest.java", "powOrNull", "    @Test\n    void powOrNull() {\n        assertNotNull(Expressions.powOrNull(ToByteNullable.of(b -> (byte) 1), 1));\n        assertNotNull(Expressions.powOrNull(ToByteNullable.of(b -> (byte) 1), ToInt.of(i -> 1)));\n        assertNotNull(Expressions.powOrNull(ToByteNullable.of(b -> (byte) 1), 1d));\n        assertNotNull(Expressions.powOrNull(ToByteNullable.of(b -> (byte) 1), ToDouble.of(d -> 1)));\n\n        assertNotNull(Expressions.powOrNull(ToShortNullable.of(s -> (short) 1), 1));\n        assertNotNull(Expressions.powOrNull(ToShortNullable.of(s -> (short) 1), ToInt.of(i -> 1)));\n        assertNotNull(Expressions.powOrNull(ToShortNullable.of(s -> (short) 1), 1d));\n        assertNotNull(Expressions.powOrNull(ToShortNullable.of(s -> (short) 1), ToDouble.of(d -> 1)));\n\n        assertNotNull(Expressions.powOrNull(ToIntNullable.of(i -> 1), 1));\n        assertNotNull(Expressions.powOrNull(ToIntNullable.of(i -> 1), ToInt.of(i -> 1)));\n        assertNotNull(Expressions.powOrNull(ToIntNullable.of(i -> 1), 1d));\n        assertNotNull(Expressions.powOrNull(ToIntNullable.of(i -> 1), ToDouble.of(d -> 1)));\n\n        assertNotNull(Expressions.powOrNull(ToLongNullable.of(l -> 1L), 1));\n        assertNotNull(Expressions.powOrNull(ToLongNullable.of(l -> 1L), ToInt.of(i -> 1)));\n        assertNotNull(Expressions.powOrNull(ToLongNullable.of(l -> 1L), 1d));\n        assertNotNull(Expressions.powOrNull(ToLongNullable.of(l -> 1L), ToDouble.of(d -> 1)));\n\n        assertNotNull(Expressions.powOrNull(ToFloatNullable.of(f -> 1f), 1));\n        assertNotNull(Expressions.powOrNull(ToFloatNullable.of(f -> 1f), ToInt.of(i -> 1)));\n        assertNotNull(Expressions.powOrNull(ToFloatNullable.of(f -> 1f), 1d));\n        assertNotNull(Expressions.powOrNull(ToFloatNullable.of(f -> 1f), ToDouble.of(d -> 1)));\n\n        assertNotNull(Expressions.powOrNull(ToDoubleNullable.of(d -> 1d), 1));\n        assertNotNull(Expressions.powOrNull(ToDoubleNullable.of(d -> 1d), ToInt.of(i -> 1)));\n        assertNotNull(Expressions.powOrNull(ToDoubleNullable.of(d -> 1d), 1d));\n        assertNotNull(Expressions.powOrNull(ToDoubleNullable.of(d -> 1d), ToDouble.of(d -> 1)));\n    }", "public static <T> ToDoubleNullable<T>\n    powOrNull(ToLongNullable<T> expression, ToDouble<T> power) {\n        return new ToDoubleNullableImpl<>(\n            object -> Math.pow(\n                expression.applyAsLong(object),\n                power.applyAsDouble(object)\n            ), expression::isNull\n        );\n    }", "runtime-parent/runtime-compute/src/main/java/com/speedment/runtime/compute/expression/Expressions.java", "public static <T> ToDoubleNullable<T>\n    powOrNull(ToLongNullable<T> expression, ToDouble<T> power) {\n        return new ToDoubleNullableImpl<>(\n            PowUtil.pow(expression.orThrow(), power),\n            expression.isNull()\n        );\n    }", "runtime-parent/runtime-compute/src/main/java/com/speedment/runtime/compute/expression/Expressions.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Double", "Double", "equal"], ["<con>", "<con>", "equal"], ["Nullable", "Nullable", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["pow", "pow", "equal"], ["<con>", "<con>", "equal"], ["Or", "Or", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["(", "(", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Byte", "Byte", "equal"], ["<con>", "<con>", "equal"], ["Nullable", "Nullable", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["expression", "expression", "equal"], [",", ",", "equal"], ["int", "int", "equal"], ["power", "power", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["new", "new", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Double", "Double", "equal"], ["<con>", "<con>", "equal"], ["Nullable", "Nullable", "equal"], ["<con>", "<con>", "equal"], ["Impl", "Impl", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], ["Pow", "Pow", "equal"], ["<con>", "<con>", "equal"], ["Util", "Util", "equal"], [".", ".", "equal"], ["pow", "byte", "replace"], ["", "<con>", "insert"], ["", "Pow", "insert"], ["", "<con>", "insert"], ["", "Int", "insert"], ["(", "(", "equal"], ["expression", "expression", "equal"], [".", ".", "equal"], ["or", "or", "equal"], ["<con>", "<con>", "equal"], ["Throw", "Throw", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["power", "power", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["expression", "expression", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "private Item swallow(final QueryContext ctx)throws QueryException { final Iter ir = expr[0].iter(ctx); while(ir.next() != null); return null; } ", "focal_tgt": "private Item voidd(final QueryContext ctx)throws QueryException { final Iter ir = expr[0].iter(ctx); while(ir.next() != null); return null; } ", "test_src": "@Test public void swallow() { query(_PROF_SWALLOW.args(\"()\"), \"\"); query(_PROF_SWALLOW.args(\"1\"), \"\"); query(_PROF_SWALLOW.args(\"1,2\"), \"\"); } ", "test_tgt": "@Test public void voidd() { query(_PROF_VOID.args(\"()\"), \"\"); query(_PROF_VOID.args(\"1\"), \"\"); query(_PROF_VOID.args(\"1,2\"), \"\"); } ", "label": 1, "focal_db": [4644038, "BaseXdb/basex", "/data/local_comment_repos/BaseXdb@basex", "d55105d1f200eee11456555f16f8f930ad3c3390", "0cb9911021e4134d347a88a24dc57693e45344a2", "src/main/java/org/basex/query/func/FNProf.java", "6b30d847f81bfb1cb8fcc23b49dfb3195e7b551a", "src/main/java/org/basex/query/func/FNProf.java", "private Item swallow(final QueryContext ctx) throws QueryException {\n    final Iter ir = expr[0].iter(ctx);\n    while(ir.next() != null);\n    return null;\n  }", "/**\n * Swallows the input.\n * @param ctx query context\n * @return memory consumption\n * @throws QueryException query exception\n */\n", "private Item voidd(final QueryContext ctx) throws QueryException {\n    final Iter ir = expr[0].iter(ctx);\n    while(ir.next() != null);\n    return null;\n  }", "/**\n * Swallows the input.\n * @param ctx query context\n * @return memory consumption\n * @throws QueryException query exception\n */\n"], "test_db": [4644039, "BaseXdb/basex", "/data/local_comment_repos/BaseXdb@basex", "d55105d1f200eee11456555f16f8f930ad3c3390", "0a78d09355dcecef7e98402dac7df8b86706abb8", "src/test/java/org/basex/test/query/func/FNProfTest.java", "6d3f73a452c00aa5471a33709d0ee1b3a843c4ca", "src/test/java/org/basex/test/query/func/FNProfTest.java", "@Test\r\n  public void swallow() {\r\n    query(_PROF_SWALLOW.args(\"()\"), \"\");\r\n    query(_PROF_SWALLOW.args(\"1\"), \"\");\r\n    query(_PROF_SWALLOW.args(\"1,2\"), \"\");\r\n  }", "/**\n * Test method.\n */\n", "@Test\r\n  public void voidd() {\r\n    query(_PROF_VOID.args(\"()\"), \"\");\r\n    query(_PROF_VOID.args(\"1\"), \"\");\r\n    query(_PROF_VOID.args(\"1,2\"), \"\");\r\n  }", "/**\n * Test method.\n */\n"], "edit_seq": [["private", "private", "equal"], ["Item", "Item", "equal"], ["swallow", "voidd", "replace"], ["(", "(", "equal"], ["final", "final", "equal"], ["Query", "Query", "equal"], ["<con>", "<con>", "equal"], ["Context", "Context", "equal"], ["ctx", "ctx", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Query", "Query", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["Iter", "Iter", "equal"], ["ir", "ir", "equal"], ["=", "=", "equal"], ["expr", "expr", "equal"], ["[", "[", "equal"], ["0", "0", "equal"], ["]", "]", "equal"], [".", ".", "equal"], ["iter", "iter", "equal"], ["(", "(", "equal"], ["ctx", "ctx", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["while", "while", "equal"], ["(", "(", "equal"], ["ir", "ir", "equal"], [".", ".", "equal"], ["next", "next", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["!=", "!=", "equal"], ["null", "null", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["null", "null", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@Authorized(PrivilegeConstants.VIEW_CONCEPTS)public ConceptSet getConceptSetByUuid(String uuid); ", "focal_tgt": "@Authorized(PrivilegeConstants.GET_CONCEPTS)public ConceptSet getConceptSetByUuid(String uuid); ", "test_src": "@Test public void getConceptSetByUuid_shouldFindObjectGivenValidUuid() { String uuid = \"1a111827-639f-4cb4-961f-1e025bf88d90\"; ConceptSet conceptSet = Context.getConceptService().getConceptSetByUuid(uuid); Assert.assertEquals(1, (int)conceptSet.getConceptSetId()); } ", "label": 0, "focal_db": [2996413, "openmrs/openmrs-core", "/data/comment_repos/openmrs@openmrs-core", "1c956ab3d823a844e2bce4b09f975ad5b8362f07", "9bb864794fa5313e688f2fd6726c0e0886227233", "api/src/main/java/org/openmrs/api/ConceptService.java", "cbb5fc7fa2e1a015db9e13bbb4949fcc8aa5ad7a", "api/src/main/java/org/openmrs/api/ConceptService.java", "@Authorized(PrivilegeConstants.VIEW_CONCEPTS)\r\n\tpublic ConceptSet getConceptSetByUuid(String uuid);", "/**\n * Get ConceptSet by its UUID\n *\n * @param uuid\n * @return\n * @should find object given valid uuid\n * @should return null if no object found with given uuid\n */\n", "@Authorized(PrivilegeConstants.GET_CONCEPTS)\r\n\tpublic ConceptSet getConceptSetByUuid(String uuid);", "/**\n * Get ConceptSet by its UUID\n *\n * @param uuid\n * @return\n * @should find object given valid uuid\n * @should return null if no object found with given uuid\n */\n"], "test_db": ["118bfe4b3c76ba40ca96d6211cdeb8b8ac6b5a72", "openmrs/openmrs-core", "/data/comment_repos/openmrs@openmrs-core", "getConceptSetByUuid", "/data/comment_repos/openmrs@openmrs-core/api/src/test/java/org/openmrs/api/ConceptServiceTest.java", "getConceptSetByUuid_shouldFindObjectGivenValidUuid", "\t@Test\n\tpublic void getConceptSetByUuid_shouldFindObjectGivenValidUuid() {\n\t\tString uuid = \"1a111827-639f-4cb4-961f-1e025bf88d90\";\n\t\tConceptSet conceptSet = Context.getConceptService().getConceptSetByUuid(uuid);\n\t\tAssert.assertEquals(1, (int) conceptSet.getConceptSetId());\n\t}", "@Transactional(readOnly = true)\r\n\tpublic ConceptSet getConceptSetByUuid(String uuid);", "src/api/org/openmrs/api/ConceptService.java", "@Transactional(readOnly = true)\r\n\t@Authorized(OpenmrsConstants.PRIV_VIEW_CONCEPTS)\r\n\tpublic ConceptSet getConceptSetByUuid(String uuid);", "src/api/org/openmrs/api/ConceptService.java"], "edit_seq": [["@", "@", "equal"], ["Authorized", "Authorized", "equal"], ["(", "(", "equal"], ["Privilege", "Privilege", "equal"], ["<con>", "<con>", "equal"], ["Constants", "Constants", "equal"], [".", ".", "equal"], ["VIEW", "GET", "replace"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["CONCEPTS", "CONCEPTS", "equal"], [")", ")", "equal"], ["public", "public", "equal"], ["Concept", "Concept", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Concept", "Concept", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<con>", "<con>", "equal"], ["By", "By", "equal"], ["<con>", "<con>", "equal"], ["Uuid", "Uuid", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["uuid", "uuid", "equal"], [")", ")", "equal"], [";", ";", "equal"]]}, {"focal_src": "public void lastApplied(int index) { assert index >= lastApplied : \"new last applied: \" + index + \" is smaller than current last applied: \" + lastApplied; lastApplied = index; } ", "focal_tgt": "public void lastApplied(long index) { assert index >= lastApplied : \"new last applied: \" + index + \" is smaller than current last applied: \" + lastApplied; lastApplied = index; } ", "test_src": "@Test public void test_lastApplied() { int last = 123; state.lastApplied(last); assertEquals(last, state.lastApplied()); } ", "label": 0, "focal_db": [2231006, "hazelcast/hazelcast", "/data/comment_repos/hazelcast@hazelcast", "beebdddfa3aefca39725ecab6c7ec16d24785fdc", "7ab7692037490eb67899bbe0e3cdd8426f5f2ed1", "hazelcast-raft/src/main/java/com/hazelcast/raft/impl/state/RaftState.java", "94753276dea41094fc5a5a3f4df135e4ea4d6ffb", "hazelcast-raft/src/main/java/com/hazelcast/raft/impl/state/RaftState.java", "public void lastApplied(int index) {\n        assert index >= lastApplied : \"new last applied: \" + index + \" is smaller than current last applied: \" + lastApplied;\n        lastApplied = index;\n    }", "", "public void lastApplied(long index) {\n        assert index >= lastApplied : \"new last applied: \" + index + \" is smaller than current last applied: \" + lastApplied;\n        lastApplied = index;\n    }", "/**\n * Updates the last applied index\n * @see #lastApplied\n */\n"], "test_db": ["beebdddfa3aefca39725ecab6c7ec16d24785fdc", "hazelcast/hazelcast", "/data/comment_repos/hazelcast@hazelcast", "lastApplied", "/data/comment_repos/hazelcast@hazelcast/hazelcast/src/test/java/com/hazelcast/cp/internal/raft/impl/state/RaftStateTest.java", "test_lastApplied", "    @Test\n    public void test_lastApplied() {\n        int last = 123;\n        state.lastApplied(last);\n        assertEquals(last, state.lastApplied());\n    }", "public int lastApplied() {\n        return lastApplied;\n    }", "hazelcast-raft/src/main/java/com/hazelcast/raft/impl/state/RaftState.java", "public long lastApplied() {\n        return lastApplied;\n    }", "hazelcast-raft/src/main/java/com/hazelcast/raft/impl/state/RaftState.java"], "edit_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["last", "last", "equal"], ["<con>", "<con>", "equal"], ["Applied", "Applied", "equal"], ["(", "(", "equal"], ["int", "long", "replace"], ["index", "index", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["assert", "assert", "equal"], ["index", "index", "equal"], [">=", ">=", "equal"], ["last", "last", "equal"], ["<con>", "<con>", "equal"], ["Applied", "Applied", "equal"], [":", ":", "equal"], ["\"", "\"", "equal"], ["new", "new", "equal"], ["last", "last", "equal"], ["applied", "applied", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["index", "index", "equal"], ["+", "+", "equal"], ["\"", "\"", "equal"], ["is", "is", "equal"], ["smaller", "smaller", "equal"], ["than", "than", "equal"], ["current", "current", "equal"], ["last", "last", "equal"], ["applied", "applied", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["last", "last", "equal"], ["<con>", "<con>", "equal"], ["Applied", "Applied", "equal"], [";", ";", "equal"], ["last", "last", "equal"], ["<con>", "<con>", "equal"], ["Applied", "Applied", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public void validate(Object obj, Errors errors) { PersonMergeLog personMergeLog = (PersonMergeLog)obj; if(personMergeLog == null) { errors.rejectValue(\"persnMergeLog\", \"error.general\"); } else { ValidationUtils.rejectIfEmpty(errors, \"personMergeLogData\", \"error.null\"); ValidationUtils.rejectIfEmpty(errors, \"winner\", \"error.null\"); ValidationUtils.rejectIfEmpty(errors, \"loser\", \"error.null\"); ValidateUtil.validateFieldLengths(errors, obj.getClass(), \"voidReason\"); } } ", "focal_tgt": "@Override public void validate(Object obj, Errors errors) { PersonMergeLog personMergeLog = (PersonMergeLog)obj; if(personMergeLog == null) { errors.rejectValue(\"persnMergeLog\", \"error.general\"); } else { ValidationUtils.rejectIfEmpty(errors, \"personMergeLogData\", \"error.null\"); ValidationUtils.rejectIfEmpty(errors, \"winner\", \"error.null\"); ValidationUtils.rejectIfEmpty(errors, \"loser\", \"error.null\"); ValidateUtil.validateFieldLengths(errors, obj.getClass(), \"voidReason\"); } } ", "test_src": "@Test public void validate_shouldFailValidationIfPersonMergeLogDataIsNull() { PersonMergeLog personMergeLog = new PersonMergeLog(); personMergeLog.setWinner(new Person()); personMergeLog.setLoser(new Person()); PersonMergeLogValidator validator = new PersonMergeLogValidator(); Errors errors = new BindException(personMergeLog, \"personMergeLog\"); validator.validate(personMergeLog, errors); Assert.assertTrue(errors.hasFieldErrors(\"personMergeLogData\")); } ", "label": 0, "focal_db": [2986933, "openmrs/openmrs-core", "/data/comment_repos/openmrs@openmrs-core", "b060cef9f7c769eb5265f0d458810db321a8c26e", "f740997fab4f3a54b84789f0ce7f83abd1e9992b", "api/src/main/java/org/openmrs/validator/PersonMergeLogValidator.java", "f768e879a73daab1ecb01949c0eaa9f70790871b", "api/src/main/java/org/openmrs/validator/PersonMergeLogValidator.java", "public void validate(Object obj, Errors errors) {\n\t\t\n\t\tPersonMergeLog personMergeLog = (PersonMergeLog) obj;\n\t\t\n\t\tif (personMergeLog == null) {\n\t\t\terrors.rejectValue(\"persnMergeLog\", \"error.general\");\n\t\t} else {\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"personMergeLogData\", \"error.null\");\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"winner\", \"error.null\");\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"loser\", \"error.null\");\n\t\t\tValidateUtil.validateFieldLengths(errors, obj.getClass(), \"voidReason\");\n\t\t}\n\t}", "/**\n * Checks the form object for any inconsistencies/errors\n *\n * @see org.springframework.validation.Validator#validate(java.lang.Object,\n *      org.springframework.validation.Errors)\n * @should fail validation if personMergeLogData is null\n * @should fail validation if winner is null\n * @should fail validation if loser is null\n * @should pass validation if all fields are correct\n * @should pass validation if field lengths are correct\n * @should fail validation if field lengths are not correct\n */\n", "@Override\n\tpublic void validate(Object obj, Errors errors) {\n\t\t\n\t\tPersonMergeLog personMergeLog = (PersonMergeLog) obj;\n\t\t\n\t\tif (personMergeLog == null) {\n\t\t\terrors.rejectValue(\"persnMergeLog\", \"error.general\");\n\t\t} else {\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"personMergeLogData\", \"error.null\");\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"winner\", \"error.null\");\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"loser\", \"error.null\");\n\t\t\tValidateUtil.validateFieldLengths(errors, obj.getClass(), \"voidReason\");\n\t\t}\n\t}", "/**\n * Checks the form object for any inconsistencies/errors\n *\n * @see org.springframework.validation.Validator#validate(java.lang.Object,\n *      org.springframework.validation.Errors)\n * @should fail validation if personMergeLogData is null\n * @should fail validation if winner is null\n * @should fail validation if loser is null\n * @should pass validation if all fields are correct\n * @should pass validation if field lengths are correct\n * @should fail validation if field lengths are not correct\n */\n"], "test_db": ["225d8cd669d2e31ba80b0f39bd381b1ebc8c11d7", "openmrs/openmrs-core", "/data/comment_repos/openmrs@openmrs-core", "validate", "/data/comment_repos/openmrs@openmrs-core/api/src/test/java/org/openmrs/validator/PersonMergeLogValidatorTest.java", "validate_shouldFailValidationIfPersonMergeLogDataIsNull", "\t@Test\n\tpublic void validate_shouldFailValidationIfPersonMergeLogDataIsNull() {\n\t\tPersonMergeLog personMergeLog = new PersonMergeLog();\n\t\tpersonMergeLog.setWinner(new Person());\n\t\tpersonMergeLog.setLoser(new Person());\n\t\tPersonMergeLogValidator validator = new PersonMergeLogValidator();\n\t\tErrors errors = new BindException(personMergeLog, \"personMergeLog\");\n\t\tvalidator.validate(personMergeLog, errors);\n\t\tAssert.assertTrue(errors.hasFieldErrors(\"personMergeLogData\"));\n\t}", "public void validate(Object obj, Errors errors) {\r\n\t\tif (!ValidateUtil.isValidationOn()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tPersonMergeLog personMergeLog = (PersonMergeLog) obj;\r\n\t\t\r\n\t\tif (personMergeLog == null) {\r\n\t\t\terrors.rejectValue(\"persnMergeLog\", \"error.general\");\r\n\t\t} else {\r\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"personMergeLogData\", \"error.null\");\r\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"winner\", \"error.null\");\r\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"loser\", \"error.null\");\r\n\t\t}\r\n\t}", "api/src/main/java/org/openmrs/validator/PersonMergeLogValidator.java", "public void validate(Object obj, Errors errors) {\r\n\t\t\r\n\t\tPersonMergeLog personMergeLog = (PersonMergeLog) obj;\r\n\t\t\r\n\t\tif (personMergeLog == null) {\r\n\t\t\terrors.rejectValue(\"persnMergeLog\", \"error.general\");\r\n\t\t} else {\r\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"personMergeLogData\", \"error.null\");\r\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"winner\", \"error.null\");\r\n\t\t\tValidationUtils.rejectIfEmpty(errors, \"loser\", \"error.null\");\r\n\t\t}\r\n\t}", "api/src/main/java/org/openmrs/validator/PersonMergeLogValidator.java"], "edit_seq": [["", "@", "insert"], ["", "Override", "insert"], ["public", "public", "equal"], ["void", "void", "equal"], ["validate", "validate", "equal"], ["(", "(", "equal"], ["Object", "Object", "equal"], ["obj", "obj", "equal"], [",", ",", "equal"], ["Errors", "Errors", "equal"], ["errors", "errors", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Merge", "Merge", "equal"], ["<con>", "<con>", "equal"], ["Log", "Log", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Merge", "Merge", "equal"], ["<con>", "<con>", "equal"], ["Log", "Log", "equal"], ["=", "=", "equal"], ["(", "(", "equal"], ["Person", "Person", "equal"], ["<con>", "<con>", "equal"], ["Merge", "Merge", "equal"], ["<con>", "<con>", "equal"], ["Log", "Log", "equal"], [")", ")", "equal"], ["obj", "obj", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Merge", "Merge", "equal"], ["<con>", "<con>", "equal"], ["Log", "Log", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["errors", "errors", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["persn", "persn", "equal"], ["<con>", "<con>", "equal"], ["Merge", "Merge", "equal"], ["<con>", "<con>", "equal"], ["Log", "Log", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["error", "error", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["general", "general", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["Validation", "Validation", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["If", "If", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["person", "person", "equal"], ["<con>", "<con>", "equal"], ["Merge", "Merge", "equal"], ["<con>", "<con>", "equal"], ["Log", "Log", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["error", "error", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["null", "null", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Validation", "Validation", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["If", "If", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["winner", "winner", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["error", "error", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["null", "null", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Validation", "Validation", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["reject", "reject", "equal"], ["<con>", "<con>", "equal"], ["If", "If", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["loser", "loser", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["error", "error", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["null", "null", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Validate", "Validate", "equal"], ["<con>", "<con>", "equal"], ["Util", "Util", "equal"], [".", ".", "equal"], ["validate", "validate", "equal"], ["<con>", "<con>", "equal"], ["Field", "Field", "equal"], ["<con>", "<con>", "equal"], ["Lengths", "Lengths", "equal"], ["(", "(", "equal"], ["errors", "errors", "equal"], [",", ",", "equal"], ["obj", "obj", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["void", "void", "equal"], ["<con>", "<con>", "equal"], ["Reason", "Reason", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@Override public InetSocketAddress[]getPeers(long timeoutValue, TimeUnit timeoutUnit)throws PeerDiscoveryException { try { return allPeers(); } catch(UnknownHostException e) { throw new PeerDiscoveryException(e); } } ", "focal_tgt": "@Override public InetSocketAddress[]getPeers(long services, long timeoutValue, TimeUnit timeoutUnit)throws PeerDiscoveryException { if(services != 0)throw new PeerDiscoveryException(\"Pre-determined peers cannot be filtered by services: \" + services); try { return allPeers(); } catch(UnknownHostException e) { throw new PeerDiscoveryException(e); } } ", "test_src": "@Test public void getPeers_length()throws Exception { SeedPeers seedPeers = new SeedPeers(MAINNET); InetSocketAddress[]addresses = seedPeers.getPeers(0, 0, TimeUnit.SECONDS); assertThat(addresses.length, equalTo(MAINNET.getAddrSeeds().length)); } ", "label": 0, "focal_db": [1449545, "bitcoinj/bitcoinj", "/data/comment_repos/bitcoinj@bitcoinj", "1be65483b4ad35bf82382bb03a61e160fd4f1a9e", "4a7fa6e6b91a4ea2c814adf8016910222191df94", "core/src/main/java/org/bitcoinj/net/discovery/SeedPeers.java", "f6f030bda1372c27cb8174b1c4907d4c929211d3", "core/src/main/java/org/bitcoinj/net/discovery/SeedPeers.java", "@Override\n    public InetSocketAddress[] getPeers(long timeoutValue, TimeUnit timeoutUnit) throws PeerDiscoveryException {\n        try {\n            return allPeers();\n        } catch (UnknownHostException e) {\n            throw new PeerDiscoveryException(e);\n        }\n    }", "/**\n * Returns an array containing all the Bitcoin nodes within the list.\n */\n", "@Override\n    public InetSocketAddress[] getPeers(long services, long timeoutValue, TimeUnit timeoutUnit) throws PeerDiscoveryException {\n        if (services != 0)\n            throw new PeerDiscoveryException(\"Pre-determined peers cannot be filtered by services: \" + services);\n        try {\n            return allPeers();\n        } catch (UnknownHostException e) {\n            throw new PeerDiscoveryException(e);\n        }\n    }", "/**\n * Returns an array containing all the Bitcoin nodes within the list.\n */\n"], "test_db": ["b64a3b5d1ecc5e8145a7529f15455bcb28d06376", "bitcoinj/bitcoinj", "/data/comment_repos/bitcoinj@bitcoinj", "getPeers", "/data/comment_repos/bitcoinj@bitcoinj/core/src/test/java/org/bitcoinj/net/discovery/SeedPeersTest.java", "getPeers_length", "    @Test\n    public void getPeers_length() throws Exception{\n        SeedPeers seedPeers = new SeedPeers(MAINNET);\n        InetSocketAddress[] addresses = seedPeers.getPeers(0, 0, TimeUnit.SECONDS);\n        assertThat(addresses.length, equalTo(MAINNET.getAddrSeeds().length));\n    }", "public InetSocketAddress[] getPeers() throws PeerDiscoveryException {\n        try {\n            return allPeers();\n        } catch (UnknownHostException e) {\n            throw new PeerDiscoveryException(e);\n        }\n    }", "core/src/main/java/com/google/bitcoin/discovery/SeedPeers.java", "public InetSocketAddress[] getPeers(long timeoutValue, TimeUnit timeoutUnit) throws PeerDiscoveryException {\n        try {\n            return allPeers();\n        } catch (UnknownHostException e) {\n            throw new PeerDiscoveryException(e);\n        }\n    }", "core/src/main/java/com/google/bitcoin/discovery/SeedPeers.java"], "edit_seq": [["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["Inet", "Inet", "equal"], ["<con>", "<con>", "equal"], ["Socket", "Socket", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Peers", "Peers", "equal"], ["(", "(", "equal"], ["long", "long", "equal"], ["", "services", "insert"], ["", ",", "insert"], ["", "long", "insert"], ["timeout", "timeout", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], [",", ",", "equal"], ["Time", "Time", "equal"], ["<con>", "<con>", "equal"], ["Unit", "Unit", "equal"], ["timeout", "timeout", "equal"], ["<con>", "<con>", "equal"], ["Unit", "Unit", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Peer", "Peer", "equal"], ["<con>", "<con>", "equal"], ["Discovery", "Discovery", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["", "if", "insert"], ["", "(", "insert"], ["", "services", "insert"], ["", "!=", "insert"], ["", "0", "insert"], ["", ")", "insert"], ["", "throw", "insert"], ["", "new", "insert"], ["", "Peer", "insert"], ["", "<con>", "insert"], ["", "Discovery", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["", "(", "insert"], ["", "\"", "insert"], ["", "Pre", "insert"], ["", "<con>", "insert"], ["", "-", "insert"], ["", "<con>", "insert"], ["", "determined", "insert"], ["", "peers", "insert"], ["", "can", "insert"], ["", "<con>", "insert"], ["", "not", "insert"], ["", "be", "insert"], ["", "filtered", "insert"], ["", "by", "insert"], ["", "services", "insert"], ["", "<con>", "insert"], ["", ":", "insert"], ["", "\"", "insert"], ["", "+", "insert"], ["", "services", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["try", "try", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["all", "all", "equal"], ["<con>", "<con>", "equal"], ["Peers", "Peers", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["Unknown", "Unknown", "equal"], ["<con>", "<con>", "equal"], ["Host", "Host", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["e", "e", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Peer", "Peer", "equal"], ["<con>", "<con>", "equal"], ["Discovery", "Discovery", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["e", "e", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@Override public int create(String path, @mode_t long mode, FuseFileInfo fi) { final AlluxioURI uri = mPathResolverCache.getUnchecked(path); final int flags = fi.flags.get(); LOG.trace(\"create({}, {}) [Alluxio: {}]\", path, Integer.toHexString(flags), uri); try { if(mOpenFiles.size() >= MAX_OPEN_FILES) { LOG.error(\"Cannot open {}: too many open files (MAX_OPEN_FILES: {})\", uri, MAX_OPEN_FILES); return - ErrorCodes.EMFILE(); } synchronized(mOpenFiles) { mOpenFiles.add(new OpenFileEntry(mNextOpenFileId, path, null, mFileSystem.createFile(uri))); fi.fh.set(mNextOpenFileId); mNextOpenFileId += 1; } LOG.debug(\"{} created and opened\", path); } catch(FileAlreadyExistsException e) { LOG.debug(\"File {} already exists\", uri, e); return - ErrorCodes.EEXIST(); } catch(IOException e) { LOG.error(\"IOException on {}\", uri, e); return - ErrorCodes.EIO(); } catch(AlluxioException e) { LOG.error(\"AlluxioException on {}\", uri, e); return - ErrorCodes.EFAULT(); } catch(Throwable e) { LOG.error(\"Unexpected exception on {}\", path, e); return - ErrorCodes.EFAULT(); } return 0; } ", "focal_tgt": "@Override public int create(String path, @mode_t long mode, FuseFileInfo fi) { final AlluxioURI uri = mPathResolverCache.getUnchecked(path); final int flags = fi.flags.get(); LOG.trace(\"create({}, {}) [Alluxio: {}]\", path, Integer.toHexString(flags), uri); try { if(mOpenFiles.size() >= MAX_OPEN_FILES) { LOG.error(\"Cannot open {}: too many open files (MAX_OPEN_FILES: {})\", uri, MAX_OPEN_FILES); return - ErrorCodes.EMFILE(); } FileOutStream os = mFileSystem.createFile(uri); synchronized(mOpenFiles) { mOpenFiles.add(new OpenFileEntry(mNextOpenFileId, path, null, os)); fi.fh.set(mNextOpenFileId); mNextOpenFileId += 1; } LOG.debug(\"{} created and opened\", path); } catch(FileAlreadyExistsException e) { LOG.debug(\"File {} already exists\", uri, e); return - ErrorCodes.EEXIST(); } catch(IOException e) { LOG.error(\"IOException on {}\", uri, e); return - ErrorCodes.EIO(); } catch(AlluxioException e) { LOG.error(\"AlluxioException on {}\", uri, e); return - ErrorCodes.EFAULT(); } catch(Throwable e) { LOG.error(\"Unexpected exception on {}\", path, e); return - ErrorCodes.EFAULT(); } return 0; } ", "test_src": "@Test public void create()throws Exception { mFileInfo.flags.set(O_WRONLY.intValue()); mFuseFs.create(\"/foo/bar\", 0, mFileInfo); AlluxioURI expectedPath = BASE_EXPECTED_URI.join(\"/foo/bar\"); verify(mFileSystem).createFile(expectedPath, CreateFilePOptions.newBuilder().setMode(new alluxio.security.authorization.Mode((short)0).toProto()).build()); } ", "label": 0, "focal_db": [235850, "Alluxio/alluxio", "/data/comment_repos/Alluxio@alluxio", "67d705dbebbfb00c77bcaf15f52a94f03e8f46ef", "35e7894d8a22c4b490415014ff1fc3f0ed59bdb7", "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "fb6ad11ccb556b4fbfaecd103c3b16c6ed587aad", "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "@Override\n  public int create(String path, @mode_t long mode, FuseFileInfo fi) {\n    final AlluxioURI uri = mPathResolverCache.getUnchecked(path);\n    final int flags = fi.flags.get();\n    LOG.trace(\"create({}, {}) [Alluxio: {}]\", path, Integer.toHexString(flags), uri);\n\n    try {\n      if (mOpenFiles.size() >= MAX_OPEN_FILES) {\n        LOG.error(\"Cannot open {}: too many open files (MAX_OPEN_FILES: {})\", uri,\n            MAX_OPEN_FILES);\n        return -ErrorCodes.EMFILE();\n      }\n      synchronized (mOpenFiles) {\n        mOpenFiles.add(new OpenFileEntry(mNextOpenFileId, path,\n            null, mFileSystem.createFile(uri)));\n        fi.fh.set(mNextOpenFileId);\n\n        // Assuming I will never wrap around (2^64 open files are quite a lot anyway)\n        mNextOpenFileId += 1;\n      }\n      LOG.debug(\"{} created and opened\", path);\n    } catch (FileAlreadyExistsException e) {\n      LOG.debug(\"File {} already exists\", uri, e);\n      return -ErrorCodes.EEXIST();\n    } catch (IOException e) {\n      LOG.error(\"IOException on  {}\", uri, e);\n      return -ErrorCodes.EIO();\n    } catch (AlluxioException e) {\n      LOG.error(\"AlluxioException on {}\", uri, e);\n      return -ErrorCodes.EFAULT();\n    } catch (Throwable e) {\n      LOG.error(\"Unexpected exception on {}\", path, e);\n      return -ErrorCodes.EFAULT();\n    }\n\n    return 0;\n  }", "/**\n * Creates and opens a new file.\n *\n * @param path The FS path of the file to open\n * @param mode mode flags\n * @param fi FileInfo data struct kept by FUSE\n * @return 0 on success. A negative value on error\n */\n", "@Override\n  public int create(String path, @mode_t long mode, FuseFileInfo fi) {\n    final AlluxioURI uri = mPathResolverCache.getUnchecked(path);\n    final int flags = fi.flags.get();\n    LOG.trace(\"create({}, {}) [Alluxio: {}]\", path, Integer.toHexString(flags), uri);\n\n    try {\n      if (mOpenFiles.size() >= MAX_OPEN_FILES) {\n        LOG.error(\"Cannot open {}: too many open files (MAX_OPEN_FILES: {})\", uri,\n            MAX_OPEN_FILES);\n        return -ErrorCodes.EMFILE();\n      }\n\n      FileOutStream os = mFileSystem.createFile(uri);\n      synchronized (mOpenFiles) {\n        mOpenFiles.add(new OpenFileEntry(mNextOpenFileId, path, null, os));\n        fi.fh.set(mNextOpenFileId);\n\n        // Assuming I will never wrap around (2^64 open files are quite a lot anyway)\n        mNextOpenFileId += 1;\n      }\n      LOG.debug(\"{} created and opened\", path);\n    } catch (FileAlreadyExistsException e) {\n      LOG.debug(\"File {} already exists\", uri, e);\n      return -ErrorCodes.EEXIST();\n    } catch (IOException e) {\n      LOG.error(\"IOException on  {}\", uri, e);\n      return -ErrorCodes.EIO();\n    } catch (AlluxioException e) {\n      LOG.error(\"AlluxioException on {}\", uri, e);\n      return -ErrorCodes.EFAULT();\n    } catch (Throwable e) {\n      LOG.error(\"Unexpected exception on {}\", path, e);\n      return -ErrorCodes.EFAULT();\n    }\n\n    return 0;\n  }", "/**\n * Creates and opens a new file.\n *\n * @param path The FS path of the file to open\n * @param mode mode flags\n * @param fi FileInfo data struct kept by FUSE\n * @return 0 on success. A negative value on error\n */\n"], "test_db": ["5ca3366aa99f5d254915caf7a53e3551779c3ef3", "Alluxio/alluxio", "/data/comment_repos/Alluxio@alluxio", "create", "/data/comment_repos/Alluxio@alluxio/integration/fuse/src/test/java/alluxio/fuse/AlluxioFuseFileSystemTest.java", "create", "  @Test\n  public void create() throws Exception {\n    mFileInfo.flags.set(O_WRONLY.intValue());\n    mFuseFs.create(\"/foo/bar\", 0, mFileInfo);\n    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(\"/foo/bar\");\n    verify(mFileSystem).createFile(expectedPath, CreateFilePOptions.newBuilder()\n        .setMode(new alluxio.security.authorization.Mode((short) 0).toProto())\n        .build());\n  }", "@Override\n  public int create(String path, @mode_t long mode, FuseFileInfo fi) {\n    // mode is ignored in alluxio-fuse\n    final AlluxioURI turi = mPathResolverCache.getUnchecked(path);\n    // (see {@code man 2 open} for the structure of the flags bitfield)\n    // File creation flags are the last two bits of flags\n    final int flags = fi.flags.get();\n    LOG.trace(\"create({}, {}) [Tachyon: {}]\", path, Integer.toHexString(flags), turi);\n    final int openFlag = flags & 3;\n    if (openFlag != O_WRONLY.intValue()) {\n      OpenFlags flag = OpenFlags.valueOf(openFlag);\n      LOG.error(\"Passed a {} flag to create(). Files can only be created in O_WRONLY mode ({})\",\n          flag.toString(), path);\n      return -ErrorCodes.EACCES();\n    }\n\n    try {\n      synchronized (mOpenFiles) {\n        if (mOpenFiles.size() >= MAX_OPEN_FILES) {\n          LOG.error(\"Cannot open {}: too many open files (MAX_OPEN_FILES: {})\",\n              turi, MAX_OPEN_FILES);\n          return -ErrorCodes.EMFILE();\n        }\n\n        final OpenFileEntry ofe = new OpenFileEntry(null, mFileSystem.createFile(turi));\n        LOG.debug(\"Tachyon OutStream created for {}\", path);\n        mOpenFiles.put(mNextOpenFileId, ofe);\n        fi.fh.set(mNextOpenFileId);\n\n        // Assuming I will never wrap around (2^64 open files are quite a lot anyway)\n        mNextOpenFileId += 1;\n      }\n      LOG.debug(\"{} created and opened in O_WRONLY mode\", path);\n\n    } catch (FileAlreadyExistsException e) {\n      LOG.debug(\"File {} already exists\", turi, e);\n      return -ErrorCodes.EEXIST();\n    } catch (IOException e) {\n      LOG.error(\"IOException on {}\", path, e);\n      return -ErrorCodes.EIO();\n    } catch (AlluxioException e) {\n      LOG.error(\"TachyonException on {}\", path, e);\n      return -ErrorCodes.EFAULT();\n    } catch (Throwable e) {\n      LOG.error(\"Unexpected exception on {}\", path, e);\n      return -ErrorCodes.EFAULT();\n    }\n\n    return 0;\n  }", "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "@Override\n  public int create(String path, @mode_t long mode, FuseFileInfo fi) {\n    // mode is ignored in alluxio-fuse\n    final AlluxioURI turi = mPathResolverCache.getUnchecked(path);\n    // (see {@code man 2 open} for the structure of the flags bitfield)\n    // File creation flags are the last two bits of flags\n    final int flags = fi.flags.get();\n    LOG.trace(\"create({}, {}) [Alluxio: {}]\", path, Integer.toHexString(flags), turi);\n    final int openFlag = flags & 3;\n    if (openFlag != O_WRONLY.intValue()) {\n      OpenFlags flag = OpenFlags.valueOf(openFlag);\n      LOG.error(\"Passed a {} flag to create(). Files can only be created in O_WRONLY mode ({})\",\n          flag.toString(), path);\n      return -ErrorCodes.EACCES();\n    }\n\n    try {\n      synchronized (mOpenFiles) {\n        if (mOpenFiles.size() >= MAX_OPEN_FILES) {\n          LOG.error(\"Cannot open {}: too many open files (MAX_OPEN_FILES: {})\",\n              turi, MAX_OPEN_FILES);\n          return -ErrorCodes.EMFILE();\n        }\n\n        final OpenFileEntry ofe = new OpenFileEntry(null, mFileSystem.createFile(turi));\n        LOG.debug(\"Alluxio OutStream created for {}\", path);\n        mOpenFiles.put(mNextOpenFileId, ofe);\n        fi.fh.set(mNextOpenFileId);\n\n        // Assuming I will never wrap around (2^64 open files are quite a lot anyway)\n        mNextOpenFileId += 1;\n      }\n      LOG.debug(\"{} created and opened in O_WRONLY mode\", path);\n\n    } catch (FileAlreadyExistsException e) {\n      LOG.debug(\"File {} already exists\", turi, e);\n      return -ErrorCodes.EEXIST();\n    } catch (IOException e) {\n      LOG.error(\"IOException on {}\", path, e);\n      return -ErrorCodes.EIO();\n    } catch (AlluxioException e) {\n      LOG.error(\"AlluxioException on {}\", path, e);\n      return -ErrorCodes.EFAULT();\n    } catch (Throwable e) {\n      LOG.error(\"Unexpected exception on {}\", path, e);\n      return -ErrorCodes.EFAULT();\n    }\n\n    return 0;\n  }", "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java"], "edit_seq": [["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["int", "int", "equal"], ["create", "create", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["path", "path", "equal"], [",", ",", "equal"], ["@", "@", "equal"], ["mode", "mode", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["t", "t", "equal"], ["long", "long", "equal"], ["mode", "mode", "equal"], [",", ",", "equal"], ["Fuse", "Fuse", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["fi", "fi", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["Alluxio", "Alluxio", "equal"], ["<con>", "<con>", "equal"], ["URI", "URI", "equal"], ["uri", "uri", "equal"], ["=", "=", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["<con>", "<con>", "equal"], ["Resolver", "Resolver", "equal"], ["<con>", "<con>", "equal"], ["Cache", "Cache", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Unchecked", "Unchecked", "equal"], ["(", "(", "equal"], ["path", "path", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["int", "int", "equal"], ["flags", "flags", "equal"], ["=", "=", "equal"], ["fi", "fi", "equal"], [".", ".", "equal"], ["flags", "flags", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["LOG", "LOG", "equal"], [".", ".", "equal"], ["trace", "trace", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["(", "(", "equal"], ["<con>", "<con>", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["<con>", "<con>", "equal"], [",", ",", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["<con>", "<con>", "equal"], [")", ")", "equal"], ["[", "[", "equal"], ["<con>", "<con>", "equal"], ["Alluxio", "Alluxio", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["<con>", "<con>", "equal"], ["]", "]", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["path", "path", "equal"], [",", ",", "equal"], ["Integer", "Integer", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Hex", "Hex", "equal"], ["<con>", "<con>", "equal"], ["String", "String", "equal"], ["(", "(", "equal"], ["flags", "flags", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["uri", "uri", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["try", "try", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Open", "Open", "equal"], ["<con>", "<con>", "equal"], ["Files", "Files", "equal"], [".", ".", "equal"], ["size", "size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [">=", ">=", "equal"], ["MAX", "MAX", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["OPEN", "OPEN", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["FILES", "FILES", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["LOG", "LOG", "equal"], [".", ".", "equal"], ["error", "error", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Can", "Can", "equal"], ["<con>", "<con>", "equal"], ["not", "not", "equal"], ["open", "open", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["too", "too", "equal"], ["many", "many", "equal"], ["open", "open", "equal"], ["files", "files", "equal"], ["(", "(", "equal"], ["<con>", "<con>", "equal"], ["MAX", "MAX", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["OPEN", "OPEN", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["FILES", "FILES", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["<con>", "<con>", "equal"], [")", ")", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["uri", "uri", "equal"], [",", ",", "equal"], ["MAX", "MAX", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["OPEN", "OPEN", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["FILES", "FILES", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["-", "-", "equal"], ["Error", "Error", "equal"], ["<con>", "<con>", "equal"], ["Codes", "Codes", "equal"], [".", ".", "equal"], ["EMFILE", "EMFILE", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["", "File", "insert"], ["", "<con>", "insert"], ["", "Out", "insert"], ["", "<con>", "insert"], ["", "Stream", "insert"], ["", "os", "insert"], ["", "=", "insert"], ["", "m", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", "<con>", "insert"], ["", "System", "insert"], ["", ".", "insert"], ["", "create", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", "(", "insert"], ["", "uri", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["synchronized", "synchronized", "equal"], ["(", "(", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Open", "Open", "equal"], ["<con>", "<con>", "equal"], ["Files", "Files", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Open", "Open", "equal"], ["<con>", "<con>", "equal"], ["Files", "Files", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Open", "Open", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Entry", "Entry", "equal"], ["(", "(", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Next", "Next", "equal"], ["<con>", "<con>", "equal"], ["Open", "Open", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [",", ",", "equal"], ["path", "path", "equal"], [",", ",", "equal"], ["null", "null", "equal"], [",", ",", "equal"], ["m", "", "delete"], ["<con>", "", "delete"], ["File", "", "delete"], ["<con>", "", "delete"], ["System", "os", "replace"], [".", "", "delete"], ["create", "", "delete"], ["<con>", "", "delete"], ["File", "", "delete"], ["(", "", "delete"], ["uri", "", "delete"], [")", "", "delete"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["fi", "fi", "equal"], [".", ".", "equal"], ["fh", "fh", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["(", "(", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Next", "Next", "equal"], ["<con>", "<con>", "equal"], ["Open", "Open", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Next", "Next", "equal"], ["<con>", "<con>", "equal"], ["Open", "Open", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["+=", "+=", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["LOG", "LOG", "equal"], [".", ".", "equal"], ["debug", "debug", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["created", "created", "equal"], ["and", "and", "equal"], ["opened", "opened", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["path", "path", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Already", "Already", "equal"], ["<con>", "<con>", "equal"], ["Exists", "Exists", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["e", "e", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["LOG", "LOG", "equal"], [".", ".", "equal"], ["debug", "debug", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["File", "File", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["already", "already", "equal"], ["exists", "exists", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["uri", "uri", "equal"], [",", ",", "equal"], ["e", "e", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["-", "-", "equal"], ["Error", "Error", "equal"], ["<con>", "<con>", "equal"], ["Codes", "Codes", "equal"], [".", ".", "equal"], ["EEXIST", "EEXIST", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["IO", "IO", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["e", "e", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["LOG", "LOG", "equal"], [".", ".", "equal"], ["error", "error", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["IO", "IO", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["on", "on", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["uri", "uri", "equal"], [",", ",", "equal"], ["e", "e", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["-", "-", "equal"], ["Error", "Error", "equal"], ["<con>", "<con>", "equal"], ["Codes", "Codes", "equal"], [".", ".", "equal"], ["EIO", "EIO", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["Alluxio", "Alluxio", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["e", "e", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["LOG", "LOG", "equal"], [".", ".", "equal"], ["error", "error", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Alluxio", "Alluxio", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["on", "on", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["uri", "uri", "equal"], [",", ",", "equal"], ["e", "e", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["-", "-", "equal"], ["Error", "Error", "equal"], ["<con>", "<con>", "equal"], ["Codes", "Codes", "equal"], [".", ".", "equal"], ["EFAULT", "EFAULT", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["Throwable", "Throwable", "equal"], ["e", "e", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["LOG", "LOG", "equal"], [".", ".", "equal"], ["error", "error", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Unexpected", "Unexpected", "equal"], ["exception", "exception", "equal"], ["on", "on", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["path", "path", "equal"], [",", ",", "equal"], ["e", "e", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["-", "-", "equal"], ["Error", "Error", "equal"], ["<con>", "<con>", "equal"], ["Codes", "Codes", "equal"], [".", ".", "equal"], ["EFAULT", "EFAULT", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["0", "0", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public final static void scale(ImageInputStream srcStream, ImageOutputStream destStream, int height, int width, Color fixedColor) { try { scale(ImageIO.read(srcStream), destStream, height, width, fixedColor); } catch(IOException e) { throw new UtilException(e); } } ", "focal_tgt": "public final static void scale(ImageInputStream srcStream, ImageOutputStream destStream, int width, int height, Color fixedColor) { try { scale(ImageIO.read(srcStream), destStream, width, height, fixedColor); } catch(IOException e) { throw new UtilException(e); } } ", "test_src": "@Test@Ignore public void scaleTest() { ImageUtil.scale(FileUtil.file(\"d:/face.jpg\"), FileUtil.file(\"d:/face_result.jpg\"), 0.5f); } ", "label": 0, "focal_db": [2653826, "looly/hutool", "/data/comment_repos/looly@hutool", "64340acae9255f3d80533066f96fc6610f1ef00e", "88094bfad847fb0a06be92a2aa3d8b75c25027a8", "hutool-core/src/main/java/com/xiaoleilu/hutool/util/ImageUtil.java", "52996547ebbbcd356018d67868d471cb2cc1d2cb", "hutool-core/src/main/java/com/xiaoleilu/hutool/util/ImageUtil.java", "public final static void scale(ImageInputStream srcStream, ImageOutputStream destStream, int height, int width, Color fixedColor) {\r\n\t\ttry {\r\n\t\t\tscale(ImageIO.read(srcStream), destStream, height, width, fixedColor);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new UtilException(e);\r\n\t\t}\r\n\t}", "/**\n * \u7f29\u653e\u56fe\u50cf\uff08\u6309\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u7f29\u653e\uff09<br>\n * \u7f29\u653e\u540e\u9ed8\u8ba4\u4e3ajpeg\u683c\u5f0f\n *\n * @param srcStream \u6e90\u56fe\u50cf\u6d41\n * @param destStream \u7f29\u653e\u540e\u7684\u56fe\u50cf\u76ee\u6807\u6d41\n * @param height \u7f29\u653e\u540e\u7684\u9ad8\u5ea6\n * @param width \u7f29\u653e\u540e\u7684\u5bbd\u5ea6\n * @param fixedColor \u6bd4\u4f8b\u4e0d\u5bf9\u65f6\u8865\u5145\u7684\u989c\u8272\uff0c\u4e0d\u8865\u5145\u4e3a<code>null</code>\n */\n", "public final static void scale(ImageInputStream srcStream, ImageOutputStream destStream, int width, int height, Color fixedColor) {\r\n\t\ttry {\r\n\t\t\tscale(ImageIO.read(srcStream), destStream, width, height, fixedColor);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new UtilException(e);\r\n\t\t}\r\n\t}", "/**\n * \u7f29\u653e\u56fe\u50cf\uff08\u6309\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u7f29\u653e\uff09<br>\n * \u7f29\u653e\u540e\u9ed8\u8ba4\u4e3ajpeg\u683c\u5f0f\n *\n * @param srcStream \u6e90\u56fe\u50cf\u6d41\n * @param destStream \u7f29\u653e\u540e\u7684\u56fe\u50cf\u76ee\u6807\u6d41\n * @param width \u7f29\u653e\u540e\u7684\u5bbd\u5ea6\n * @param height \u7f29\u653e\u540e\u7684\u9ad8\u5ea6\n * @param fixedColor \u6bd4\u4f8b\u4e0d\u5bf9\u65f6\u8865\u5145\u7684\u989c\u8272\uff0c\u4e0d\u8865\u5145\u4e3a<code>null</code>\n */\n"], "test_db": ["083a3bedd22033ea31d060f16040d558b7946ecc", "looly/hutool", "/data/comment_repos/looly@hutool", "scale", "/data/comment_repos/looly@hutool/hutool-core/src/test/java/cn/hutool/core/util/ImageUtilTest.java", "scaleTest", "\t@Test\n\t@Ignore\n\tpublic void scaleTest() {\n\t\tImageUtil.scale(FileUtil.file(\"d:/face.jpg\"), FileUtil.file(\"d:/face_result.jpg\"), 0.5f);\n\t}", "public final static void scale(File srcImageFile, File destImageFile, int height, int width, Color fixedColor) {\r\n\t\ttry {\r\n\t\t\tdouble ratio = 0.0; // \u7f29\u653e\u6bd4\u4f8b\r\n\t\t\tBufferedImage bi = ImageIO.read(srcImageFile);\r\n\t\t\tImage itemp = bi.getScaledInstance(width, height, BufferedImage.SCALE_SMOOTH);\r\n\t\t\t// \u8ba1\u7b97\u6bd4\u4f8b\r\n\t\t\tif ((bi.getHeight() > height) || (bi.getWidth() > width)) {\r\n\t\t\t\tif (bi.getHeight() > bi.getWidth()) {\r\n\t\t\t\t\tratio = (new Integer(height)).doubleValue() / bi.getHeight();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tratio = (new Integer(width)).doubleValue() / bi.getWidth();\r\n\t\t\t\t}\r\n\t\t\t\tAffineTransformOp op = new AffineTransformOp(AffineTransform.getScaleInstance(ratio, ratio), null);\r\n\t\t\t\titemp = op.filter(bi, null);\r\n\t\t\t}\r\n\t\t\tif (null != fixedColor) {// \u8865\u767d\r\n\t\t\t\tBufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\r\n\t\t\t\tGraphics2D g = image.createGraphics();\r\n\t\t\t\tg.setColor(fixedColor);\r\n\t\t\t\tg.fillRect(0, 0, width, height);\r\n\t\t\t\tif (width == itemp.getWidth(null))\r\n\t\t\t\t\tg.drawImage(itemp, 0, (height - itemp.getHeight(null)) / 2, itemp.getWidth(null), itemp.getHeight(null), fixedColor, null);\r\n\t\t\t\telse\r\n\t\t\t\t\tg.drawImage(itemp, (width - itemp.getWidth(null)) / 2, 0, itemp.getWidth(null), itemp.getHeight(null), fixedColor, null);\r\n\t\t\t\tg.dispose();\r\n\t\t\t\titemp = image;\r\n\t\t\t}\r\n\t\t\tImageIO.write((BufferedImage) itemp, IMAGE_TYPE_JPEG, destImageFile);\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}", "hutool-core/src/main/java/com/xiaoleilu/hutool/util/ImageUtil.java", "public final static void scale(File srcImageFile, File destImageFile, int height, int width, Color fixedColor) {\r\n\t\ttry {\r\n\t\t\tdouble ratio = 0.0; // \u7f29\u653e\u6bd4\u4f8b\r\n\t\t\tBufferedImage bi = ImageIO.read(srcImageFile);\r\n\t\t\tImage itemp = bi.getScaledInstance(width, height, BufferedImage.SCALE_SMOOTH);\r\n\t\t\t// \u8ba1\u7b97\u6bd4\u4f8b\r\n\t\t\tif ((bi.getHeight() > height) || (bi.getWidth() > width)) {\r\n\t\t\t\tif (bi.getHeight() > bi.getWidth()) {\r\n\t\t\t\t\tratio = (new Integer(height)).doubleValue() / bi.getHeight();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tratio = (new Integer(width)).doubleValue() / bi.getWidth();\r\n\t\t\t\t}\r\n\t\t\t\tAffineTransformOp op = new AffineTransformOp(AffineTransform.getScaleInstance(ratio, ratio), null);\r\n\t\t\t\titemp = op.filter(bi, null);\r\n\t\t\t}\r\n\t\t\tif (null != fixedColor) {// \u8865\u767d\r\n\t\t\t\tBufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\r\n\t\t\t\tGraphics2D g = image.createGraphics();\r\n\t\t\t\tg.setColor(fixedColor);\r\n\t\t\t\tg.fillRect(0, 0, width, height);\r\n\t\t\t\tif (width == itemp.getWidth(null))\r\n\t\t\t\t\tg.drawImage(itemp, 0, (height - itemp.getHeight(null)) / 2, itemp.getWidth(null), itemp.getHeight(null), fixedColor, null);\r\n\t\t\t\telse\r\n\t\t\t\t\tg.drawImage(itemp, (width - itemp.getWidth(null)) / 2, 0, itemp.getWidth(null), itemp.getHeight(null), fixedColor, null);\r\n\t\t\t\tg.dispose();\r\n\t\t\t\titemp = image;\r\n\t\t\t}\r\n\t\t\tImageIO.write((BufferedImage) itemp, IMAGE_TYPE_JPEG, destImageFile);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new IORuntimeException(e);\r\n\t\t}\r\n\t}", "hutool-core/src/main/java/com/xiaoleilu/hutool/util/ImageUtil.java"], "edit_seq": [["public", "public", "equal"], ["final", "final", "equal"], ["static", "static", "equal"], ["void", "void", "equal"], ["scale", "scale", "equal"], ["(", "(", "equal"], ["Image", "Image", "equal"], ["<con>", "<con>", "equal"], ["Input", "Input", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], ["src", "src", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], [",", ",", "equal"], ["Image", "Image", "equal"], ["<con>", "<con>", "equal"], ["Output", "Output", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], ["dest", "dest", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], [",", ",", "equal"], ["int", "int", "equal"], ["height", "width", "replace"], [",", ",", "equal"], ["int", "int", "equal"], ["width", "height", "replace"], [",", ",", "equal"], ["Color", "Color", "equal"], ["fixed", "fixed", "equal"], ["<con>", "<con>", "equal"], ["Color", "Color", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["try", "try", "equal"], ["{", "{", "equal"], ["scale", "scale", "equal"], ["(", "(", "equal"], ["Image", "Image", "equal"], ["<con>", "<con>", "equal"], ["IO", "IO", "equal"], [".", ".", "equal"], ["read", "read", "equal"], ["(", "(", "equal"], ["src", "src", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["dest", "dest", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], [",", ",", "equal"], ["", "width", "insert"], ["", ",", "insert"], ["height", "height", "equal"], [",", "", "delete"], ["width", "", "delete"], [",", ",", "equal"], ["fixed", "fixed", "equal"], ["<con>", "<con>", "equal"], ["Color", "Color", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["IO", "IO", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["e", "e", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Util", "Util", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["e", "e", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static Array < Byte > ofAll(byte[]array) { Objects.requireNonNull(array, \"array is null\"); return Array.ofAll(() -> Iterator.ofAll(array)); } ", "focal_tgt": "public static Array < Byte > ofAll(byte[]array) { Objects.requireNonNull(array, \"array is null\"); return Array.ofAll(Iterator.ofAll(array)); } ", "test_src": "@Override protected < T > Array < T > ofAll(Iterable < ? extends T > elements) { return Array.ofAll(elements); } ", "label": 0, "focal_db": [3811697, "vavr-io/vavr", "/data/comment_repos/vavr-io@vavr", "d933da3109c0677d07bf5f94d7964e2e08f71182", "aaa135842c0be2349cef889fcc9338492b8788f2", "src/main/java/javaslang/collection/Array.java", "4ddb3cf3f1293988135a4c27fa785639f1a9d624", "src/main/java/javaslang/collection/Array.java", "public static Array<Byte> ofAll(byte[] array) {\n        Objects.requireNonNull(array, \"array is null\");\n        return Array.ofAll(() -> Iterator.ofAll(array));\n    }", "/**\n * Creates a Array based on the elements of a byte array.\n *\n * @param array a byte array\n * @return A new Array of Byte values\n */\n", "public static Array<Byte> ofAll(byte[] array) {\n        Objects.requireNonNull(array, \"array is null\");\n        return Array.ofAll(Iterator.ofAll(array));\n    }", "/**\n * Creates a Array based on the elements of a byte array.\n *\n * @param array a byte array\n * @return A new Array of Byte values\n */\n"], "test_db": ["d933da3109c0677d07bf5f94d7964e2e08f71182", "vavr-io/vavr", "/data/comment_repos/vavr-io@vavr", "ofAll", "/data/comment_repos/vavr-io@vavr/src/test/java/io/vavr/collection/ArrayTest.java", "ofAll", "    @Override\n    protected <T> Array<T> ofAll(Iterable<? extends T> elements) {\n        return Array.ofAll(elements);\n    }", "public static Array<Character> ofAll(char[] array) {\n        Objects.requireNonNull(array, \"array is null\");\n        return Array.ofAll(() -> Iterator.ofAll(array));\n    }", "src/main/java/javaslang/collection/Array.java", "public static Array<Character> ofAll(char[] array) {\n        Objects.requireNonNull(array, \"array is null\");\n        return Array.ofAll(Iterator.ofAll(array));\n    }", "src/main/java/javaslang/collection/Array.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["Array", "Array", "equal"], ["<", "<", "equal"], ["Byte", "Byte", "equal"], [">", ">", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["(", "(", "equal"], ["byte", "byte", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["array", "array", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Objects", "Objects", "equal"], [".", ".", "equal"], ["require", "require", "equal"], ["<con>", "<con>", "equal"], ["Non", "Non", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["(", "(", "equal"], ["array", "array", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["array", "array", "equal"], ["is", "is", "equal"], ["null", "null", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["Array", "Array", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["(", "(", "equal"], ["(", "", "delete"], [")", "", "delete"], ["->", "", "delete"], ["Iterator", "Iterator", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["(", "(", "equal"], ["array", "array", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public ConsulResponse < Map < String, List < String > > > getServices(@SuppressWarnings(\"SameParameterValue\")final String datacenter, @SuppressWarnings(\"SameParameterValue\")final String tag, final RequestOptions requestOptions) { final String path = rootPath + \"/services\"; final HttpRequestBuilder httpRequestBuilder = RequestUtils.getHttpRequestBuilder(datacenter, tag, requestOptions, path); final HttpResponse httpResponse = httpClient.sendRequestAndWait(httpRequestBuilder.build()); if(httpResponse.code() != 200) { die(\"Unable to retrieve the datacenters\", path, httpResponse.code(), httpResponse.body()); } return(ConsulResponse < Map < String, List < String > > > )(Object)RequestUtils.consulResponse(Map.class, httpResponse); } ", "focal_tgt": "public ConsulResponse < Map < String, List < String > > > getServices(@SuppressWarnings(\"SameParameterValue\")final String datacenter, @SuppressWarnings(\"SameParameterValue\")final String tag, final RequestOptions requestOptions) { final URI uri = createURI(\"/services\"); final HttpRequestBuilder httpRequestBuilder = RequestUtils.getHttpRequestBuilder(datacenter, tag, requestOptions, \"/\"); HTTP.Response httpResponse = HTTP.getResponse(uri.toString() + \"?\" + httpRequestBuilder.paramString()); if(httpResponse.code() != 200) { die(\"Unable to retrieve the datacenters\", uri, httpResponse.code(), httpResponse.body()); } return(ConsulResponse < Map < String, List < String > > > )(Object)RequestUtils.consulResponse(Map.class, httpResponse); } ", "test_src": "@Test public void getServices()throws Exception { Consul client = Consul.consul(); CatalogEndpoint catalogClient = client.catalog(); ConsulResponse < Map < String, List < String > > > services = catalogClient.getServices(); assertTrue(services.getResponse().containsKey(\"consul\")); } ", "label": 0, "focal_db": [76378, "advantageous/qbit", "/data/comment_repos/advantageous@qbit", "f67d9e5e38649c6d37855c7303a01d2053a71629", "a4366c6b723a85e227a08c11a9e1807378ba642b", "qbit/cluster/consul-client/src/main/java/io/advantageous/consul/endpoints/CatalogEndpoint.java", "09f449fd291a4f3f7a34190d39dee5555975cf20", "qbit/cluster/consul-client/src/main/java/io/advantageous/consul/endpoints/CatalogEndpoint.java", "public ConsulResponse<Map<String, List<String>>> getServices(\n            @SuppressWarnings(\"SameParameterValue\") final String datacenter, @SuppressWarnings(\"SameParameterValue\") final String tag,\n            final RequestOptions requestOptions) {\n\n\n        final String path = rootPath + \"/services\";\n\n\n        final HttpRequestBuilder httpRequestBuilder = RequestUtils.getHttpRequestBuilder(datacenter, tag, requestOptions, path);\n\n\n        final HttpResponse httpResponse = httpClient.sendRequestAndWait(httpRequestBuilder.build());\n        if (httpResponse.code() != 200) {\n            die(\"Unable to retrieve the datacenters\", path, httpResponse.code(), httpResponse.body());\n        }\n\n        //noinspection unchecked\n        return (ConsulResponse<Map<String, List<String>>>) (Object) RequestUtils.consulResponse(Map.class, httpResponse);\n\n    }", "/**\n * Retrieves all services for a given datacenter with {@link io.advantageous.consul.domain.option.RequestOptions}.\n * <p>\n * GET /v1/catalog/services?dc={datacenter}\n *\n * @param datacenter     datacenter\n * @param tag            tag\n * @param requestOptions The Query Options to use.\n * @return A {@link io.advantageous.consul.domain.ConsulResponse} containing a map of service name to list of tags.\n */\n", "public ConsulResponse<Map<String, List<String>>> getServices(\n            @SuppressWarnings(\"SameParameterValue\") final String datacenter, @SuppressWarnings(\"SameParameterValue\") final String tag,\n            final RequestOptions requestOptions) {\n\n\n\n\n        final URI uri = createURI(\"/services\");\n\n\n\n        final HttpRequestBuilder httpRequestBuilder = RequestUtils.getHttpRequestBuilder(datacenter, tag, requestOptions, \"/\");\n\n\n\n        HTTP.Response httpResponse = HTTP.getResponse(uri.toString() + \"?\" +  httpRequestBuilder.paramString());\n\n        if (httpResponse.code() != 200) {\n            die(\"Unable to retrieve the datacenters\", uri, httpResponse.code(), httpResponse.body());\n        }\n\n        //noinspection unchecked\n        return (ConsulResponse<Map<String, List<String>>>) (Object) RequestUtils.consulResponse(Map.class, httpResponse);\n\n    }", "/**\n * Retrieves all services for a given datacenter with {@link io.advantageous.consul.domain.option.RequestOptions}.\n * <p>\n * GET /v1/catalog/services?dc={datacenter}\n *\n * @param datacenter     datacenter\n * @param tag            tag\n * @param requestOptions The Query Options to use.\n * @return A {@link io.advantageous.consul.domain.ConsulResponse} containing a map of service name to list of tags.\n */\n"], "test_db": ["37a7c463a96d0001fa5f520f4f4a5c6e388309b4", "advantageous/qbit", "/data/comment_repos/advantageous@qbit", "getServices", "/data/comment_repos/advantageous@qbit/qbit/consul-client/src/test/java/io/advantageous/consul/CatalogEndpointTest.java", "getServices", "    @Test\n    public void getServices() throws Exception {\n        Consul client = Consul.consul();\n        CatalogEndpoint catalogClient = client.catalog();\n        ConsulResponse<Map<String, List<String>>> services = catalogClient.getServices();\n\n        assertTrue(services.getResponse().containsKey(\"consul\"));\n    }", "public ConsulResponse<Map<String, List<String>>> getServices(\n                                    final String datacenter, final String tag,\n                                    final RequestOptions requestOptions) {\n\n\n\n        final String path = rootPath + \"/services\";\n\n\n        final HttpRequestBuilder httpRequestBuilder = RequestUtils.getHttpRequestBuilder(datacenter, tag, requestOptions, path);\n\n\n        final HttpResponse httpResponse = httpClient.sendRequestAndWait(httpRequestBuilder.build());\n        if (httpResponse.code()!=200) {\n            die(\"Unable to retrieve the datacenters\", path, httpResponse.code(), httpResponse.body());\n        }\n\n        //noinspection unchecked\n        return (ConsulResponse<Map<String, List<String>>>)(Object) RequestUtils.consulResponse(Map.class, httpResponse);\n\n    }", "qbit/cluster/consul-client/src/main/java/io/advantageous/consul/endpoints/CatalogEndpoint.java", "public ConsulResponse<Map<String, List<String>>> getServices(\n            @SuppressWarnings(\"SameParameterValue\") final String datacenter, @SuppressWarnings(\"SameParameterValue\") final String tag,\n            final RequestOptions requestOptions) {\n\n\n        final String path = rootPath + \"/services\";\n\n\n        final HttpRequestBuilder httpRequestBuilder = RequestUtils.getHttpRequestBuilder(datacenter, tag, requestOptions, path);\n\n\n        final HttpResponse httpResponse = httpClient.sendRequestAndWait(httpRequestBuilder.build());\n        if (httpResponse.code() != 200) {\n            die(\"Unable to retrieve the datacenters\", path, httpResponse.code(), httpResponse.body());\n        }\n\n        //noinspection unchecked\n        return (ConsulResponse<Map<String, List<String>>>) (Object) RequestUtils.consulResponse(Map.class, httpResponse);\n\n    }", "qbit/cluster/consul-client/src/main/java/io/advantageous/consul/endpoints/CatalogEndpoint.java"], "edit_seq": [["public", "public", "equal"], ["Consul", "Consul", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["<", "<", "equal"], ["Map", "Map", "equal"], ["<", "<", "equal"], ["String", "String", "equal"], [",", ",", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["String", "String", "equal"], [">", ">", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Services", "Services", "equal"], ["(", "(", "equal"], ["@", "@", "equal"], ["Suppress", "Suppress", "equal"], ["<con>", "<con>", "equal"], ["Warnings", "Warnings", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Same", "Same", "equal"], ["<con>", "<con>", "equal"], ["Parameter", "Parameter", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["final", "final", "equal"], ["String", "String", "equal"], ["datacenter", "datacenter", "equal"], [",", ",", "equal"], ["@", "@", "equal"], ["Suppress", "Suppress", "equal"], ["<con>", "<con>", "equal"], ["Warnings", "Warnings", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Same", "Same", "equal"], ["<con>", "<con>", "equal"], ["Parameter", "Parameter", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["final", "final", "equal"], ["String", "String", "equal"], ["tag", "tag", "equal"], [",", ",", "equal"], ["final", "final", "equal"], ["Request", "Request", "equal"], ["<con>", "<con>", "equal"], ["Options", "Options", "equal"], ["request", "request", "equal"], ["<con>", "<con>", "equal"], ["Options", "Options", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["String", "URI", "replace"], ["path", "uri", "replace"], ["=", "=", "equal"], ["root", "create", "replace"], ["<con>", "<con>", "equal"], ["Path", "URI", "replace"], ["+", "(", "replace"], ["\"", "\"", "equal"], ["/", "/", "equal"], ["<con>", "<con>", "equal"], ["services", "services", "equal"], ["\"", "\"", "equal"], ["", ")", "insert"], [";", ";", "equal"], ["final", "final", "equal"], ["Http", "Http", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["http", "http", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["=", "=", "equal"], ["Request", "Request", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Http", "Http", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["(", "(", "equal"], ["datacenter", "datacenter", "equal"], [",", ",", "equal"], ["tag", "tag", "equal"], [",", ",", "equal"], ["request", "request", "equal"], ["<con>", "<con>", "equal"], ["Options", "Options", "equal"], [",", ",", "equal"], ["path", "\"", "replace"], ["", "/", "insert"], ["", "\"", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["", "HTTP", "insert"], ["final", ".", "replace"], ["Http", "", "delete"], ["<con>", "", "delete"], ["Response", "Response", "equal"], ["http", "http", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["=", "=", "equal"], ["http", "HTTP", "replace"], ["<con>", "", "delete"], ["Client", "", "delete"], [".", ".", "equal"], ["send", "get", "replace"], ["<con>", "<con>", "equal"], ["Request", "Response", "replace"], ["<con>", "", "delete"], ["And", "", "delete"], ["<con>", "", "delete"], ["Wait", "", "delete"], ["(", "(", "equal"], ["", "uri", "insert"], ["", ".", "insert"], ["", "to", "insert"], ["", "<con>", "insert"], ["", "String", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "+", "insert"], ["", "\"", "insert"], ["", "?", "insert"], ["", "\"", "insert"], ["", "+", "insert"], ["http", "http", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], [".", ".", "equal"], ["", "param", "insert"], ["", "<con>", "insert"], ["build", "String", "replace"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["http", "http", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], [".", ".", "equal"], ["code", "code", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["!=", "!=", "equal"], ["200", "200", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["die", "die", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Unable", "Unable", "equal"], ["to", "to", "equal"], ["retrieve", "retrieve", "equal"], ["the", "the", "equal"], ["datacenters", "datacenters", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["path", "uri", "replace"], [",", ",", "equal"], ["http", "http", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], [".", ".", "equal"], ["code", "code", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["http", "http", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], [".", ".", "equal"], ["body", "body", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["(", "(", "equal"], ["Consul", "Consul", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["<", "<", "equal"], ["Map", "Map", "equal"], ["<", "<", "equal"], ["String", "String", "equal"], [",", ",", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["String", "String", "equal"], [">", ">", "equal"], [">", ">", "equal"], [">", ">", "equal"], [")", ")", "equal"], ["(", "(", "equal"], ["Object", "Object", "equal"], [")", ")", "equal"], ["Request", "Request", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["consul", "consul", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["Map", "Map", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [",", ",", "equal"], ["http", "http", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static void init(Application app) { if(mApplication != null) { throw new IllegalStateException(\"ACRA#init called more than once\"); } mApplication = app; mReportsCrashes = mApplication.getClass().getAnnotation(ReportsCrashes.class); if(mReportsCrashes == null) { Log.e(LOG_TAG, \"ACRA#init called but no ReportsCrashes annotation on Application \" + mApplication.getPackageName()); return; } final SharedPreferences prefs = getACRASharedPreferences(); Log.d(ACRA.LOG_TAG, \"Set OnSharedPreferenceChangeListener.\"); try { checkCrashResources(); Log.d(LOG_TAG, \"ACRA is enabled for \" + mApplication.getPackageName() + \", intializing...\"); final boolean enableAcra = ! shouldDisableACRA(prefs); final ErrorReporter errorReporter = new ErrorReporter(mApplication.getApplicationContext(), enableAcra); addReportSenders(errorReporter); errorReporterSingleton = errorReporter; } catch(ACRAConfigurationException e) { Log.w(LOG_TAG, \"Error : \", e); } mPrefListener = new OnSharedPreferenceChangeListener() { @Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) { if(PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) { final boolean enableAcra = ! shouldDisableACRA(sharedPreferences); getErrorReporter().setEnabled(enableAcra); } } }; prefs.registerOnSharedPreferenceChangeListener(mPrefListener); } ", "focal_tgt": "public static void init(Application app) { if(mApplication != null) { throw new IllegalStateException(\"ACRA#init called more than once\"); } mApplication = app; mReportsCrashes = mApplication.getClass().getAnnotation(ReportsCrashes.class); if(mReportsCrashes == null) { Log.e(LOG_TAG, \"ACRA#init called but no ReportsCrashes annotation on Application \" + mApplication.getPackageName()); return; } final SharedPreferences prefs = getACRASharedPreferences(); Log.d(ACRA.LOG_TAG, \"Set OnSharedPreferenceChangeListener.\"); try { checkCrashResources(); Log.d(LOG_TAG, \"ACRA is enabled for \" + mApplication.getPackageName() + \", intializing...\"); final boolean enableAcra = ! shouldDisableACRA(prefs); final ErrorReporter errorReporter = new ErrorReporter(mApplication.getApplicationContext(), prefs, enableAcra); addReportSenders(errorReporter); errorReporterSingleton = errorReporter; } catch(ACRAConfigurationException e) { Log.w(LOG_TAG, \"Error : \", e); } mPrefListener = new OnSharedPreferenceChangeListener() { @Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) { if(PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) { final boolean enableAcra = ! shouldDisableACRA(sharedPreferences); getErrorReporter().setEnabled(enableAcra); } } }; prefs.registerOnSharedPreferenceChangeListener(mPrefListener); } ", "test_src": "@Test public void init() { Application application = ApplicationProvider.getApplicationContext(); CoreConfigurationBuilder builder = new CoreConfigurationBuilder(application).setPluginLoader(new SimplePluginLoader(StacktraceCollector.class, TestAdministrator.class)); ACRA.init(application, builder); ACRA.getErrorReporter().handleException(new RuntimeException()); } ", "label": 0, "focal_db": [9033, "ACRA/acra", "/data/comment_repos/ACRA@acra", "d5088c02558e8775d59e0e3694b032e068d3b602", "6761a0d2ed1cf4dcae8a6c9783a5a582ab805090", "acra/src/main/java/org/acra/ACRA.java", "8c1a2a413aded41efd78d82a2219f1d9ebc0955b", "acra/src/main/java/org/acra/ACRA.java", "public static void init(Application app) {\r\n\r\n        if (mApplication != null) {\r\n            throw new IllegalStateException(\"ACRA#init called more than once\");\r\n        }\r\n\r\n        mApplication = app;\r\n        mReportsCrashes = mApplication.getClass().getAnnotation(ReportsCrashes.class);\r\n        if (mReportsCrashes == null) {\r\n            Log.e(LOG_TAG, \"ACRA#init called but no ReportsCrashes annotation on Application \" + mApplication.getPackageName());\r\n            return;\r\n        }\r\n\r\n        final SharedPreferences prefs = getACRASharedPreferences();\r\n        Log.d(ACRA.LOG_TAG, \"Set OnSharedPreferenceChangeListener.\");\r\n\r\n        try {\r\n            checkCrashResources();\r\n\r\n            Log.d(LOG_TAG, \"ACRA is enabled for \" + mApplication.getPackageName() + \", intializing...\");\r\n\r\n            // Initialize ErrorReporter with all required data\r\n            final boolean enableAcra = !shouldDisableACRA(prefs);\r\n            final ErrorReporter errorReporter = new ErrorReporter(mApplication.getApplicationContext(), enableAcra);\r\n\r\n            // Append ReportSenders.\r\n            addReportSenders(errorReporter);\r\n\r\n            errorReporterSingleton = errorReporter;\r\n\r\n        } catch (ACRAConfigurationException e) {\r\n            Log.w(LOG_TAG, \"Error : \", e);\r\n        }\r\n\r\n        // We HAVE to keep a reference otherwise the listener could be garbage collected:\r\n        // http://stackoverflow.com/questions/2542938/sharedpreferences-onsharedpreferencechangelistener-not-being-called-consistently/3104265#3104265\r\n        mPrefListener = new OnSharedPreferenceChangeListener() {\r\n\r\n            @Override\r\n            public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n                if (PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) {\r\n                    final boolean enableAcra = !shouldDisableACRA(sharedPreferences);\r\n                    getErrorReporter().setEnabled(enableAcra);\r\n                }\r\n            }\r\n        };\r\n\r\n        // This listener has to be set after initAcra is called to avoid a\r\n        // NPE in ErrorReporter.disable() because\r\n        // the context could be null at this moment.\r\n        prefs.registerOnSharedPreferenceChangeListener(mPrefListener);\r\n    }", "/**\n * <p>\n * Initialize ACRA for a given Application. The call to this method should\n * be placed as soon as possible in the {@link Application#onCreate()}\n * method.\n * </p>\n *\n * @param app   Your Application class.\n * @throws IllegalStateException if it is called more than once.\n */\n", "public static void init(Application app) {\r\n\r\n        if (mApplication != null) {\r\n            throw new IllegalStateException(\"ACRA#init called more than once\");\r\n        }\r\n\r\n        mApplication = app;\r\n        mReportsCrashes = mApplication.getClass().getAnnotation(ReportsCrashes.class);\r\n        if (mReportsCrashes == null) {\r\n            Log.e(LOG_TAG, \"ACRA#init called but no ReportsCrashes annotation on Application \" + mApplication.getPackageName());\r\n            return;\r\n        }\r\n\r\n        final SharedPreferences prefs = getACRASharedPreferences();\r\n        Log.d(ACRA.LOG_TAG, \"Set OnSharedPreferenceChangeListener.\");\r\n\r\n        try {\r\n            checkCrashResources();\r\n\r\n            Log.d(LOG_TAG, \"ACRA is enabled for \" + mApplication.getPackageName() + \", intializing...\");\r\n\r\n            // Initialize ErrorReporter with all required data\r\n            final boolean enableAcra = !shouldDisableACRA(prefs);\r\n            final ErrorReporter errorReporter = new ErrorReporter(mApplication.getApplicationContext(), prefs, enableAcra);\r\n\r\n            // Append ReportSenders.\r\n            addReportSenders(errorReporter);\r\n\r\n            errorReporterSingleton = errorReporter;\r\n\r\n        } catch (ACRAConfigurationException e) {\r\n            Log.w(LOG_TAG, \"Error : \", e);\r\n        }\r\n\r\n        // We HAVE to keep a reference otherwise the listener could be garbage collected:\r\n        // http://stackoverflow.com/questions/2542938/sharedpreferences-onsharedpreferencechangelistener-not-being-called-consistently/3104265#3104265\r\n        mPrefListener = new OnSharedPreferenceChangeListener() {\r\n\r\n            @Override\r\n            public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n                if (PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) {\r\n                    final boolean enableAcra = !shouldDisableACRA(sharedPreferences);\r\n                    getErrorReporter().setEnabled(enableAcra);\r\n                }\r\n            }\r\n        };\r\n\r\n        // This listener has to be set after initAcra is called to avoid a\r\n        // NPE in ErrorReporter.disable() because\r\n        // the context could be null at this moment.\r\n        prefs.registerOnSharedPreferenceChangeListener(mPrefListener);\r\n    }", "/**\n * <p>\n * Initialize ACRA for a given Application. The call to this method should\n * be placed as soon as possible in the {@link Application#onCreate()}\n * method.\n * </p>\n *\n * @param app   Your Application class.\n * @throws IllegalStateException if it is called more than once.\n */\n"], "test_db": ["3cc1eaed0c5903d1ff0a05387952131dfe388c6d", "ACRA/acra", "/data/comment_repos/ACRA@acra", "init", "/data/comment_repos/ACRA@acra/acra-core/src/test/java/org/acra/ACRATest.java", "init", "    @Test\n    public void init() {\n        Application application = ApplicationProvider.getApplicationContext();\n        CoreConfigurationBuilder builder = new CoreConfigurationBuilder(application).setPluginLoader(new SimplePluginLoader(StacktraceCollector.class, TestAdministrator.class));\n        ACRA.init(application, builder);\n        ACRA.getErrorReporter().handleException(new RuntimeException());\n    }", "public static void init(Application app) {\r\n        mApplication = app;\r\n        mReportsCrashes = mApplication.getClass().getAnnotation(ReportsCrashes.class);\r\n        if (mReportsCrashes != null) {\r\n\r\n            SharedPreferences prefs = getACRASharedPreferences();\r\n            prefs.registerOnSharedPreferenceChangeListener(new OnSharedPreferenceChangeListener() {\r\n\r\n                @Override\r\n                public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n                    if (PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) {\r\n                        Boolean disableAcra = false;\r\n                        try {\r\n                            disableAcra = sharedPreferences.getBoolean(PREF_DISABLE_ACRA,\r\n                                    !sharedPreferences.getBoolean(PREF_ENABLE_ACRA, true));\r\n                        } catch (Exception e) {\r\n                            // In case of a ClassCastException\r\n                        }\r\n                        if (disableAcra) {\r\n                            ErrorReporter.getInstance().disable();\r\n                        } else {\r\n                            try {\r\n                                initAcra();\r\n                            } catch (ACRAConfigurationException e) {\r\n                                Log.w(LOG_TAG, \"Error : \", e);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            // If the application default shared preferences contains true for\r\n            // the\r\n            // key \"acra.disable\", do not activate ACRA. Also checks the\r\n            // alternative\r\n            // opposite setting \"acra.enable\" if \"acra.disable\" is not found.\r\n            boolean disableAcra = false;\r\n            try {\r\n                disableAcra = prefs.getBoolean(PREF_DISABLE_ACRA, !prefs.getBoolean(PREF_ENABLE_ACRA, true));\r\n            } catch (Exception e) {\r\n                // In case of a ClassCastException\r\n            }\r\n\r\n            if (disableAcra) {\r\n                Log.d(LOG_TAG, \"ACRA is disabled for \" + mApplication.getPackageName() + \".\");\r\n                return;\r\n            } else {\r\n                try {\r\n                    initAcra();\r\n                } catch (ACRAConfigurationException e) {\r\n                    Log.w(LOG_TAG, \"Error : \", e);\r\n                }\r\n            }\r\n\r\n        }\r\n    }", "CrashReport/src/org/acra/ACRA.java", "public static void init(Application app) {\r\n        mApplication = app;\r\n        mReportsCrashes = mApplication.getClass().getAnnotation(ReportsCrashes.class);\r\n        if (mReportsCrashes != null) {\r\n\r\n            SharedPreferences prefs = getACRASharedPreferences();\r\n            Log.d(ACRA.LOG_TAG, \"Set OnSharedPreferenceChangeListener.\");\r\n            // We HAVE to keep a reference otrherwise the listener could be\r\n            // garbage collected:\r\n            // http://stackoverflow.com/questions/2542938/sharedpreferences-onsharedpreferencechangelistener-not-being-called-consistently/3104265#3104265\r\n            mPrefListener = new OnSharedPreferenceChangeListener() {\r\n\r\n                @Override\r\n                public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n                    Log.d(ACRA.LOG_TAG, \"Preferences changed, check if ACRA configuration must change.\");\r\n                    if (PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) {\r\n                        Boolean disableAcra = false;\r\n                        try {\r\n                            disableAcra = sharedPreferences.getBoolean(PREF_DISABLE_ACRA,\r\n                                    !sharedPreferences.getBoolean(PREF_ENABLE_ACRA, true));\r\n                        } catch (Exception e) {\r\n                            // In case of a ClassCastException\r\n                        }\r\n                        if (disableAcra) {\r\n                            ErrorReporter.getInstance().disable();\r\n                        } else {\r\n                            try {\r\n                                initAcra();\r\n                            } catch (ACRAConfigurationException e) {\r\n                                Log.w(LOG_TAG, \"Error : \", e);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            };\r\n\r\n            prefs.registerOnSharedPreferenceChangeListener(mPrefListener);\r\n            // If the application default shared preferences contains true for\r\n            // the key \"acra.disable\", do not activate ACRA. Also checks the\r\n            // alternative opposite setting \"acra.enable\" if \"acra.disable\" is\r\n            // not found.\r\n            boolean disableAcra = false;\r\n            try {\r\n                disableAcra = prefs.getBoolean(PREF_DISABLE_ACRA, !prefs.getBoolean(PREF_ENABLE_ACRA, true));\r\n            } catch (Exception e) {\r\n                // In case of a ClassCastException\r\n            }\r\n\r\n            if (disableAcra) {\r\n                Log.d(LOG_TAG, \"ACRA is disabled for \" + mApplication.getPackageName() + \".\");\r\n                return;\r\n            } else {\r\n                try {\r\n                    initAcra();\r\n                } catch (ACRAConfigurationException e) {\r\n                    Log.w(LOG_TAG, \"Error : \", e);\r\n                }\r\n            }\r\n\r\n        }\r\n    }", "CrashReport/src/org/acra/ACRA.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["void", "void", "equal"], ["init", "init", "equal"], ["(", "(", "equal"], ["Application", "Application", "equal"], ["app", "app", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Application", "Application", "equal"], ["!=", "!=", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["State", "State", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["ACRA", "ACRA", "equal"], ["<con>", "<con>", "equal"], ["#", "#", "equal"], ["<con>", "<con>", "equal"], ["init", "init", "equal"], ["called", "called", "equal"], ["more", "more", "equal"], ["than", "than", "equal"], ["once", "once", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Application", "Application", "equal"], ["=", "=", "equal"], ["app", "app", "equal"], [";", ";", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Reports", "Reports", "equal"], ["<con>", "<con>", "equal"], ["Crashes", "Crashes", "equal"], ["=", "=", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Application", "Application", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Annotation", "Annotation", "equal"], ["(", "(", "equal"], ["Reports", "Reports", "equal"], ["<con>", "<con>", "equal"], ["Crashes", "Crashes", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Reports", "Reports", "equal"], ["<con>", "<con>", "equal"], ["Crashes", "Crashes", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Log", "Log", "equal"], [".", ".", "equal"], ["e", "e", "equal"], ["(", "(", "equal"], ["LOG", "LOG", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["TAG", "TAG", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["ACRA", "ACRA", "equal"], ["<con>", "<con>", "equal"], ["#", "#", "equal"], ["<con>", "<con>", "equal"], ["init", "init", "equal"], ["called", "called", "equal"], ["but", "but", "equal"], ["no", "no", "equal"], ["Reports", "Reports", "equal"], ["<con>", "<con>", "equal"], ["Crashes", "Crashes", "equal"], ["annotation", "annotation", "equal"], ["on", "on", "equal"], ["Application", "Application", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Application", "Application", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Package", "Package", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["final", "final", "equal"], ["Shared", "Shared", "equal"], ["<con>", "<con>", "equal"], ["Preferences", "Preferences", "equal"], ["prefs", "prefs", "equal"], ["=", "=", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["ACRA", "ACRA", "equal"], ["<con>", "<con>", "equal"], ["Shared", "Shared", "equal"], ["<con>", "<con>", "equal"], ["Preferences", "Preferences", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Log", "Log", "equal"], [".", ".", "equal"], ["d", "d", "equal"], ["(", "(", "equal"], ["ACRA", "ACRA", "equal"], [".", ".", "equal"], ["LOG", "LOG", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["TAG", "TAG", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["Set", "Set", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Shared", "Shared", "equal"], ["<con>", "<con>", "equal"], ["Preference", "Preference", "equal"], ["<con>", "<con>", "equal"], ["Change", "Change", "equal"], ["<con>", "<con>", "equal"], ["Listener", "Listener", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["try", "try", "equal"], ["{", "{", "equal"], ["check", "check", "equal"], ["<con>", "<con>", "equal"], ["Crash", "Crash", "equal"], ["<con>", "<con>", "equal"], ["Resources", "Resources", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Log", "Log", "equal"], [".", ".", "equal"], ["d", "d", "equal"], ["(", "(", "equal"], ["LOG", "LOG", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["TAG", "TAG", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["ACRA", "ACRA", "equal"], ["is", "is", "equal"], ["enabled", "enabled", "equal"], ["for", "for", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Application", "Application", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Package", "Package", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["+", "+", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["intializing", "intializing", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["boolean", "boolean", "equal"], ["enable", "enable", "equal"], ["<con>", "<con>", "equal"], ["Acra", "Acra", "equal"], ["=", "=", "equal"], ["!", "!", "equal"], ["should", "should", "equal"], ["<con>", "<con>", "equal"], ["Disable", "Disable", "equal"], ["<con>", "<con>", "equal"], ["ACRA", "ACRA", "equal"], ["(", "(", "equal"], ["prefs", "prefs", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Error", "Error", "equal"], ["<con>", "<con>", "equal"], ["Reporter", "Reporter", "equal"], ["error", "error", "equal"], ["<con>", "<con>", "equal"], ["Reporter", "Reporter", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Error", "Error", "equal"], ["<con>", "<con>", "equal"], ["Reporter", "Reporter", "equal"], ["(", "(", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Application", "Application", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Application", "Application", "equal"], ["<con>", "<con>", "equal"], ["Context", "Context", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["", ",", "insert"], ["", "prefs", "insert"], [",", ",", "equal"], ["enable", "enable", "equal"], ["<con>", "<con>", "equal"], ["Acra", "Acra", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["Report", "Report", "equal"], ["<con>", "<con>", "equal"], ["Senders", "Senders", "equal"], ["(", "(", "equal"], ["error", "error", "equal"], ["<con>", "<con>", "equal"], ["Reporter", "Reporter", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["error", "error", "equal"], ["<con>", "<con>", "equal"], ["Reporter", "Reporter", "equal"], ["<con>", "<con>", "equal"], ["Singleton", "Singleton", "equal"], ["=", "=", "equal"], ["error", "error", "equal"], ["<con>", "<con>", "equal"], ["Reporter", "Reporter", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["ACRA", "ACRA", "equal"], ["<con>", "<con>", "equal"], ["Configuration", "Configuration", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["e", "e", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Log", "Log", "equal"], [".", ".", "equal"], ["w", "w", "equal"], ["(", "(", "equal"], ["LOG", "LOG", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["TAG", "TAG", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["Error", "Error", "equal"], [":", ":", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["e", "e", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Pref", "Pref", "equal"], ["<con>", "<con>", "equal"], ["Listener", "Listener", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Shared", "Shared", "equal"], ["<con>", "<con>", "equal"], ["Preference", "Preference", "equal"], ["<con>", "<con>", "equal"], ["Change", "Change", "equal"], ["<con>", "<con>", "equal"], ["Listener", "Listener", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["void", "void", "equal"], ["on", "on", "equal"], ["<con>", "<con>", "equal"], ["Shared", "Shared", "equal"], ["<con>", "<con>", "equal"], ["Preference", "Preference", "equal"], ["<con>", "<con>", "equal"], ["Changed", "Changed", "equal"], ["(", "(", "equal"], ["Shared", "Shared", "equal"], ["<con>", "<con>", "equal"], ["Preferences", "Preferences", "equal"], ["shared", "shared", "equal"], ["<con>", "<con>", "equal"], ["Preferences", "Preferences", "equal"], [",", ",", "equal"], ["String", "String", "equal"], ["key", "key", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["PREF", "PREF", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["DISABLE", "DISABLE", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ACRA", "ACRA", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["(", "(", "equal"], ["key", "key", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["PREF", "PREF", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ENABLE", "ENABLE", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ACRA", "ACRA", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["(", "(", "equal"], ["key", "key", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["boolean", "boolean", "equal"], ["enable", "enable", "equal"], ["<con>", "<con>", "equal"], ["Acra", "Acra", "equal"], ["=", "=", "equal"], ["!", "!", "equal"], ["should", "should", "equal"], ["<con>", "<con>", "equal"], ["Disable", "Disable", "equal"], ["<con>", "<con>", "equal"], ["ACRA", "ACRA", "equal"], ["(", "(", "equal"], ["shared", "shared", "equal"], ["<con>", "<con>", "equal"], ["Preferences", "Preferences", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Error", "Error", "equal"], ["<con>", "<con>", "equal"], ["Reporter", "Reporter", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Enabled", "Enabled", "equal"], ["(", "(", "equal"], ["enable", "enable", "equal"], ["<con>", "<con>", "equal"], ["Acra", "Acra", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], [";", ";", "equal"], ["prefs", "prefs", "equal"], [".", ".", "equal"], ["register", "register", "equal"], ["<con>", "<con>", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Shared", "Shared", "equal"], ["<con>", "<con>", "equal"], ["Preference", "Preference", "equal"], ["<con>", "<con>", "equal"], ["Change", "Change", "equal"], ["<con>", "<con>", "equal"], ["Listener", "Listener", "equal"], ["(", "(", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Pref", "Pref", "equal"], ["<con>", "<con>", "equal"], ["Listener", "Listener", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@Override public int deleteTerminatedClusters() { return this.clusterRepository.deleteTerminatedClusters(); } ", "focal_tgt": "@Override public long deleteTerminatedClusters() { return this.clusterRepository.deleteByIdIn(this.clusterRepository.findTerminatedUnusedClusters().stream().map(Number :: longValue).collect(Collectors.toSet())); } ", "test_src": "@Test public void testDeleteTerminatedClusters()throws GenieException, IOException { Assert.assertThat(this.clusterRepository.count(), Matchers.is(2L)); final String testClusterId = UUID.randomUUID().toString(); final Cluster testCluster = new Cluster.Builder(UUID.randomUUID().toString(), UUID.randomUUID().toString(), UUID.randomUUID().toString(), ClusterStatus.OUT_OF_SERVICE).withId(testClusterId).withConfigs(Sets.newHashSet(UUID.randomUUID().toString())).withDependencies(Sets.newHashSet(UUID.randomUUID().toString())).withSetupFile(UUID.randomUUID().toString()).withTags(Sets.newHashSet(UUID.randomUUID().toString(), UUID.randomUUID().toString())).build(); this.service.createCluster(testCluster); Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(0)); String patchString = \"[{ \\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/status\\\", \\\"value\\\": \\\"UP\\\" }]\"; JsonPatch patch = JsonPatch.fromJson(GenieObjectMapper.getMapper().readTree(patchString)); this.service.patchCluster(testClusterId, patch); Assert.assertThat(this.service.getCluster(testClusterId).getStatus(), Matchers.is(ClusterStatus.UP)); Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(0)); patchString = \"[{ \\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/status\\\", \\\"value\\\": \\\"TERMINATED\\\" }]\"; patch = JsonPatch.fromJson(GenieObjectMapper.getMapper().readTree(patchString)); this.service.patchCluster(testClusterId, patch); Assert.assertThat(this.service.getCluster(testClusterId).getStatus(), Matchers.is(ClusterStatus.TERMINATED)); Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(1)); Assert.assertTrue(this.clusterRepository.existsByUniqueId(CLUSTER_1_ID)); Assert.assertTrue(this.clusterRepository.existsByUniqueId(CLUSTER_2_ID)); Assert.assertFalse(this.clusterRepository.existsByUniqueId(testClusterId)); } ", "test_tgt": "@Test public void testDeleteTerminatedClusters()throws GenieException, IOException { Assert.assertThat(this.clusterRepository.count(), Matchers.is(2L)); final String testClusterId = UUID.randomUUID().toString(); final Cluster testCluster = new Cluster.Builder(UUID.randomUUID().toString(), UUID.randomUUID().toString(), UUID.randomUUID().toString(), ClusterStatus.OUT_OF_SERVICE).withId(testClusterId).withConfigs(Sets.newHashSet(UUID.randomUUID().toString())).withDependencies(Sets.newHashSet(UUID.randomUUID().toString())).withSetupFile(UUID.randomUUID().toString()).withTags(Sets.newHashSet(UUID.randomUUID().toString(), UUID.randomUUID().toString())).build(); this.service.createCluster(testCluster); Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(0L)); String patchString = \"[{ \\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/status\\\", \\\"value\\\": \\\"UP\\\" }]\"; JsonPatch patch = JsonPatch.fromJson(GenieObjectMapper.getMapper().readTree(patchString)); this.service.patchCluster(testClusterId, patch); Assert.assertThat(this.service.getCluster(testClusterId).getStatus(), Matchers.is(ClusterStatus.UP)); Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(0L)); patchString = \"[{ \\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/status\\\", \\\"value\\\": \\\"TERMINATED\\\" }]\"; patch = JsonPatch.fromJson(GenieObjectMapper.getMapper().readTree(patchString)); this.service.patchCluster(testClusterId, patch); Assert.assertThat(this.service.getCluster(testClusterId).getStatus(), Matchers.is(ClusterStatus.TERMINATED)); Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(1L)); Assert.assertTrue(this.clusterRepository.existsByUniqueId(CLUSTER_1_ID)); Assert.assertTrue(this.clusterRepository.existsByUniqueId(CLUSTER_2_ID)); Assert.assertFalse(this.clusterRepository.existsByUniqueId(testClusterId)); } ", "label": 1, "focal_db": [2850742, "Netflix/genie", "/data/comment_repos/Netflix@genie", "58f067518e503b27f475e62cbeb7f8fefe7078de", "a5134c0eb8d8b6af0451b205a89165878312c751", "genie-web/src/main/java/com/netflix/genie/web/jpa/services/JpaClusterServiceImpl.java", "1d6a3ac85091cad01cb228070363c8411c36ea2b", "genie-web/src/main/java/com/netflix/genie/web/jpa/services/JpaClusterServiceImpl.java", "@Override\n    public int deleteTerminatedClusters() {\n        return this.clusterRepository.deleteTerminatedClusters();\n    }", "/**\n * {@inheritDoc}\n */\n", "@Override\n    public long deleteTerminatedClusters() {\n        return this.clusterRepository.deleteByIdIn(\n            this.clusterRepository\n                .findTerminatedUnusedClusters()\n                .stream()\n                .map(Number::longValue)\n                .collect(Collectors.toSet())\n        );\n    }", "/**\n * {@inheritDoc}\n */\n"], "test_db": [2850749, "Netflix/genie", "/data/comment_repos/Netflix@genie", "58f067518e503b27f475e62cbeb7f8fefe7078de", "477f168be4311dbc6eb99ace5d51be2a21f621e9", "genie-web/src/test/java/com/netflix/genie/web/jpa/services/JpaClusterServiceImplIntegrationTests.java", "fde1ab4fe3a4a186dbc63d0497b96ce03f63b68c", "genie-web/src/test/java/com/netflix/genie/web/jpa/services/JpaClusterServiceImplIntegrationTests.java", "@Test\n    public void testDeleteTerminatedClusters() throws GenieException, IOException {\n        Assert.assertThat(this.clusterRepository.count(), Matchers.is(2L));\n        final String testClusterId = UUID.randomUUID().toString();\n        final Cluster testCluster = new Cluster.Builder(\n            UUID.randomUUID().toString(),\n            UUID.randomUUID().toString(),\n            UUID.randomUUID().toString(),\n            ClusterStatus.OUT_OF_SERVICE\n        )\n            .withId(testClusterId)\n            .withConfigs(Sets.newHashSet(UUID.randomUUID().toString()))\n            .withDependencies(Sets.newHashSet(UUID.randomUUID().toString()))\n            .withSetupFile(UUID.randomUUID().toString())\n            .withTags(Sets.newHashSet(UUID.randomUUID().toString(), UUID.randomUUID().toString()))\n            .build();\n        this.service.createCluster(testCluster);\n\n        // Shouldn't delete any clusters as all are UP or OOS\n        Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(0));\n\n        // Change status to UP\n        String patchString = \"[{ \\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/status\\\", \\\"value\\\": \\\"UP\\\" }]\";\n        JsonPatch patch = JsonPatch.fromJson(GenieObjectMapper.getMapper().readTree(patchString));\n        this.service.patchCluster(testClusterId, patch);\n        Assert.assertThat(this.service.getCluster(testClusterId).getStatus(), Matchers.is(ClusterStatus.UP));\n\n        // All clusters are UP/OOS or attached to jobs\n        Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(0));\n\n        // Change status to terminated\n        patchString = \"[{ \\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/status\\\", \\\"value\\\": \\\"TERMINATED\\\" }]\";\n        patch = JsonPatch.fromJson(GenieObjectMapper.getMapper().readTree(patchString));\n        this.service.patchCluster(testClusterId, patch);\n        Assert.assertThat(this.service.getCluster(testClusterId).getStatus(), Matchers.is(ClusterStatus.TERMINATED));\n\n        // All clusters are UP/OOS or attached to jobs\n        Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(1));\n\n        // Make sure it didn't delete any of the clusters we wanted\n        Assert.assertTrue(this.clusterRepository.existsByUniqueId(CLUSTER_1_ID));\n        Assert.assertTrue(this.clusterRepository.existsByUniqueId(CLUSTER_2_ID));\n        Assert.assertFalse(this.clusterRepository.existsByUniqueId(testClusterId));\n    }", "/**\n * Test the API for deleting all terminated clusters that aren't attached to jobs.\n *\n * @throws GenieException On Error\n * @throws IOException    On JSON patch error\n */\n", "@Test\n    public void testDeleteTerminatedClusters() throws GenieException, IOException {\n        Assert.assertThat(this.clusterRepository.count(), Matchers.is(2L));\n        final String testClusterId = UUID.randomUUID().toString();\n        final Cluster testCluster = new Cluster.Builder(\n            UUID.randomUUID().toString(),\n            UUID.randomUUID().toString(),\n            UUID.randomUUID().toString(),\n            ClusterStatus.OUT_OF_SERVICE\n        )\n            .withId(testClusterId)\n            .withConfigs(Sets.newHashSet(UUID.randomUUID().toString()))\n            .withDependencies(Sets.newHashSet(UUID.randomUUID().toString()))\n            .withSetupFile(UUID.randomUUID().toString())\n            .withTags(Sets.newHashSet(UUID.randomUUID().toString(), UUID.randomUUID().toString()))\n            .build();\n        this.service.createCluster(testCluster);\n\n        // Shouldn't delete any clusters as all are UP or OOS\n        Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(0L));\n\n        // Change status to UP\n        String patchString = \"[{ \\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/status\\\", \\\"value\\\": \\\"UP\\\" }]\";\n        JsonPatch patch = JsonPatch.fromJson(GenieObjectMapper.getMapper().readTree(patchString));\n        this.service.patchCluster(testClusterId, patch);\n        Assert.assertThat(this.service.getCluster(testClusterId).getStatus(), Matchers.is(ClusterStatus.UP));\n\n        // All clusters are UP/OOS or attached to jobs\n        Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(0L));\n\n        // Change status to terminated\n        patchString = \"[{ \\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/status\\\", \\\"value\\\": \\\"TERMINATED\\\" }]\";\n        patch = JsonPatch.fromJson(GenieObjectMapper.getMapper().readTree(patchString));\n        this.service.patchCluster(testClusterId, patch);\n        Assert.assertThat(this.service.getCluster(testClusterId).getStatus(), Matchers.is(ClusterStatus.TERMINATED));\n\n        // All clusters are UP/OOS or attached to jobs\n        Assert.assertThat(this.service.deleteTerminatedClusters(), Matchers.is(1L));\n\n        // Make sure it didn't delete any of the clusters we wanted\n        Assert.assertTrue(this.clusterRepository.existsByUniqueId(CLUSTER_1_ID));\n        Assert.assertTrue(this.clusterRepository.existsByUniqueId(CLUSTER_2_ID));\n        Assert.assertFalse(this.clusterRepository.existsByUniqueId(testClusterId));\n    }", "/**\n * Test the API for deleting all terminated clusters that aren't attached to jobs.\n *\n * @throws GenieException On Error\n * @throws IOException    On JSON patch error\n */\n"], "edit_seq": [["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["int", "long", "replace"], ["delete", "delete", "equal"], ["<con>", "<con>", "equal"], ["Terminated", "Terminated", "equal"], ["<con>", "<con>", "equal"], ["Clusters", "Clusters", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["cluster", "cluster", "equal"], ["<con>", "<con>", "equal"], ["Repository", "Repository", "equal"], [".", ".", "equal"], ["delete", "delete", "equal"], ["<con>", "<con>", "equal"], ["Terminated", "By", "replace"], ["<con>", "<con>", "equal"], ["Clusters", "Id", "replace"], ["", "<con>", "insert"], ["", "In", "insert"], ["(", "(", "equal"], ["", "this", "insert"], ["", ".", "insert"], ["", "cluster", "insert"], ["", "<con>", "insert"], ["", "Repository", "insert"], ["", ".", "insert"], ["", "find", "insert"], ["", "<con>", "insert"], ["", "Terminated", "insert"], ["", "<con>", "insert"], ["", "Unused", "insert"], ["", "<con>", "insert"], ["", "Clusters", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "stream", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "map", "insert"], ["", "(", "insert"], ["", "Number", "insert"], ["", "::", "insert"], ["", "long", "insert"], ["", "<con>", "insert"], ["", "Value", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "collect", "insert"], ["", "(", "insert"], ["", "Collectors", "insert"], ["", ".", "insert"], ["", "to", "insert"], ["", "<con>", "insert"], ["", "Set", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@VisibleForTesting void updateSchedules(final Properties ctx, final List < OlAndSched > olsAndScheds) { if(olsAndScheds.isEmpty()) { return; } final IBPartnerBL bpartnerBL = Services.get(IBPartnerBL.class); final IProductBL productsService = Services.get(IProductBL.class); final IShipmentScheduleDeliveryDayBL shipmentScheduleDeliveryDayBL = Services.get(IShipmentScheduleDeliveryDayBL.class); final IShipmentScheduleEffectiveBL shipmentScheduleEffectiveBL = Services.get(IShipmentScheduleEffectiveBL.class); final IShipmentScheduleAllocDAO shipmentScheduleAllocDAO = Services.get(IShipmentScheduleAllocDAO.class); final IBPartnerProductDAO bpartnerProductDAO = Services.get(IBPartnerProductDAO.class); final IDeliveryDayBL deliveryDayBL = Services.get(IDeliveryDayBL.class); for(final OlAndSched olAndSched : olsAndScheds) { final I_M_ShipmentSchedule sched = olAndSched.getSched(); updateCatchUomId(sched); updateWarehouseId(sched); shipmentScheduleBL.updateBPArtnerAddressOverrideIfNotYetSet(sched); shipmentScheduleBL.updateHeaderAggregationKey(sched); updateShipmentConstraints(sched); } final ShipmentSchedulesDuringUpdate firstRun = generate_FirstRun(ctx, olsAndScheds); firstRun.updateCompleteStatusAndSetQtyToZeroWhereNeeded(); final int removeCnt = applyCandidateProcessors(ctx, firstRun); logger.info(\"{} records were discarded by candidate processors\", removeCnt); for(final DeliveryLineCandidate inOutLine : firstRun.getAllLines()) { if(inOutLine.isDiscarded()) { inOutLine.setQtyToDeliver(BigDecimal.ZERO); } else { inOutLine.removeFromGroup(); firstRun.removeLine(inOutLine); } } final IShipmentSchedulesDuringUpdate secondRun = generate_SecondRun(ctx, olsAndScheds, firstRun); for(final OlAndSched olAndSched : olsAndScheds) { final I_M_ShipmentSchedule sched = olAndSched.getSched(); final IDeliverRequest deliverRequest = olAndSched.getDeliverRequest(); final BPartnerId bpartnerId = shipmentScheduleEffectiveBL.getBPartnerId(sched); sched.setAllowConsolidateInOut(bpartnerBL.isAllowConsolidateInOutEffective(bpartnerId, SOTrx.SALES)); updatePreparationAndDeliveryDate(sched); shipmentScheduleDeliveryDayBL.updateDeliveryDayInfo(sched); final BigDecimal qtyDelivered = shipmentScheduleAllocDAO.retrieveQtyDelivered(sched); sched.setQtyDelivered(qtyDelivered); sched.setQtyReserved(BigDecimal.ZERO.max(deliverRequest.getQtyOrdered().subtract(sched.getQtyDelivered()))); updateLineNetAmt(olAndSched); ShipmentScheduleQtysHelper.updateQtyToDeliver(olAndSched, secondRun); markAsChangedByUpdateProcess(sched); if(olAndSched.hasSalesOrderLine()) { final DocStatus orderDocStatus = olAndSched.getOrderDocStatus(); if( ! orderDocStatus.isCompletedOrClosedOrReversed() && ! sched.isProcessed() && sched.getQtyDelivered().signum() == 0 && sched.getQtyPickList().signum() == 0) { logger.debug(\"QtyToDeliver_Override=\" + sched.getQtyToDeliver_Override() + \"; QtyReserved=\" + sched.getQtyReserved() + \"; DocStatus=\" + orderDocStatus + \"; => Deleting \" + sched); InterfaceWrapperHelper.delete(sched); continue; } } updateProcessedFlag(sched); if(sched.isProcessed()) { final boolean deliveryRuleIsForced = DeliveryRule.FORCE.equals(shipmentScheduleEffectiveBL.getDeliveryRule(sched)); if(deliveryRuleIsForced) { sched.setQtyToDeliver(BigDecimal.ZERO); shipmentSchedulePA.save(sched); } else { Check.errorUnless(sched.getQtyToDeliver().signum() == 0, \"{} has QtyToDeliver = {} (should be zero)\", sched, sched.getQtyToDeliver()); } continue; } final BPartnerId partnerId = BPartnerId.ofRepoId(sched.getC_BPartner_ID()); final ProductId productId = ProductId.ofRepoId(sched.getM_Product_ID()); final I_M_Product product = productsService.getById(productId); final OrgId orgId = OrgId.ofRepoId(product.getAD_Org_ID()); final I_C_BPartner_Product bpp = bpartnerProductDAO.retrieveBPartnerProductAssociation(ctx, partnerId, productId, orgId); if(bpp == null) { sched.setIsDropShip(false); } else { final boolean isDropShip = bpp.isDropShip(); if(isDropShip) { sched.setC_BPartner_Vendor_ID(bpp.getC_BPartner_Vendor_ID()); } sched.setIsDropShip(isDropShip); } if(sched.getDeliveryDate_Override() != null && sched.getPreparationDate_Override() == null) { final ZonedDateTime deliveryDate = shipmentScheduleEffectiveBL.getDeliveryDate(sched); final IContextAware contextAwareSched = InterfaceWrapperHelper.getContextAware(sched); final BPartnerLocationId bpLocationId = shipmentScheduleEffectiveBL.getBPartnerLocationId(sched); final ZonedDateTime calculationTime = TimeUtil.asZonedDateTime(sched.getCreated()); final ZonedDateTime preparationDate = deliveryDayBL.calculatePreparationDateOrNull(contextAwareSched, SOTrx.SALES, calculationTime, deliveryDate, bpLocationId); sched.setPreparationDate_Override(TimeUtil.asTimestamp(preparationDate)); } shipmentSchedulePA.save(sched); } } ", "focal_tgt": "@VisibleForTesting void updateSchedules(final Properties ctx, final List < OlAndSched > olsAndScheds) { if(olsAndScheds.isEmpty()) { return; } final IBPartnerBL bpartnerBL = Services.get(IBPartnerBL.class); final IProductBL productsService = Services.get(IProductBL.class); final IShipmentScheduleDeliveryDayBL shipmentScheduleDeliveryDayBL = Services.get(IShipmentScheduleDeliveryDayBL.class); final IShipmentScheduleEffectiveBL shipmentScheduleEffectiveBL = Services.get(IShipmentScheduleEffectiveBL.class); final IShipmentScheduleAllocDAO shipmentScheduleAllocDAO = Services.get(IShipmentScheduleAllocDAO.class); final IBPartnerProductDAO bpartnerProductDAO = Services.get(IBPartnerProductDAO.class); final IDeliveryDayBL deliveryDayBL = Services.get(IDeliveryDayBL.class); for(final OlAndSched olAndSched : olsAndScheds) { final I_M_ShipmentSchedule sched = olAndSched.getSched(); updateCatchUomId(sched); updateWarehouseId(sched); shipmentScheduleBL.updateBPArtnerAddressOverrideIfNotYetSet(sched); shipmentScheduleBL.updateHeaderAggregationKey(sched); updateShipmentConstraints(sched); } final ShipmentSchedulesDuringUpdate firstRun = generate_FirstRun(ctx, olsAndScheds); firstRun.updateCompleteStatusAndSetQtyToZeroWhereNeeded(); final int removeCnt = applyCandidateProcessors(ctx, firstRun); logger.info(\"{} records were discarded by candidate processors\", removeCnt); for(final DeliveryLineCandidate inOutLine : firstRun.getAllLines()) { if(inOutLine.isDiscarded()) { inOutLine.setQtyToDeliver(BigDecimal.ZERO); } else { inOutLine.removeFromGroup(); firstRun.removeLine(inOutLine); } } final IShipmentSchedulesDuringUpdate secondRun = generate_SecondRun(ctx, olsAndScheds, firstRun); for(final OlAndSched olAndSched : olsAndScheds) { final I_M_ShipmentSchedule sched = olAndSched.getSched(); final BPartnerId bpartnerId = shipmentScheduleEffectiveBL.getBPartnerId(sched); sched.setAllowConsolidateInOut(bpartnerBL.isAllowConsolidateInOutEffective(bpartnerId, SOTrx.SALES)); updatePreparationAndDeliveryDate(sched); shipmentScheduleDeliveryDayBL.updateDeliveryDayInfo(sched); final BigDecimal qtyDelivered = shipmentScheduleAllocDAO.retrieveQtyDelivered(sched); sched.setQtyDelivered(qtyDelivered); sched.setQtyReserved(BigDecimal.ZERO.max(olAndSched.getQtyOrdered().subtract(sched.getQtyDelivered()))); updateLineNetAmt(olAndSched); ShipmentScheduleQtysHelper.updateQtyToDeliver(olAndSched, secondRun); markAsChangedByUpdateProcess(sched); if(olAndSched.hasSalesOrderLine()) { final DocStatus orderDocStatus = olAndSched.getOrderDocStatus(); if( ! orderDocStatus.isCompletedOrClosedOrReversed() && ! sched.isProcessed() && sched.getQtyDelivered().signum() == 0 && sched.getQtyPickList().signum() == 0) { logger.debug(\"QtyToDeliver_Override=\" + sched.getQtyToDeliver_Override() + \"; QtyReserved=\" + sched.getQtyReserved() + \"; DocStatus=\" + orderDocStatus + \"; => Deleting \" + sched); InterfaceWrapperHelper.delete(sched); continue; } } updateProcessedFlag(sched); if(sched.isProcessed()) { final boolean deliveryRuleIsForced = DeliveryRule.FORCE.equals(shipmentScheduleEffectiveBL.getDeliveryRule(sched)); if(deliveryRuleIsForced) { sched.setQtyToDeliver(BigDecimal.ZERO); shipmentSchedulePA.save(sched); } else { Check.errorUnless(sched.getQtyToDeliver().signum() == 0, \"{} has QtyToDeliver = {} (should be zero)\", sched, sched.getQtyToDeliver()); } continue; } final BPartnerId partnerId = BPartnerId.ofRepoId(sched.getC_BPartner_ID()); final ProductId productId = ProductId.ofRepoId(sched.getM_Product_ID()); final I_M_Product product = productsService.getById(productId); final OrgId orgId = OrgId.ofRepoId(product.getAD_Org_ID()); final I_C_BPartner_Product bpp = bpartnerProductDAO.retrieveBPartnerProductAssociation(ctx, partnerId, productId, orgId); if(bpp == null) { sched.setIsDropShip(false); } else { final boolean isDropShip = bpp.isDropShip(); if(isDropShip) { sched.setC_BPartner_Vendor_ID(bpp.getC_BPartner_Vendor_ID()); } sched.setIsDropShip(isDropShip); } if(sched.getDeliveryDate_Override() != null && sched.getPreparationDate_Override() == null) { final ZonedDateTime deliveryDate = shipmentScheduleEffectiveBL.getDeliveryDate(sched); final IContextAware contextAwareSched = InterfaceWrapperHelper.getContextAware(sched); final BPartnerLocationId bpLocationId = shipmentScheduleEffectiveBL.getBPartnerLocationId(sched); final ZonedDateTime calculationTime = TimeUtil.asZonedDateTime(sched.getCreated()); final ZonedDateTime preparationDate = deliveryDayBL.calculatePreparationDateOrNull(contextAwareSched, SOTrx.SALES, calculationTime, deliveryDate, bpLocationId); sched.setPreparationDate_Override(TimeUtil.asTimestamp(preparationDate)); } shipmentSchedulePA.save(sched); } } ", "test_src": "@Test public void updateSchedules_emptyList() { final List < OlAndSched > olAndScheds = new ArrayList < > (); shipmentScheduleUpdater.updateSchedules(Env.getCtx(), olAndScheds); } ", "label": 0, "focal_db": [2699525, "metasfresh/metasfresh", "/data/comment_repos/metasfresh@metasfresh", "d82ce365d9fecd8dd233a90d2be522d034b9ce43", "9f29aab28232af5cb5939854dc82b3ccb220dec2", "de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleUpdater.java", "07f0ed54f53de40861d27570e01200042e52fe7b", "de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleUpdater.java", "@VisibleForTesting\n\tvoid updateSchedules(final Properties ctx, final List<OlAndSched> olsAndScheds)\n\t{\n\t\tif (olsAndScheds.isEmpty())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// Services\n\t\tfinal IBPartnerBL bpartnerBL = Services.get(IBPartnerBL.class);\n\t\tfinal IProductBL productsService = Services.get(IProductBL.class);\n\t\tfinal IShipmentScheduleDeliveryDayBL shipmentScheduleDeliveryDayBL = Services.get(IShipmentScheduleDeliveryDayBL.class);\n\t\tfinal IShipmentScheduleEffectiveBL shipmentScheduleEffectiveBL = Services.get(IShipmentScheduleEffectiveBL.class);\n\t\tfinal IShipmentScheduleAllocDAO shipmentScheduleAllocDAO = Services.get(IShipmentScheduleAllocDAO.class);\n\t\tfinal IBPartnerProductDAO bpartnerProductDAO = Services.get(IBPartnerProductDAO.class);\n\t\tfinal IDeliveryDayBL deliveryDayBL = Services.get(IDeliveryDayBL.class);\n\n\t\t//\n\t\t// Briefly update our shipment schedules:\n\t\t// * set BPartnerAddress_Override if was not set before\n\t\t// * update HeaderAggregationKey\n\t\tfor (final OlAndSched olAndSched : olsAndScheds)\n\t\t{\n\t\t\tfinal I_M_ShipmentSchedule sched = olAndSched.getSched();\n\n\t\t\tupdateCatchUomId(sched);\n\n\t\t\tupdateWarehouseId(sched);\n\n\t\t\tshipmentScheduleBL.updateBPArtnerAddressOverrideIfNotYetSet(sched);\n\n\t\t\tshipmentScheduleBL.updateHeaderAggregationKey(sched);\n\n\t\t\tupdateShipmentConstraints(sched);\n\t\t}\n\n\t\tfinal ShipmentSchedulesDuringUpdate firstRun = generate_FirstRun(ctx, olsAndScheds);\n\t\tfirstRun.updateCompleteStatusAndSetQtyToZeroWhereNeeded();\n\n\t\tfinal int removeCnt = applyCandidateProcessors(ctx, firstRun);\n\t\tlogger.info(\"{} records were discarded by candidate processors\", removeCnt);\n\n\t\t// evaluate the processor's result: lines that have been discarded won't\n\t\t// be delivered and won't be validated in the second run.\n\t\tfor (final DeliveryLineCandidate inOutLine : firstRun.getAllLines())\n\t\t{\n\t\t\tif (inOutLine.isDiscarded())\n\t\t\t{\n\t\t\t\tinOutLine.setQtyToDeliver(BigDecimal.ZERO);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// remember: 'removeLine' means that a *new* line might be\n\t\t\t\t// created for the corresponding olAndSched\n\t\t\t\tinOutLine.removeFromGroup();\n\t\t\t\tfirstRun.removeLine(inOutLine);\n\t\t\t}\n\t\t}\n\n\t\t// make the second run\n\t\tfinal IShipmentSchedulesDuringUpdate secondRun = generate_SecondRun(ctx, olsAndScheds, firstRun);\n\n\t\t// finally update the shipment schedule entries\n\t\tfor (final OlAndSched olAndSched : olsAndScheds)\n\t\t{\n\t\t\tfinal I_M_ShipmentSchedule sched = olAndSched.getSched();\n\t\t\tfinal IDeliverRequest deliverRequest = olAndSched.getDeliverRequest();\n\t\t\tfinal BPartnerId bpartnerId = shipmentScheduleEffectiveBL.getBPartnerId(sched); // task 08756: we don't really care for the ol's partner, but for the partner who will actually receive the shipment.\n\n\t\t\tsched.setAllowConsolidateInOut(bpartnerBL.isAllowConsolidateInOutEffective(bpartnerId, SOTrx.SALES));\n\n\t\t\tupdatePreparationAndDeliveryDate(sched);\n\n\t\t\t//\n\t\t\t// Delivery Day related info:\n\t\t\t// TODO: invert dependency add make this pluggable from de.metas.tourplanning module\n\t\t\tshipmentScheduleDeliveryDayBL.updateDeliveryDayInfo(sched);\n\n\t\t\t// task 09358: ol.qtyReserved should be as correct as QtyOrdered and QtyDelivered, but in some cases isn't. this here is a workaround to the problem\n\t\t\t// task 09869: don't rely on ol anyways\n\t\t\tfinal BigDecimal qtyDelivered = shipmentScheduleAllocDAO.retrieveQtyDelivered(sched);\n\t\t\tsched.setQtyDelivered(qtyDelivered);\n\t\t\tsched.setQtyReserved(BigDecimal.ZERO.max(deliverRequest.getQtyOrdered().subtract(sched.getQtyDelivered())));\n\n\t\t\tupdateLineNetAmt(olAndSched);\n\n\t\t\tShipmentScheduleQtysHelper.updateQtyToDeliver(olAndSched, secondRun);\n\n\t\t\tmarkAsChangedByUpdateProcess(sched);\n\n\t\t\tif (olAndSched.hasSalesOrderLine())\n\t\t\t{\n\t\t\t\tfinal DocStatus orderDocStatus = olAndSched.getOrderDocStatus();\n\t\t\t\tif (!orderDocStatus.isCompletedOrClosedOrReversed() // task 07355: thread closed orders like completed orders\n\t\t\t\t\t\t&& !sched.isProcessed() // task 05206: ts: don't try to delete already processed scheds..it won't work\n\t\t\t\t\t\t&& sched.getQtyDelivered().signum() == 0 // also don't try to delete if there is already a picked or delivered Qty.\n\t\t\t\t\t\t&& sched.getQtyPickList().signum() == 0)\n\t\t\t\t{\n\t\t\t\t\tlogger.debug(\"QtyToDeliver_Override=\" + sched.getQtyToDeliver_Override()\n\t\t\t\t\t\t\t+ \"; QtyReserved=\" + sched.getQtyReserved()\n\t\t\t\t\t\t\t+ \"; DocStatus=\" + orderDocStatus\n\t\t\t\t\t\t\t+ \"; => Deleting \" + sched);\n\n\t\t\t\t\tInterfaceWrapperHelper.delete(sched);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateProcessedFlag(sched);\n\t\t\tif (sched.isProcessed())\n\t\t\t{\n\t\t\t\t// 04870 : Delivery rule force assumes we deliver full quantity ordered if qtyToDeliver_Override is null.\n\t\t\t\t// 06019 : check both DeliveryRule, as DeliveryRule_Override\n\t\t\t\tfinal boolean deliveryRuleIsForced = DeliveryRule.FORCE.equals(shipmentScheduleEffectiveBL.getDeliveryRule(sched));\n\t\t\t\tif (deliveryRuleIsForced)\n\t\t\t\t{\n\t\t\t\t\tsched.setQtyToDeliver(BigDecimal.ZERO);\n\t\t\t\t\tshipmentSchedulePA.save(sched);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tCheck.errorUnless(sched.getQtyToDeliver().signum() == 0, \"{} has QtyToDeliver = {} (should be zero)\", sched, sched.getQtyToDeliver());\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// task 08694\n\t\t\t// I talked with Mark and he observed that in the wiki-page of 08459 it is specified differently.\n\t\t\t// I will let it here nevertheless, so we can keep track of it's way to work\n\n\t\t\tfinal BPartnerId partnerId = BPartnerId.ofRepoId(sched.getC_BPartner_ID());\n\t\t\tfinal ProductId productId = ProductId.ofRepoId(sched.getM_Product_ID());\n\n\t\t\t// FRESH-334 retrieve the bp product for org or for org 0\n\t\t\tfinal I_M_Product product = productsService.getById(productId);\n\t\t\tfinal OrgId orgId = OrgId.ofRepoId(product.getAD_Org_ID());\n\n\t\t\tfinal I_C_BPartner_Product bpp = bpartnerProductDAO.retrieveBPartnerProductAssociation(ctx, partnerId, productId, orgId);\n\t\t\tif (bpp == null)\n\t\t\t{\n\t\t\t\t// in case no dropship bpp entry was found, the schedule shall not be dropship\n\t\t\t\tsched.setIsDropShip(false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\tfinal boolean isDropShip = bpp.isDropShip();\n\n\t\t\t\tif (isDropShip)\n\t\t\t\t{\n\t\t\t\t\t// if there is bpp that is dropship and has a C_BPartner_Vendor_ID,\n\t\t\t\t\t// set the customer's vendor for the given product in the schedule\n\t\t\t\t\tsched.setC_BPartner_Vendor_ID(bpp.getC_BPartner_Vendor_ID());\n\t\t\t\t}\n\n\t\t\t\t// set the dropship flag in shipment schedule as it is in the bpp\n\t\t\t\tsched.setIsDropShip(isDropShip);\n\t\t\t}\n\n\t\t\t// 08860\n\t\t\t// update preparation date override based on delivery date effective\n\t\t\t// DO this only if the preparationDate_Override was not already set manually or by the process\n\n\t\t\tif (sched.getDeliveryDate_Override() != null && sched.getPreparationDate_Override() == null)\n\t\t\t{\n\t\t\t\tfinal ZonedDateTime deliveryDate = shipmentScheduleEffectiveBL.getDeliveryDate(sched);\n\n\t\t\t\tfinal IContextAware contextAwareSched = InterfaceWrapperHelper.getContextAware(sched);\n\t\t\t\tfinal BPartnerLocationId bpLocationId = shipmentScheduleEffectiveBL.getBPartnerLocationId(sched);\n\n\t\t\t\tfinal ZonedDateTime calculationTime = TimeUtil.asZonedDateTime(sched.getCreated());\n\t\t\t\tfinal ZonedDateTime preparationDate = deliveryDayBL.calculatePreparationDateOrNull(\n\t\t\t\t\t\tcontextAwareSched,\n\t\t\t\t\t\tSOTrx.SALES,\n\t\t\t\t\t\tcalculationTime,\n\t\t\t\t\t\tdeliveryDate,\n\t\t\t\t\t\tbpLocationId);\n\n\t\t\t\t// In case the DeliveryDate Override is set, also update the preparationDate override\n\t\t\t\tsched.setPreparationDate_Override(TimeUtil.asTimestamp(preparationDate));\n\n\t\t\t}\n\n\t\t\tshipmentSchedulePA.save(sched);\n\t\t}\n\t}", "/**\n * Updates the given {@link I_M_ShipmentSchedule}s by setting these columns:\n * <li>\n * {@link I_M_ShipmentSchedule#COLUMNNAME_QtyToDeliver}\n * <li>\n * {@link I_M_ShipmentSchedule#COLUMNNAME_QtyOnHand}\n * <li>\n * {@link I_M_ShipmentSchedule#COLUMNNAME_Status}\n * <li>\n * {@link I_M_ShipmentSchedule#COLUMNNAME_PostageFreeAmt}\n * <li>\n * {@link I_M_ShipmentSchedule#COLUMNNAME_AllowConsolidateInOut}\n *\n * To actually set those values, this method calls the registered {@link IShipmentSchedulesAfterFirstPassUpdater}.\n *\n * @param olsAndScheds\n */\n", "@VisibleForTesting\n\tvoid updateSchedules(final Properties ctx, final List<OlAndSched> olsAndScheds)\n\t{\n\t\tif (olsAndScheds.isEmpty())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// Services\n\t\tfinal IBPartnerBL bpartnerBL = Services.get(IBPartnerBL.class);\n\t\tfinal IProductBL productsService = Services.get(IProductBL.class);\n\t\tfinal IShipmentScheduleDeliveryDayBL shipmentScheduleDeliveryDayBL = Services.get(IShipmentScheduleDeliveryDayBL.class);\n\t\tfinal IShipmentScheduleEffectiveBL shipmentScheduleEffectiveBL = Services.get(IShipmentScheduleEffectiveBL.class);\n\t\tfinal IShipmentScheduleAllocDAO shipmentScheduleAllocDAO = Services.get(IShipmentScheduleAllocDAO.class);\n\t\tfinal IBPartnerProductDAO bpartnerProductDAO = Services.get(IBPartnerProductDAO.class);\n\t\tfinal IDeliveryDayBL deliveryDayBL = Services.get(IDeliveryDayBL.class);\n\n\t\t//\n\t\t// Briefly update our shipment schedules:\n\t\t// * set BPartnerAddress_Override if was not set before\n\t\t// * update HeaderAggregationKey\n\t\tfor (final OlAndSched olAndSched : olsAndScheds)\n\t\t{\n\t\t\tfinal I_M_ShipmentSchedule sched = olAndSched.getSched();\n\n\t\t\tupdateCatchUomId(sched);\n\n\t\t\tupdateWarehouseId(sched);\n\n\t\t\tshipmentScheduleBL.updateBPArtnerAddressOverrideIfNotYetSet(sched);\n\n\t\t\tshipmentScheduleBL.updateHeaderAggregationKey(sched);\n\n\t\t\tupdateShipmentConstraints(sched);\n\t\t}\n\n\t\tfinal ShipmentSchedulesDuringUpdate firstRun = generate_FirstRun(ctx, olsAndScheds);\n\t\tfirstRun.updateCompleteStatusAndSetQtyToZeroWhereNeeded();\n\n\t\tfinal int removeCnt = applyCandidateProcessors(ctx, firstRun);\n\t\tlogger.info(\"{} records were discarded by candidate processors\", removeCnt);\n\n\t\t// evaluate the processor's result: lines that have been discarded won't\n\t\t// be delivered and won't be validated in the second run.\n\t\tfor (final DeliveryLineCandidate inOutLine : firstRun.getAllLines())\n\t\t{\n\t\t\tif (inOutLine.isDiscarded())\n\t\t\t{\n\t\t\t\tinOutLine.setQtyToDeliver(BigDecimal.ZERO);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// remember: 'removeLine' means that a *new* line might be\n\t\t\t\t// created for the corresponding olAndSched\n\t\t\t\tinOutLine.removeFromGroup();\n\t\t\t\tfirstRun.removeLine(inOutLine);\n\t\t\t}\n\t\t}\n\n\t\t// make the second run\n\t\tfinal IShipmentSchedulesDuringUpdate secondRun = generate_SecondRun(ctx, olsAndScheds, firstRun);\n\n\t\t// finally update the shipment schedule entries\n\t\tfor (final OlAndSched olAndSched : olsAndScheds)\n\t\t{\n\t\t\tfinal I_M_ShipmentSchedule sched = olAndSched.getSched();\n\t\t\tfinal BPartnerId bpartnerId = shipmentScheduleEffectiveBL.getBPartnerId(sched); // task 08756: we don't really care for the ol's partner, but for the partner who will actually receive the shipment.\n\n\t\t\tsched.setAllowConsolidateInOut(bpartnerBL.isAllowConsolidateInOutEffective(bpartnerId, SOTrx.SALES));\n\n\t\t\tupdatePreparationAndDeliveryDate(sched);\n\n\t\t\t//\n\t\t\t// Delivery Day related info:\n\t\t\t// TODO: invert dependency add make this pluggable from de.metas.tourplanning module\n\t\t\tshipmentScheduleDeliveryDayBL.updateDeliveryDayInfo(sched);\n\n\t\t\t// task 09358: ol.qtyReserved should be as correct as QtyOrdered and QtyDelivered, but in some cases isn't. this here is a workaround to the problem\n\t\t\t// task 09869: don't rely on ol anyways\n\t\t\tfinal BigDecimal qtyDelivered = shipmentScheduleAllocDAO.retrieveQtyDelivered(sched);\n\t\t\tsched.setQtyDelivered(qtyDelivered);\n\t\t\tsched.setQtyReserved(BigDecimal.ZERO.max(olAndSched.getQtyOrdered().subtract(sched.getQtyDelivered())));\n\n\t\t\tupdateLineNetAmt(olAndSched);\n\n\t\t\tShipmentScheduleQtysHelper.updateQtyToDeliver(olAndSched, secondRun);\n\n\t\t\tmarkAsChangedByUpdateProcess(sched);\n\n\t\t\tif (olAndSched.hasSalesOrderLine())\n\t\t\t{\n\t\t\t\tfinal DocStatus orderDocStatus = olAndSched.getOrderDocStatus();\n\t\t\t\tif (!orderDocStatus.isCompletedOrClosedOrReversed() // task 07355: thread closed orders like completed orders\n\t\t\t\t\t\t&& !sched.isProcessed() // task 05206: ts: don't try to delete already processed scheds..it won't work\n\t\t\t\t\t\t&& sched.getQtyDelivered().signum() == 0 // also don't try to delete if there is already a picked or delivered Qty.\n\t\t\t\t\t\t&& sched.getQtyPickList().signum() == 0)\n\t\t\t\t{\n\t\t\t\t\tlogger.debug(\"QtyToDeliver_Override=\" + sched.getQtyToDeliver_Override()\n\t\t\t\t\t\t\t+ \"; QtyReserved=\" + sched.getQtyReserved()\n\t\t\t\t\t\t\t+ \"; DocStatus=\" + orderDocStatus\n\t\t\t\t\t\t\t+ \"; => Deleting \" + sched);\n\n\t\t\t\t\tInterfaceWrapperHelper.delete(sched);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateProcessedFlag(sched);\n\t\t\tif (sched.isProcessed())\n\t\t\t{\n\t\t\t\t// 04870 : Delivery rule force assumes we deliver full quantity ordered if qtyToDeliver_Override is null.\n\t\t\t\t// 06019 : check both DeliveryRule, as DeliveryRule_Override\n\t\t\t\tfinal boolean deliveryRuleIsForced = DeliveryRule.FORCE.equals(shipmentScheduleEffectiveBL.getDeliveryRule(sched));\n\t\t\t\tif (deliveryRuleIsForced)\n\t\t\t\t{\n\t\t\t\t\tsched.setQtyToDeliver(BigDecimal.ZERO);\n\t\t\t\t\tshipmentSchedulePA.save(sched);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tCheck.errorUnless(sched.getQtyToDeliver().signum() == 0, \"{} has QtyToDeliver = {} (should be zero)\", sched, sched.getQtyToDeliver());\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// task 08694\n\t\t\t// I talked with Mark and he observed that in the wiki-page of 08459 it is specified differently.\n\t\t\t// I will let it here nevertheless, so we can keep track of it's way to work\n\n\t\t\tfinal BPartnerId partnerId = BPartnerId.ofRepoId(sched.getC_BPartner_ID());\n\t\t\tfinal ProductId productId = ProductId.ofRepoId(sched.getM_Product_ID());\n\n\t\t\t// FRESH-334 retrieve the bp product for org or for org 0\n\t\t\tfinal I_M_Product product = productsService.getById(productId);\n\t\t\tfinal OrgId orgId = OrgId.ofRepoId(product.getAD_Org_ID());\n\n\t\t\tfinal I_C_BPartner_Product bpp = bpartnerProductDAO.retrieveBPartnerProductAssociation(ctx, partnerId, productId, orgId);\n\t\t\tif (bpp == null)\n\t\t\t{\n\t\t\t\t// in case no dropship bpp entry was found, the schedule shall not be dropship\n\t\t\t\tsched.setIsDropShip(false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\tfinal boolean isDropShip = bpp.isDropShip();\n\n\t\t\t\tif (isDropShip)\n\t\t\t\t{\n\t\t\t\t\t// if there is bpp that is dropship and has a C_BPartner_Vendor_ID,\n\t\t\t\t\t// set the customer's vendor for the given product in the schedule\n\t\t\t\t\tsched.setC_BPartner_Vendor_ID(bpp.getC_BPartner_Vendor_ID());\n\t\t\t\t}\n\n\t\t\t\t// set the dropship flag in shipment schedule as it is in the bpp\n\t\t\t\tsched.setIsDropShip(isDropShip);\n\t\t\t}\n\n\t\t\t// 08860\n\t\t\t// update preparation date override based on delivery date effective\n\t\t\t// DO this only if the preparationDate_Override was not already set manually or by the process\n\n\t\t\tif (sched.getDeliveryDate_Override() != null && sched.getPreparationDate_Override() == null)\n\t\t\t{\n\t\t\t\tfinal ZonedDateTime deliveryDate = shipmentScheduleEffectiveBL.getDeliveryDate(sched);\n\n\t\t\t\tfinal IContextAware contextAwareSched = InterfaceWrapperHelper.getContextAware(sched);\n\t\t\t\tfinal BPartnerLocationId bpLocationId = shipmentScheduleEffectiveBL.getBPartnerLocationId(sched);\n\n\t\t\t\tfinal ZonedDateTime calculationTime = TimeUtil.asZonedDateTime(sched.getCreated());\n\t\t\t\tfinal ZonedDateTime preparationDate = deliveryDayBL.calculatePreparationDateOrNull(\n\t\t\t\t\t\tcontextAwareSched,\n\t\t\t\t\t\tSOTrx.SALES,\n\t\t\t\t\t\tcalculationTime,\n\t\t\t\t\t\tdeliveryDate,\n\t\t\t\t\t\tbpLocationId);\n\n\t\t\t\t// In case the DeliveryDate Override is set, also update the preparationDate override\n\t\t\t\tsched.setPreparationDate_Override(TimeUtil.asTimestamp(preparationDate));\n\n\t\t\t}\n\n\t\t\tshipmentSchedulePA.save(sched);\n\t\t}\n\t}", "/**\n * Updates the given {@link I_M_ShipmentSchedule}s by setting these columns:\n * <li>\n * {@link I_M_ShipmentSchedule#COLUMNNAME_QtyToDeliver}\n * <li>\n * {@link I_M_ShipmentSchedule#COLUMNNAME_QtyOnHand}\n * <li>\n * {@link I_M_ShipmentSchedule#COLUMNNAME_Status}\n * <li>\n * {@link I_M_ShipmentSchedule#COLUMNNAME_PostageFreeAmt}\n * <li>\n * {@link I_M_ShipmentSchedule#COLUMNNAME_AllowConsolidateInOut}\n *\n * To actually set those values, this method calls the registered {@link IShipmentSchedulesAfterFirstPassUpdater}.\n *\n * @param olsAndScheds\n */\n"], "test_db": ["12d079e8f876f4035483a668e5c8479a0145d593", "metasfresh/metasfresh", "/data/comment_repos/metasfresh@metasfresh", "updateSchedules", "/data/comment_repos/metasfresh@metasfresh/de.metas.swat/de.metas.swat.base/src/test/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleUpdaterTest.java", "updateSchedules_emptyList", "\t@Test\n\tpublic void updateSchedules_emptyList()\n\t{\n\t\tfinal List<OlAndSched> olAndScheds = new ArrayList<>();\n\n\t\tshipmentScheduleUpdater.updateSchedules(Env.getCtx(), olAndScheds);\n\t}", "@VisibleForTesting\n\tvoid updateSchedules(final Properties ctx, final List<OlAndSched> olsAndScheds)\n\t{\n\t\tif (olsAndScheds.isEmpty())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// Services\n\t\tfinal IBPartnerBL bpartnerBL = Services.get(IBPartnerBL.class);\n\t\tfinal IProductBL productsService = Services.get(IProductBL.class);\n\t\tfinal IShipmentScheduleDeliveryDayBL shipmentScheduleDeliveryDayBL = Services.get(IShipmentScheduleDeliveryDayBL.class);\n\t\tfinal IShipmentScheduleEffectiveBL shipmentScheduleEffectiveBL = Services.get(IShipmentScheduleEffectiveBL.class);\n\t\tfinal IShipmentScheduleAllocDAO shipmentScheduleAllocDAO = Services.get(IShipmentScheduleAllocDAO.class);\n\t\tfinal IBPartnerProductDAO bpartnerProductDAO = Services.get(IBPartnerProductDAO.class);\n\t\tfinal IDeliveryDayBL deliveryDayBL = Services.get(IDeliveryDayBL.class);\n\n\t\t//\n\t\t// Briefly update our shipment schedules:\n\t\t// * set BPartnerAddress_Override if was not set before\n\t\t// * update HeaderAggregationKey\n\t\tfor (final OlAndSched olAndSched : olsAndScheds)\n\t\t{\n\t\t\tfinal I_M_ShipmentSchedule sched = olAndSched.getSched();\n\n\t\t\tupdateCatchUomId(sched);\n\n\t\t\tupdateWarehouseId(sched);\n\n\t\t\tshipmentScheduleBL.updateBPArtnerAddressOverrideIfNotYetSet(sched);\n\n\t\t\tshipmentScheduleBL.updateHeaderAggregationKey(sched);\n\n\t\t\tupdateShipmentConstraints(sched);\n\t\t}\n\n\t\tfinal ShipmentSchedulesDuringUpdate firstRun = generate(ctx, olsAndScheds, null);\n\t\tfirstRun.updateCompleteStatusAndSetQtyToZeroWhereNeeded();\n\n\t\tfinal int removeCnt = applyCandidateProcessors(ctx, firstRun);\n\t\tlogger.info(\"{} records were discarded by candidate processors\", removeCnt);\n\n\t\t// evaluate the processor's result: lines that have been discarded won't\n\t\t// be delivered and won't be validated in the second run.\n\t\tfor (final DeliveryLineCandidate inOutLine : firstRun.getAllLines())\n\t\t{\n\t\t\tif (inOutLine.isDiscarded())\n\t\t\t{\n\t\t\t\tinOutLine.setQtyToDeliver(BigDecimal.ZERO);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// remember: 'removeLine' means that a *new* line might be\n\t\t\t\t// created for the corresponding olAndSched\n\t\t\t\tinOutLine.removeFromGroup();\n\t\t\t\tfirstRun.removeLine(inOutLine);\n\t\t\t}\n\t\t}\n\n\t\t// make the second run\n\t\tfinal IShipmentSchedulesDuringUpdate secondRun = generate(ctx, olsAndScheds, firstRun);\n\n\t\t// finally update the shipment schedule entries\n\t\tfor (final OlAndSched olAndSched : olsAndScheds)\n\t\t{\n\t\t\tfinal I_M_ShipmentSchedule sched = olAndSched.getSched();\n\t\t\tfinal IDeliverRequest deliverRequest = olAndSched.getDeliverRequest();\n\t\t\tfinal BPartnerId bpartnerId = shipmentScheduleEffectiveBL.getBPartnerId(sched); // task 08756: we don't really care for the ol's partner, but for the partner who will actually receive the shipment.\n\n\t\t\tsched.setAllowConsolidateInOut(bpartnerBL.isAllowConsolidateInOutEffective(bpartnerId, SOTrx.SALES));\n\n\t\t\tupdatePreparationAndDeliveryDate(sched);\n\n\t\t\t//\n\t\t\t// Delivery Day related info:\n\t\t\t// TODO: invert dependency add make this pluggable from de.metas.tourplanning module\n\t\t\tshipmentScheduleDeliveryDayBL.updateDeliveryDayInfo(sched);\n\n\t\t\t// task 09358: ol.qtyReserved should be as correct as QtyOrdered and QtyDelivered, but in some cases isn't. this here is a workaround to the problem\n\t\t\t// task 09869: don't rely on ol anyways\n\t\t\tfinal BigDecimal qtyDelivered = shipmentScheduleAllocDAO.retrieveQtyDelivered(sched);\n\t\t\tsched.setQtyDelivered(qtyDelivered);\n\t\t\tsched.setQtyReserved(BigDecimal.ZERO.max(deliverRequest.getQtyOrdered().subtract(sched.getQtyDelivered())));\n\n\t\t\tupdateLineNetAmt(olAndSched);\n\n\t\t\tShipmentScheduleQtysHelper.updateQtyToDeliver(olAndSched, secondRun);\n\n\t\t\tmarkAsChangedByUpdateProcess(sched);\n\n\t\t\tif (olAndSched.hasSalesOrderLine())\n\t\t\t{\n\t\t\t\tfinal DocStatus orderDocStatus = olAndSched.getOrderDocStatus();\n\t\t\t\tif (!orderDocStatus.isCompletedOrClosedOrReversed() // task 07355: thread closed orders like completed orders\n\t\t\t\t\t\t&& !sched.isProcessed() // task 05206: ts: don't try to delete already processed scheds..it won't work\n\t\t\t\t\t\t&& sched.getQtyDelivered().signum() == 0 // also don't try to delete if there is already a picked or delivered Qty.\n\t\t\t\t\t\t&& sched.getQtyPickList().signum() == 0)\n\t\t\t\t{\n\t\t\t\t\tlogger.debug(\"QtyToDeliver_Override=\" + sched.getQtyToDeliver_Override()\n\t\t\t\t\t\t\t+ \"; QtyReserved=\" + sched.getQtyReserved()\n\t\t\t\t\t\t\t+ \"; DocStatus=\" + orderDocStatus\n\t\t\t\t\t\t\t+ \"; => Deleting \" + sched);\n\n\t\t\t\t\tInterfaceWrapperHelper.delete(sched);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateProcessedFlag(sched);\n\t\t\tif (sched.isProcessed())\n\t\t\t{\n\t\t\t\t// 04870 : Delivery rule force assumes we deliver full quantity ordered if qtyToDeliver_Override is null.\n\t\t\t\t// 06019 : check both DeliveryRule, as DeliveryRule_Override\n\t\t\t\tfinal boolean deliveryRuleIsForced = DeliveryRule.FORCE.equals(shipmentScheduleEffectiveBL.getDeliveryRule(sched));\n\t\t\t\tif (deliveryRuleIsForced)\n\t\t\t\t{\n\t\t\t\t\tsched.setQtyToDeliver(BigDecimal.ZERO);\n\t\t\t\t\tshipmentSchedulePA.save(sched);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tCheck.errorUnless(sched.getQtyToDeliver().signum() == 0, \"{} has QtyToDeliver = {} (should be zero)\", sched, sched.getQtyToDeliver());\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// task 08694\n\t\t\t// I talked with Mark and he observed that in the wiki-page of 08459 it is specified differently.\n\t\t\t// I will let it here nevertheless, so we can keep track of it's way to work\n\n\t\t\tfinal BPartnerId partnerId = BPartnerId.ofRepoId(sched.getC_BPartner_ID());\n\t\t\tfinal ProductId productId = ProductId.ofRepoId(sched.getM_Product_ID());\n\n\t\t\t// FRESH-334 retrieve the bp product for org or for org 0\n\t\t\tfinal I_M_Product product = productsService.getById(productId);\n\t\t\tfinal OrgId orgId = OrgId.ofRepoId(product.getAD_Org_ID());\n\n\t\t\tfinal I_C_BPartner_Product bpp = bpartnerProductDAO.retrieveBPartnerProductAssociation(ctx, partnerId, productId, orgId);\n\t\t\tif (bpp == null)\n\t\t\t{\n\t\t\t\t// in case no dropship bpp entry was found, the schedule shall not be dropship\n\t\t\t\tsched.setIsDropShip(false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\tfinal boolean isDropShip = bpp.isDropShip();\n\n\t\t\t\tif (isDropShip)\n\t\t\t\t{\n\t\t\t\t\t// if there is bpp that is dropship and has a C_BPartner_Vendor_ID,\n\t\t\t\t\t// set the customer's vendor for the given product in the schedule\n\t\t\t\t\tsched.setC_BPartner_Vendor_ID(bpp.getC_BPartner_Vendor_ID());\n\t\t\t\t}\n\n\t\t\t\t// set the dropship flag in shipment schedule as it is in the bpp\n\t\t\t\tsched.setIsDropShip(isDropShip);\n\t\t\t}\n\n\t\t\t// 08860\n\t\t\t// update preparation date override based on delivery date effective\n\t\t\t// DO this only if the preparationDate_Override was not already set manually or by the process\n\n\t\t\tif (sched.getDeliveryDate_Override() != null && sched.getPreparationDate_Override() == null)\n\t\t\t{\n\t\t\t\tfinal ZonedDateTime deliveryDate = shipmentScheduleEffectiveBL.getDeliveryDate(sched);\n\n\t\t\t\tfinal IContextAware contextAwareSched = InterfaceWrapperHelper.getContextAware(sched);\n\t\t\t\tfinal BPartnerLocationId bpLocationId = shipmentScheduleEffectiveBL.getBPartnerLocationId(sched);\n\n\t\t\t\tfinal ZonedDateTime calculationTime = TimeUtil.asZonedDateTime(sched.getCreated());\n\t\t\t\tfinal ZonedDateTime preparationDate = deliveryDayBL.calculatePreparationDateOrNull(\n\t\t\t\t\t\tcontextAwareSched,\n\t\t\t\t\t\tSOTrx.SALES,\n\t\t\t\t\t\tcalculationTime,\n\t\t\t\t\t\tdeliveryDate,\n\t\t\t\t\t\tbpLocationId);\n\n\t\t\t\t// In case the DeliveryDate Override is set, also update the preparationDate override\n\t\t\t\tsched.setPreparationDate_Override(TimeUtil.asTimestamp(preparationDate));\n\n\t\t\t}\n\n\t\t\tshipmentSchedulePA.save(sched);\n\t\t}\n\t}", "de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleUpdater.java", "@VisibleForTesting\n\tvoid updateSchedules(final Properties ctx, final List<OlAndSched> olsAndScheds)\n\t{\n\t\tif (olsAndScheds.isEmpty())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// Services\n\t\tfinal IBPartnerBL bpartnerBL = Services.get(IBPartnerBL.class);\n\t\tfinal IProductBL productsService = Services.get(IProductBL.class);\n\t\tfinal IShipmentScheduleDeliveryDayBL shipmentScheduleDeliveryDayBL = Services.get(IShipmentScheduleDeliveryDayBL.class);\n\t\tfinal IShipmentScheduleEffectiveBL shipmentScheduleEffectiveBL = Services.get(IShipmentScheduleEffectiveBL.class);\n\t\tfinal IShipmentScheduleAllocDAO shipmentScheduleAllocDAO = Services.get(IShipmentScheduleAllocDAO.class);\n\t\tfinal IBPartnerProductDAO bpartnerProductDAO = Services.get(IBPartnerProductDAO.class);\n\t\tfinal IDeliveryDayBL deliveryDayBL = Services.get(IDeliveryDayBL.class);\n\n\t\t//\n\t\t// Briefly update our shipment schedules:\n\t\t// * set BPartnerAddress_Override if was not set before\n\t\t// * update HeaderAggregationKey\n\t\tfor (final OlAndSched olAndSched : olsAndScheds)\n\t\t{\n\t\t\tfinal I_M_ShipmentSchedule sched = olAndSched.getSched();\n\n\t\t\tupdateCatchUomId(sched);\n\n\t\t\tupdateWarehouseId(sched);\n\n\t\t\tshipmentScheduleBL.updateBPArtnerAddressOverrideIfNotYetSet(sched);\n\n\t\t\tshipmentScheduleBL.updateHeaderAggregationKey(sched);\n\n\t\t\tupdateShipmentConstraints(sched);\n\t\t}\n\n\t\tfinal ShipmentSchedulesDuringUpdate firstRun = generate_FirstRun(ctx, olsAndScheds);\n\t\tfirstRun.updateCompleteStatusAndSetQtyToZeroWhereNeeded();\n\n\t\tfinal int removeCnt = applyCandidateProcessors(ctx, firstRun);\n\t\tlogger.info(\"{} records were discarded by candidate processors\", removeCnt);\n\n\t\t// evaluate the processor's result: lines that have been discarded won't\n\t\t// be delivered and won't be validated in the second run.\n\t\tfor (final DeliveryLineCandidate inOutLine : firstRun.getAllLines())\n\t\t{\n\t\t\tif (inOutLine.isDiscarded())\n\t\t\t{\n\t\t\t\tinOutLine.setQtyToDeliver(BigDecimal.ZERO);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// remember: 'removeLine' means that a *new* line might be\n\t\t\t\t// created for the corresponding olAndSched\n\t\t\t\tinOutLine.removeFromGroup();\n\t\t\t\tfirstRun.removeLine(inOutLine);\n\t\t\t}\n\t\t}\n\n\t\t// make the second run\n\t\tfinal IShipmentSchedulesDuringUpdate secondRun = generate_SecondRun(ctx, olsAndScheds, firstRun);\n\n\t\t// finally update the shipment schedule entries\n\t\tfor (final OlAndSched olAndSched : olsAndScheds)\n\t\t{\n\t\t\tfinal I_M_ShipmentSchedule sched = olAndSched.getSched();\n\t\t\tfinal IDeliverRequest deliverRequest = olAndSched.getDeliverRequest();\n\t\t\tfinal BPartnerId bpartnerId = shipmentScheduleEffectiveBL.getBPartnerId(sched); // task 08756: we don't really care for the ol's partner, but for the partner who will actually receive the shipment.\n\n\t\t\tsched.setAllowConsolidateInOut(bpartnerBL.isAllowConsolidateInOutEffective(bpartnerId, SOTrx.SALES));\n\n\t\t\tupdatePreparationAndDeliveryDate(sched);\n\n\t\t\t//\n\t\t\t// Delivery Day related info:\n\t\t\t// TODO: invert dependency add make this pluggable from de.metas.tourplanning module\n\t\t\tshipmentScheduleDeliveryDayBL.updateDeliveryDayInfo(sched);\n\n\t\t\t// task 09358: ol.qtyReserved should be as correct as QtyOrdered and QtyDelivered, but in some cases isn't. this here is a workaround to the problem\n\t\t\t// task 09869: don't rely on ol anyways\n\t\t\tfinal BigDecimal qtyDelivered = shipmentScheduleAllocDAO.retrieveQtyDelivered(sched);\n\t\t\tsched.setQtyDelivered(qtyDelivered);\n\t\t\tsched.setQtyReserved(BigDecimal.ZERO.max(deliverRequest.getQtyOrdered().subtract(sched.getQtyDelivered())));\n\n\t\t\tupdateLineNetAmt(olAndSched);\n\n\t\t\tShipmentScheduleQtysHelper.updateQtyToDeliver(olAndSched, secondRun);\n\n\t\t\tmarkAsChangedByUpdateProcess(sched);\n\n\t\t\tif (olAndSched.hasSalesOrderLine())\n\t\t\t{\n\t\t\t\tfinal DocStatus orderDocStatus = olAndSched.getOrderDocStatus();\n\t\t\t\tif (!orderDocStatus.isCompletedOrClosedOrReversed() // task 07355: thread closed orders like completed orders\n\t\t\t\t\t\t&& !sched.isProcessed() // task 05206: ts: don't try to delete already processed scheds..it won't work\n\t\t\t\t\t\t&& sched.getQtyDelivered().signum() == 0 // also don't try to delete if there is already a picked or delivered Qty.\n\t\t\t\t\t\t&& sched.getQtyPickList().signum() == 0)\n\t\t\t\t{\n\t\t\t\t\tlogger.debug(\"QtyToDeliver_Override=\" + sched.getQtyToDeliver_Override()\n\t\t\t\t\t\t\t+ \"; QtyReserved=\" + sched.getQtyReserved()\n\t\t\t\t\t\t\t+ \"; DocStatus=\" + orderDocStatus\n\t\t\t\t\t\t\t+ \"; => Deleting \" + sched);\n\n\t\t\t\t\tInterfaceWrapperHelper.delete(sched);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateProcessedFlag(sched);\n\t\t\tif (sched.isProcessed())\n\t\t\t{\n\t\t\t\t// 04870 : Delivery rule force assumes we deliver full quantity ordered if qtyToDeliver_Override is null.\n\t\t\t\t// 06019 : check both DeliveryRule, as DeliveryRule_Override\n\t\t\t\tfinal boolean deliveryRuleIsForced = DeliveryRule.FORCE.equals(shipmentScheduleEffectiveBL.getDeliveryRule(sched));\n\t\t\t\tif (deliveryRuleIsForced)\n\t\t\t\t{\n\t\t\t\t\tsched.setQtyToDeliver(BigDecimal.ZERO);\n\t\t\t\t\tshipmentSchedulePA.save(sched);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tCheck.errorUnless(sched.getQtyToDeliver().signum() == 0, \"{} has QtyToDeliver = {} (should be zero)\", sched, sched.getQtyToDeliver());\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// task 08694\n\t\t\t// I talked with Mark and he observed that in the wiki-page of 08459 it is specified differently.\n\t\t\t// I will let it here nevertheless, so we can keep track of it's way to work\n\n\t\t\tfinal BPartnerId partnerId = BPartnerId.ofRepoId(sched.getC_BPartner_ID());\n\t\t\tfinal ProductId productId = ProductId.ofRepoId(sched.getM_Product_ID());\n\n\t\t\t// FRESH-334 retrieve the bp product for org or for org 0\n\t\t\tfinal I_M_Product product = productsService.getById(productId);\n\t\t\tfinal OrgId orgId = OrgId.ofRepoId(product.getAD_Org_ID());\n\n\t\t\tfinal I_C_BPartner_Product bpp = bpartnerProductDAO.retrieveBPartnerProductAssociation(ctx, partnerId, productId, orgId);\n\t\t\tif (bpp == null)\n\t\t\t{\n\t\t\t\t// in case no dropship bpp entry was found, the schedule shall not be dropship\n\t\t\t\tsched.setIsDropShip(false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\tfinal boolean isDropShip = bpp.isDropShip();\n\n\t\t\t\tif (isDropShip)\n\t\t\t\t{\n\t\t\t\t\t// if there is bpp that is dropship and has a C_BPartner_Vendor_ID,\n\t\t\t\t\t// set the customer's vendor for the given product in the schedule\n\t\t\t\t\tsched.setC_BPartner_Vendor_ID(bpp.getC_BPartner_Vendor_ID());\n\t\t\t\t}\n\n\t\t\t\t// set the dropship flag in shipment schedule as it is in the bpp\n\t\t\t\tsched.setIsDropShip(isDropShip);\n\t\t\t}\n\n\t\t\t// 08860\n\t\t\t// update preparation date override based on delivery date effective\n\t\t\t// DO this only if the preparationDate_Override was not already set manually or by the process\n\n\t\t\tif (sched.getDeliveryDate_Override() != null && sched.getPreparationDate_Override() == null)\n\t\t\t{\n\t\t\t\tfinal ZonedDateTime deliveryDate = shipmentScheduleEffectiveBL.getDeliveryDate(sched);\n\n\t\t\t\tfinal IContextAware contextAwareSched = InterfaceWrapperHelper.getContextAware(sched);\n\t\t\t\tfinal BPartnerLocationId bpLocationId = shipmentScheduleEffectiveBL.getBPartnerLocationId(sched);\n\n\t\t\t\tfinal ZonedDateTime calculationTime = TimeUtil.asZonedDateTime(sched.getCreated());\n\t\t\t\tfinal ZonedDateTime preparationDate = deliveryDayBL.calculatePreparationDateOrNull(\n\t\t\t\t\t\tcontextAwareSched,\n\t\t\t\t\t\tSOTrx.SALES,\n\t\t\t\t\t\tcalculationTime,\n\t\t\t\t\t\tdeliveryDate,\n\t\t\t\t\t\tbpLocationId);\n\n\t\t\t\t// In case the DeliveryDate Override is set, also update the preparationDate override\n\t\t\t\tsched.setPreparationDate_Override(TimeUtil.asTimestamp(preparationDate));\n\n\t\t\t}\n\n\t\t\tshipmentSchedulePA.save(sched);\n\t\t}\n\t}", "de.metas.swat/de.metas.swat.base/src/main/java/de/metas/inoutcandidate/api/impl/ShipmentScheduleUpdater.java"], "edit_seq": [["@", "@", "equal"], ["Visible", "Visible", "equal"], ["<con>", "<con>", "equal"], ["For", "For", "equal"], ["<con>", "<con>", "equal"], ["Testing", "Testing", "equal"], ["void", "void", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Schedules", "Schedules", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["Properties", "Properties", "equal"], ["ctx", "ctx", "equal"], [",", ",", "equal"], ["final", "final", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Ol", "Ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], [">", ">", "equal"], ["ols", "ols", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Scheds", "Scheds", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["ols", "ols", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Scheds", "Scheds", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["final", "final", "equal"], ["IB", "IB", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], ["bpartner", "bpartner", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], ["=", "=", "equal"], ["Services", "Services", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["IB", "IB", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], ["products", "products", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["=", "=", "equal"], ["Services", "Services", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Day", "Day", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Day", "Day", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], ["=", "=", "equal"], ["Services", "Services", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Day", "Day", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Effective", "Effective", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Effective", "Effective", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], ["=", "=", "equal"], ["Services", "Services", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Effective", "Effective", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Alloc", "Alloc", "equal"], ["<con>", "<con>", "equal"], ["DAO", "DAO", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Alloc", "Alloc", "equal"], ["<con>", "<con>", "equal"], ["DAO", "DAO", "equal"], ["=", "=", "equal"], ["Services", "Services", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Alloc", "Alloc", "equal"], ["<con>", "<con>", "equal"], ["DAO", "DAO", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["IB", "IB", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["DAO", "DAO", "equal"], ["bpartner", "bpartner", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["DAO", "DAO", "equal"], ["=", "=", "equal"], ["Services", "Services", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["IB", "IB", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["DAO", "DAO", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Day", "Day", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], ["delivery", "delivery", "equal"], ["<con>", "<con>", "equal"], ["Day", "Day", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], ["=", "=", "equal"], ["Services", "Services", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Day", "Day", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["Ol", "Ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], ["ol", "ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], [":", ":", "equal"], ["ols", "ols", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Scheds", "Scheds", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["M", "M", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["sched", "sched", "equal"], ["=", "=", "equal"], ["ol", "ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Catch", "Catch", "equal"], ["<con>", "<con>", "equal"], ["Uom", "Uom", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Warehouse", "Warehouse", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["BP", "BP", "equal"], ["<con>", "<con>", "equal"], ["Artner", "Artner", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Override", "Override", "equal"], ["<con>", "<con>", "equal"], ["If", "If", "equal"], ["<con>", "<con>", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Yet", "Yet", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Header", "Header", "equal"], ["<con>", "<con>", "equal"], ["Aggregation", "Aggregation", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Constraints", "Constraints", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["final", "final", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedules", "Schedules", "equal"], ["<con>", "<con>", "equal"], ["During", "During", "equal"], ["<con>", "<con>", "equal"], ["Update", "Update", "equal"], ["first", "first", "equal"], ["<con>", "<con>", "equal"], ["Run", "Run", "equal"], ["=", "=", "equal"], ["generate", "generate", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["First", "First", "equal"], ["<con>", "<con>", "equal"], ["Run", "Run", "equal"], ["(", "(", "equal"], ["ctx", "ctx", "equal"], [",", ",", "equal"], ["ols", "ols", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Scheds", "Scheds", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["first", "first", "equal"], ["<con>", "<con>", "equal"], ["Run", "Run", "equal"], [".", ".", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Complete", "Complete", "equal"], ["<con>", "<con>", "equal"], ["Status", "Status", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Zero", "Zero", "equal"], ["<con>", "<con>", "equal"], ["Where", "Where", "equal"], ["<con>", "<con>", "equal"], ["Needed", "Needed", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["int", "int", "equal"], ["remove", "remove", "equal"], ["<con>", "<con>", "equal"], ["Cnt", "Cnt", "equal"], ["=", "=", "equal"], ["apply", "apply", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["<con>", "<con>", "equal"], ["Processors", "Processors", "equal"], ["(", "(", "equal"], ["ctx", "ctx", "equal"], [",", ",", "equal"], ["first", "first", "equal"], ["<con>", "<con>", "equal"], ["Run", "Run", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["logger", "logger", "equal"], [".", ".", "equal"], ["info", "info", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["records", "records", "equal"], ["were", "were", "equal"], ["discarded", "discarded", "equal"], ["by", "by", "equal"], ["candidate", "candidate", "equal"], ["processors", "processors", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["remove", "remove", "equal"], ["<con>", "<con>", "equal"], ["Cnt", "Cnt", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Line", "Line", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["Out", "Out", "equal"], ["<con>", "<con>", "equal"], ["Line", "Line", "equal"], [":", ":", "equal"], ["first", "first", "equal"], ["<con>", "<con>", "equal"], ["Run", "Run", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["<con>", "<con>", "equal"], ["Lines", "Lines", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["Out", "Out", "equal"], ["<con>", "<con>", "equal"], ["Line", "Line", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Discarded", "Discarded", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["Out", "Out", "equal"], ["<con>", "<con>", "equal"], ["Line", "Line", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Deliver", "Deliver", "equal"], ["(", "(", "equal"], ["Big", "Big", "equal"], ["<con>", "<con>", "equal"], ["Decimal", "Decimal", "equal"], [".", ".", "equal"], ["ZERO", "ZERO", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["Out", "Out", "equal"], ["<con>", "<con>", "equal"], ["Line", "Line", "equal"], [".", ".", "equal"], ["remove", "remove", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Group", "Group", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["first", "first", "equal"], ["<con>", "<con>", "equal"], ["Run", "Run", "equal"], [".", ".", "equal"], ["remove", "remove", "equal"], ["<con>", "<con>", "equal"], ["Line", "Line", "equal"], ["(", "(", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["Out", "Out", "equal"], ["<con>", "<con>", "equal"], ["Line", "Line", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedules", "Schedules", "equal"], ["<con>", "<con>", "equal"], ["During", "During", "equal"], ["<con>", "<con>", "equal"], ["Update", "Update", "equal"], ["second", "second", "equal"], ["<con>", "<con>", "equal"], ["Run", "Run", "equal"], ["=", "=", "equal"], ["generate", "generate", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Second", "Second", "equal"], ["<con>", "<con>", "equal"], ["Run", "Run", "equal"], ["(", "(", "equal"], ["ctx", "ctx", "equal"], [",", ",", "equal"], ["ols", "ols", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Scheds", "Scheds", "equal"], [",", ",", "equal"], ["first", "first", "equal"], ["<con>", "<con>", "equal"], ["Run", "Run", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["Ol", "Ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], ["ol", "ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], [":", ":", "equal"], ["ols", "ols", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Scheds", "Scheds", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["M", "M", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["sched", "sched", "equal"], ["=", "=", "equal"], ["ol", "ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["I", "", "delete"], ["<con>", "", "delete"], ["Deliver", "", "delete"], ["<con>", "", "delete"], ["Request", "", "delete"], ["deliver", "", "delete"], ["<con>", "", "delete"], ["Request", "", "delete"], ["=", "", "delete"], ["ol", "", "delete"], ["<con>", "", "delete"], ["And", "", "delete"], ["<con>", "", "delete"], ["Sched", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Deliver", "", "delete"], ["<con>", "", "delete"], ["Request", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["final", "", "delete"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["bpartner", "bpartner", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["=", "=", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Effective", "Effective", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Allow", "Allow", "equal"], ["<con>", "<con>", "equal"], ["Consolidate", "Consolidate", "equal"], ["<con>", "<con>", "equal"], ["In", "In", "equal"], ["<con>", "<con>", "equal"], ["Out", "Out", "equal"], ["(", "(", "equal"], ["bpartner", "bpartner", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Allow", "Allow", "equal"], ["<con>", "<con>", "equal"], ["Consolidate", "Consolidate", "equal"], ["<con>", "<con>", "equal"], ["In", "In", "equal"], ["<con>", "<con>", "equal"], ["Out", "Out", "equal"], ["<con>", "<con>", "equal"], ["Effective", "Effective", "equal"], ["(", "(", "equal"], ["bpartner", "bpartner", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [",", ",", "equal"], ["SO", "SO", "equal"], ["<con>", "<con>", "equal"], ["Trx", "Trx", "equal"], [".", ".", "equal"], ["SALES", "SALES", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Preparation", "Preparation", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Day", "Day", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Day", "Day", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Big", "Big", "equal"], ["<con>", "<con>", "equal"], ["Decimal", "Decimal", "equal"], ["qty", "qty", "equal"], ["<con>", "<con>", "equal"], ["Delivered", "Delivered", "equal"], ["=", "=", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Alloc", "Alloc", "equal"], ["<con>", "<con>", "equal"], ["DAO", "DAO", "equal"], [".", ".", "equal"], ["retrieve", "retrieve", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["Delivered", "Delivered", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["Delivered", "Delivered", "equal"], ["(", "(", "equal"], ["qty", "qty", "equal"], ["<con>", "<con>", "equal"], ["Delivered", "Delivered", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["Reserved", "Reserved", "equal"], ["(", "(", "equal"], ["Big", "Big", "equal"], ["<con>", "<con>", "equal"], ["Decimal", "Decimal", "equal"], [".", ".", "equal"], ["ZERO", "ZERO", "equal"], [".", ".", "equal"], ["max", "max", "equal"], ["(", "(", "equal"], ["deliver", "ol", "replace"], ["<con>", "<con>", "equal"], ["", "And", "insert"], ["", "<con>", "insert"], ["Request", "Sched", "replace"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["Ordered", "Ordered", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["subtract", "subtract", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["Delivered", "Delivered", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Line", "Line", "equal"], ["<con>", "<con>", "equal"], ["Net", "Net", "equal"], ["<con>", "<con>", "equal"], ["Amt", "Amt", "equal"], ["(", "(", "equal"], ["ol", "ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Shipment", "Shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Qtys", "Qtys", "equal"], ["<con>", "<con>", "equal"], ["Helper", "Helper", "equal"], [".", ".", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Deliver", "Deliver", "equal"], ["(", "(", "equal"], ["ol", "ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], [",", ",", "equal"], ["second", "second", "equal"], ["<con>", "<con>", "equal"], ["Run", "Run", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["mark", "mark", "equal"], ["<con>", "<con>", "equal"], ["As", "As", "equal"], ["<con>", "<con>", "equal"], ["Changed", "Changed", "equal"], ["<con>", "<con>", "equal"], ["By", "By", "equal"], ["<con>", "<con>", "equal"], ["Update", "Update", "equal"], ["<con>", "<con>", "equal"], ["Process", "Process", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["ol", "ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], [".", ".", "equal"], ["has", "has", "equal"], ["<con>", "<con>", "equal"], ["Sales", "Sales", "equal"], ["<con>", "<con>", "equal"], ["Order", "Order", "equal"], ["<con>", "<con>", "equal"], ["Line", "Line", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["Doc", "Doc", "equal"], ["<con>", "<con>", "equal"], ["Status", "Status", "equal"], ["order", "order", "equal"], ["<con>", "<con>", "equal"], ["Doc", "Doc", "equal"], ["<con>", "<con>", "equal"], ["Status", "Status", "equal"], ["=", "=", "equal"], ["ol", "ol", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Order", "Order", "equal"], ["<con>", "<con>", "equal"], ["Doc", "Doc", "equal"], ["<con>", "<con>", "equal"], ["Status", "Status", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["order", "order", "equal"], ["<con>", "<con>", "equal"], ["Doc", "Doc", "equal"], ["<con>", "<con>", "equal"], ["Status", "Status", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Completed", "Completed", "equal"], ["<con>", "<con>", "equal"], ["Or", "Or", "equal"], ["<con>", "<con>", "equal"], ["Closed", "Closed", "equal"], ["<con>", "<con>", "equal"], ["Or", "Or", "equal"], ["<con>", "<con>", "equal"], ["Reversed", "Reversed", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["&&", "&&", "equal"], ["!", "!", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Processed", "Processed", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["&&", "&&", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["Delivered", "Delivered", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["signum", "signum", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["==", "==", "equal"], ["0", "0", "equal"], ["&&", "&&", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["Pick", "Pick", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["signum", "signum", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["==", "==", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["logger", "logger", "equal"], [".", ".", "equal"], ["debug", "debug", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Deliver", "Deliver", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Override", "Override", "equal"], ["<con>", "<con>", "equal"], ["=", "=", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Deliver", "Deliver", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Override", "Override", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["+", "+", "equal"], ["\"", "\"", "equal"], [";", ";", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["Reserved", "Reserved", "equal"], ["<con>", "<con>", "equal"], ["=", "=", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["Reserved", "Reserved", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["+", "+", "equal"], ["\"", "\"", "equal"], [";", ";", "equal"], ["Doc", "Doc", "equal"], ["<con>", "<con>", "equal"], ["Status", "Status", "equal"], ["<con>", "<con>", "equal"], ["=", "=", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["order", "order", "equal"], ["<con>", "<con>", "equal"], ["Doc", "Doc", "equal"], ["<con>", "<con>", "equal"], ["Status", "Status", "equal"], ["+", "+", "equal"], ["\"", "\"", "equal"], [";", ";", "equal"], ["=", "=", "equal"], ["<con>", "<con>", "equal"], [">", ">", "equal"], ["Deleting", "Deleting", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Interface", "Interface", "equal"], ["<con>", "<con>", "equal"], ["Wrapper", "Wrapper", "equal"], ["<con>", "<con>", "equal"], ["Helper", "Helper", "equal"], [".", ".", "equal"], ["delete", "delete", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["continue", "continue", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["update", "update", "equal"], ["<con>", "<con>", "equal"], ["Processed", "Processed", "equal"], ["<con>", "<con>", "equal"], ["Flag", "Flag", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Processed", "Processed", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["boolean", "boolean", "equal"], ["delivery", "delivery", "equal"], ["<con>", "<con>", "equal"], ["Rule", "Rule", "equal"], ["<con>", "<con>", "equal"], ["Is", "Is", "equal"], ["<con>", "<con>", "equal"], ["Forced", "Forced", "equal"], ["=", "=", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Rule", "Rule", "equal"], [".", ".", "equal"], ["FORCE", "FORCE", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["(", "(", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Effective", "Effective", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Rule", "Rule", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["delivery", "delivery", "equal"], ["<con>", "<con>", "equal"], ["Rule", "Rule", "equal"], ["<con>", "<con>", "equal"], ["Is", "Is", "equal"], ["<con>", "<con>", "equal"], ["Forced", "Forced", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Deliver", "Deliver", "equal"], ["(", "(", "equal"], ["Big", "Big", "equal"], ["<con>", "<con>", "equal"], ["Decimal", "Decimal", "equal"], [".", ".", "equal"], ["ZERO", "ZERO", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["PA", "PA", "equal"], [".", ".", "equal"], ["save", "save", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["Check", "Check", "equal"], [".", ".", "equal"], ["error", "error", "equal"], ["<con>", "<con>", "equal"], ["Unless", "Unless", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Deliver", "Deliver", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["signum", "signum", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["==", "==", "equal"], ["0", "0", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["has", "has", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Deliver", "Deliver", "equal"], ["=", "=", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["(", "(", "equal"], ["<con>", "<con>", "equal"], ["should", "should", "equal"], ["be", "be", "equal"], ["zero", "zero", "equal"], ["<con>", "<con>", "equal"], [")", ")", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["sched", "sched", "equal"], [",", ",", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Deliver", "Deliver", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["continue", "continue", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["final", "final", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["partner", "partner", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["=", "=", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["Repo", "Repo", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ID", "ID", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["product", "product", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["=", "=", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["Repo", "Repo", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["M", "M", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ID", "ID", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["M", "M", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["product", "product", "equal"], ["=", "=", "equal"], ["products", "products", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["By", "By", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["product", "product", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Org", "Org", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["org", "org", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["=", "=", "equal"], ["Org", "Org", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["Repo", "Repo", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["product", "product", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["AD", "AD", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Org", "Org", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ID", "ID", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["bpp", "bpp", "equal"], ["=", "=", "equal"], ["bpartner", "bpartner", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["DAO", "DAO", "equal"], [".", ".", "equal"], ["retrieve", "retrieve", "equal"], ["<con>", "<con>", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["Association", "Association", "equal"], ["(", "(", "equal"], ["ctx", "ctx", "equal"], [",", ",", "equal"], ["partner", "partner", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [",", ",", "equal"], ["product", "product", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [",", ",", "equal"], ["org", "org", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["bpp", "bpp", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Is", "Is", "equal"], ["<con>", "<con>", "equal"], ["Drop", "Drop", "equal"], ["<con>", "<con>", "equal"], ["Ship", "Ship", "equal"], ["(", "(", "equal"], ["false", "false", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["boolean", "boolean", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Drop", "Drop", "equal"], ["<con>", "<con>", "equal"], ["Ship", "Ship", "equal"], ["=", "=", "equal"], ["bpp", "bpp", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Drop", "Drop", "equal"], ["<con>", "<con>", "equal"], ["Ship", "Ship", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Drop", "Drop", "equal"], ["<con>", "<con>", "equal"], ["Ship", "Ship", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Vendor", "Vendor", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ID", "ID", "equal"], ["(", "(", "equal"], ["bpp", "bpp", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Vendor", "Vendor", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ID", "ID", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Is", "Is", "equal"], ["<con>", "<con>", "equal"], ["Drop", "Drop", "equal"], ["<con>", "<con>", "equal"], ["Ship", "Ship", "equal"], ["(", "(", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Drop", "Drop", "equal"], ["<con>", "<con>", "equal"], ["Ship", "Ship", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Override", "Override", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["!=", "!=", "equal"], ["null", "null", "equal"], ["&&", "&&", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Preparation", "Preparation", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Override", "Override", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["Zoned", "Zoned", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["delivery", "delivery", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["=", "=", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Effective", "Effective", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Delivery", "Delivery", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["Context", "Context", "equal"], ["<con>", "<con>", "equal"], ["Aware", "Aware", "equal"], ["context", "context", "equal"], ["<con>", "<con>", "equal"], ["Aware", "Aware", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], ["=", "=", "equal"], ["Interface", "Interface", "equal"], ["<con>", "<con>", "equal"], ["Wrapper", "Wrapper", "equal"], ["<con>", "<con>", "equal"], ["Helper", "Helper", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Context", "Context", "equal"], ["<con>", "<con>", "equal"], ["Aware", "Aware", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["Location", "Location", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["bp", "bp", "equal"], ["<con>", "<con>", "equal"], ["Location", "Location", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["=", "=", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["Effective", "Effective", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["Location", "Location", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Zoned", "Zoned", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["calculation", "calculation", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["=", "=", "equal"], ["Time", "Time", "equal"], ["<con>", "<con>", "equal"], ["Util", "Util", "equal"], [".", ".", "equal"], ["as", "as", "equal"], ["<con>", "<con>", "equal"], ["Zoned", "Zoned", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Created", "Created", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Zoned", "Zoned", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["preparation", "preparation", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["=", "=", "equal"], ["delivery", "delivery", "equal"], ["<con>", "<con>", "equal"], ["Day", "Day", "equal"], ["<con>", "<con>", "equal"], ["BL", "BL", "equal"], [".", ".", "equal"], ["calculate", "calculate", "equal"], ["<con>", "<con>", "equal"], ["Preparation", "Preparation", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["<con>", "<con>", "equal"], ["Or", "Or", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["(", "(", "equal"], ["context", "context", "equal"], ["<con>", "<con>", "equal"], ["Aware", "Aware", "equal"], ["<con>", "<con>", "equal"], ["Sched", "Sched", "equal"], [",", ",", "equal"], ["SO", "SO", "equal"], ["<con>", "<con>", "equal"], ["Trx", "Trx", "equal"], [".", ".", "equal"], ["SALES", "SALES", "equal"], [",", ",", "equal"], ["calculation", "calculation", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], [",", ",", "equal"], ["delivery", "delivery", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], [",", ",", "equal"], ["bp", "bp", "equal"], ["<con>", "<con>", "equal"], ["Location", "Location", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["sched", "sched", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Preparation", "Preparation", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Override", "Override", "equal"], ["(", "(", "equal"], ["Time", "Time", "equal"], ["<con>", "<con>", "equal"], ["Util", "Util", "equal"], [".", ".", "equal"], ["as", "as", "equal"], ["<con>", "<con>", "equal"], ["Timestamp", "Timestamp", "equal"], ["(", "(", "equal"], ["preparation", "preparation", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["shipment", "shipment", "equal"], ["<con>", "<con>", "equal"], ["Schedule", "Schedule", "equal"], ["<con>", "<con>", "equal"], ["PA", "PA", "equal"], [".", ".", "equal"], ["save", "save", "equal"], ["(", "(", "equal"], ["sched", "sched", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@Timed@ExceptionMetered@POST@Consumes(APPLICATION_JSON)public Response createSecret(@Auth AutomationClient automationClient, @Valid CreateSecretRequestV2 request) { String name = request.name(); SecretBuilder builder = secretController.builder(name, request.content(), automationClient.getName(), request.expiry()).withDescription(request.description()).withMetadata(request.metadata()).withType(request.type()); if(request.versioned()) { builder.withVersion(VersionGenerator.now().toHex()); } Secret secret; try { secret = builder.build(); } catch(DataAccessException e) { logger.warn(\"Cannot create secret {}: {}\", name, e); throw new ConflictException(format(\"Cannot create secret %s.\", name)); } long secretId = secret.getId(); groupsToGroupIds(request.groups()).forEach((maybeGroupId) -> maybeGroupId.ifPresent((groupId) -> aclDAO.findAndAllowAccess(secretId, groupId))); UriBuilder uriBuilder = UriBuilder.fromResource(SecretResource.class).path(name); if(request.versioned()) { uriBuilder.path(secret.getVersion()); } return Response.created(uriBuilder.build()).build(); } ", "focal_tgt": "@Timed@ExceptionMetered@POST@Consumes(APPLICATION_JSON)public Response createSecret(@Auth AutomationClient automationClient, @Valid CreateSecretRequestV2 request) { String name = request.name(); SecretBuilder builder = secretController.builder(name, request.content(), automationClient.getName(), request.expiry()).withDescription(request.description()).withMetadata(request.metadata()).withType(request.type()); if(request.versioned()) { logger.error(\"Deprecated version feature still in use for %s!\", name); builder.withVersion(VersionGenerator.now().toHex()); } Secret secret; try { secret = builder.build(); } catch(DataAccessException e) { logger.warn(\"Cannot create secret {}: {}\", name, e); throw new ConflictException(format(\"Cannot create secret %s.\", name)); } long secretId = secret.getId(); groupsToGroupIds(request.groups()).forEach((maybeGroupId) -> maybeGroupId.ifPresent((groupId) -> aclDAO.findAndAllowAccess(secretId, groupId))); UriBuilder uriBuilder = UriBuilder.fromResource(SecretResource.class).path(name); if(request.versioned()) { uriBuilder.path(secret.getVersion()); } return Response.created(uriBuilder.build()).build(); } ", "test_src": "@Test public void createSecret_successUnVersioned()throws Exception { CreateSecretRequestV2 request = CreateSecretRequestV2.builder().name(\"secret1\").content(encoder.encodeToString(\"supa secret\".getBytes(UTF_8))).description(\"desc\").metadata(ImmutableMap.of(\"owner\", \"root\", \"mode\", \"0440\")).type(\"password\").build(); Response httpResponse = create(request); assertThat(httpResponse.code()).isEqualTo(201); URI location = URI.create(httpResponse.header(LOCATION)); assertThat(location.getPath()).isEqualTo(\"/automation/v2/secrets/secret1\"); } ", "label": 0, "focal_db": [3565123, "square/keywhiz", "/data/comment_repos/square@keywhiz", "9b36b3714f7a01eab689216226a80f3d34588805", "e1c0a85333ce5a6117f137e4980159891a4a3e94", "server/src/main/java/keywhiz/service/resources/automation/v2/SecretResource.java", "2b1e68feaacc389ce3099f1abb569c92e296a152", "server/src/main/java/keywhiz/service/resources/automation/v2/SecretResource.java", "@Timed @ExceptionMetered\n  @POST\n  @Consumes(APPLICATION_JSON)\n  public Response createSecret(@Auth AutomationClient automationClient,\n      @Valid CreateSecretRequestV2 request) {\n    // allows new version, return version in resulting path\n    String name = request.name();\n\n    SecretBuilder builder = secretController\n        .builder(name, request.content(), automationClient.getName(), request.expiry())\n        .withDescription(request.description())\n        .withMetadata(request.metadata())\n        .withType(request.type());\n\n    if (request.versioned()) {\n      builder.withVersion(VersionGenerator.now().toHex());\n    }\n\n    Secret secret;\n    try {\n      secret = builder.build();\n    } catch (DataAccessException e) {\n      logger.warn(\"Cannot create secret {}: {}\", name, e);\n      throw new ConflictException(format(\"Cannot create secret %s.\", name));\n    }\n\n    long secretId = secret.getId();\n    groupsToGroupIds(request.groups())\n        .forEach((maybeGroupId) -> maybeGroupId.ifPresent(\n            (groupId) -> aclDAO.findAndAllowAccess(secretId, groupId)));\n\n    UriBuilder uriBuilder = UriBuilder.fromResource(SecretResource.class).path(name);\n\n    if (request.versioned()) {\n      uriBuilder.path(secret.getVersion());\n    }\n\n    return Response.created(uriBuilder.build()).build();\n  }", "/**\n * Creates a secret and assigns to given groups\n *\n * @excludeParams automationClient\n * @param request JSON request to create a secret\n *\n * @responseMessage 201 Created secret and assigned to given groups\n * @responseMessage 409 Secret already exists\n */\n", "@Timed @ExceptionMetered\n  @POST\n  @Consumes(APPLICATION_JSON)\n  public Response createSecret(@Auth AutomationClient automationClient,\n      @Valid CreateSecretRequestV2 request) {\n    // allows new version, return version in resulting path\n    String name = request.name();\n\n    SecretBuilder builder = secretController\n        .builder(name, request.content(), automationClient.getName(), request.expiry())\n        .withDescription(request.description())\n        .withMetadata(request.metadata())\n        .withType(request.type());\n\n    if (request.versioned()) {\n      logger.error(\"Deprecated version feature still in use for %s!\", name);\n      builder.withVersion(VersionGenerator.now().toHex());\n    }\n\n    Secret secret;\n    try {\n      secret = builder.build();\n    } catch (DataAccessException e) {\n      logger.warn(\"Cannot create secret {}: {}\", name, e);\n      throw new ConflictException(format(\"Cannot create secret %s.\", name));\n    }\n\n    long secretId = secret.getId();\n    groupsToGroupIds(request.groups())\n        .forEach((maybeGroupId) -> maybeGroupId.ifPresent(\n            (groupId) -> aclDAO.findAndAllowAccess(secretId, groupId)));\n\n    UriBuilder uriBuilder = UriBuilder.fromResource(SecretResource.class).path(name);\n\n    if (request.versioned()) {\n      uriBuilder.path(secret.getVersion());\n    }\n\n    return Response.created(uriBuilder.build()).build();\n  }", "/**\n * Creates a secret and assigns to given groups\n *\n * @excludeParams automationClient\n * @param request JSON request to create a secret\n *\n * @responseMessage 201 Created secret and assigned to given groups\n * @responseMessage 409 Secret already exists\n */\n"], "test_db": ["b2f476d08764385303272d2e0797b4b8f3fe5c04", "square/keywhiz", "/data/comment_repos/square@keywhiz", "createSecret", "/data/comment_repos/square@keywhiz/server/src/test/java/keywhiz/service/resources/automation/v2/SecretResourceTest.java", "createSecret_successUnVersioned", "  @Test public void createSecret_successUnVersioned() throws Exception {\n    CreateSecretRequestV2 request = CreateSecretRequestV2.builder()\n        .name(\"secret1\")\n        .content(encoder.encodeToString(\"supa secret\".getBytes(UTF_8)))\n        .description(\"desc\")\n        .metadata(ImmutableMap.of(\"owner\", \"root\", \"mode\", \"0440\"))\n        .type(\"password\")\n        .build();\n    Response httpResponse = create(request);\n    assertThat(httpResponse.code()).isEqualTo(201);\n    URI location = URI.create(httpResponse.header(LOCATION));\n    assertThat(location.getPath()).isEqualTo(\"/automation/v2/secrets/secret1\");\n  }", "@Timed @ExceptionMetered\n  @POST\n  @Consumes(APPLICATION_JSON)\n  public Response createSecret(@Auth AutomationClient automationClient,\n      @Valid CreateSecretRequestV2 request) {\n    // allows new version, return version in resulting path\n    String name = request.name();\n\n    SecretBuilder builder = secretController\n        .builder(name, request.content(), automationClient.getName())\n        .withDescription(request.description())\n        .withMetadata(request.metadata())\n        .withType(request.type());\n\n    if (request.versioned()) {\n      builder.withVersion(VersionGenerator.now().toHex());\n    }\n\n    Secret secret;\n    try {\n      secret = builder.build();\n    } catch (DataAccessException e) {\n      logger.warn(\"Cannot create secret {}: {}\", name, e);\n      throw new ConflictException(format(\"Cannot create secret %s.\", name));\n    }\n\n    long secretId = secret.getId();\n    groupsToGroupIds(request.groups())\n        .forEach((maybeGroupId) -> maybeGroupId.ifPresent(\n            (groupId) -> aclDAO.findAndAllowAccess(secretId, groupId)));\n\n    UriBuilder uriBuilder = UriBuilder.fromResource(SecretResource.class).path(name);\n\n    if (request.versioned()) {\n      uriBuilder.path(secret.getVersion());\n    }\n\n    return Response.created(uriBuilder.build()).build();\n  }", "server/src/main/java/keywhiz/service/resources/automation/v2/SecretResource.java", "@Timed @ExceptionMetered\n  @POST\n  @Consumes(APPLICATION_JSON)\n  public Response createSecret(@Auth AutomationClient automationClient,\n      @Valid CreateSecretRequestV2 request) {\n    // allows new version, return version in resulting path\n    String name = request.name();\n\n    SecretBuilder builder = secretController\n        .builder(name, request.content(), automationClient.getName(), request.expiry())\n        .withDescription(request.description())\n        .withMetadata(request.metadata())\n        .withType(request.type());\n\n    if (request.versioned()) {\n      builder.withVersion(VersionGenerator.now().toHex());\n    }\n\n    Secret secret;\n    try {\n      secret = builder.build();\n    } catch (DataAccessException e) {\n      logger.warn(\"Cannot create secret {}: {}\", name, e);\n      throw new ConflictException(format(\"Cannot create secret %s.\", name));\n    }\n\n    long secretId = secret.getId();\n    groupsToGroupIds(request.groups())\n        .forEach((maybeGroupId) -> maybeGroupId.ifPresent(\n            (groupId) -> aclDAO.findAndAllowAccess(secretId, groupId)));\n\n    UriBuilder uriBuilder = UriBuilder.fromResource(SecretResource.class).path(name);\n\n    if (request.versioned()) {\n      uriBuilder.path(secret.getVersion());\n    }\n\n    return Response.created(uriBuilder.build()).build();\n  }", "server/src/main/java/keywhiz/service/resources/automation/v2/SecretResource.java"], "edit_seq": [["@", "@", "equal"], ["Timed", "Timed", "equal"], ["@", "@", "equal"], ["Exception", "Exception", "equal"], ["<con>", "<con>", "equal"], ["Metered", "Metered", "equal"], ["@", "@", "equal"], ["POST", "POST", "equal"], ["@", "@", "equal"], ["Consumes", "Consumes", "equal"], ["(", "(", "equal"], ["APPLICATION", "APPLICATION", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["JSON", "JSON", "equal"], [")", ")", "equal"], ["public", "public", "equal"], ["Response", "Response", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Secret", "Secret", "equal"], ["(", "(", "equal"], ["@", "@", "equal"], ["Auth", "Auth", "equal"], ["Automation", "Automation", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["automation", "automation", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [",", ",", "equal"], ["@", "@", "equal"], ["Valid", "Valid", "equal"], ["Create", "Create", "equal"], ["<con>", "<con>", "equal"], ["Secret", "Secret", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], ["<con>", "<con>", "equal"], ["V2", "V2", "equal"], ["request", "request", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["String", "String", "equal"], ["name", "name", "equal"], ["=", "=", "equal"], ["request", "request", "equal"], [".", ".", "equal"], ["name", "name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Secret", "Secret", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["builder", "builder", "equal"], ["=", "=", "equal"], ["secret", "secret", "equal"], ["<con>", "<con>", "equal"], ["Controller", "Controller", "equal"], [".", ".", "equal"], ["builder", "builder", "equal"], ["(", "(", "equal"], ["name", "name", "equal"], [",", ",", "equal"], ["request", "request", "equal"], [".", ".", "equal"], ["content", "content", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["automation", "automation", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["request", "request", "equal"], [".", ".", "equal"], ["expiry", "expiry", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["with", "with", "equal"], ["<con>", "<con>", "equal"], ["Description", "Description", "equal"], ["(", "(", "equal"], ["request", "request", "equal"], [".", ".", "equal"], ["description", "description", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["with", "with", "equal"], ["<con>", "<con>", "equal"], ["Metadata", "Metadata", "equal"], ["(", "(", "equal"], ["request", "request", "equal"], [".", ".", "equal"], ["metadata", "metadata", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["with", "with", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], ["(", "(", "equal"], ["request", "request", "equal"], [".", ".", "equal"], ["type", "type", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["request", "request", "equal"], [".", ".", "equal"], ["versioned", "versioned", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["", "logger", "insert"], ["", ".", "insert"], ["", "error", "insert"], ["", "(", "insert"], ["", "\"", "insert"], ["", "Deprecated", "insert"], ["", "version", "insert"], ["", "feature", "insert"], ["", "still", "insert"], ["", "in", "insert"], ["", "use", "insert"], ["", "for", "insert"], ["", "%", "insert"], ["", "<con>", "insert"], ["", "s", "insert"], ["", "<con>", "insert"], ["", "!", "insert"], ["", "\"", "insert"], ["", ",", "insert"], ["", "name", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["builder", "builder", "equal"], [".", ".", "equal"], ["with", "with", "equal"], ["<con>", "<con>", "equal"], ["Version", "Version", "equal"], ["(", "(", "equal"], ["Version", "Version", "equal"], ["<con>", "<con>", "equal"], ["Generator", "Generator", "equal"], [".", ".", "equal"], ["now", "now", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Hex", "Hex", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["Secret", "Secret", "equal"], ["secret", "secret", "equal"], [";", ";", "equal"], ["try", "try", "equal"], ["{", "{", "equal"], ["secret", "secret", "equal"], ["=", "=", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["build", "build", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Access", "Access", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["e", "e", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["logger", "logger", "equal"], [".", ".", "equal"], ["warn", "warn", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Can", "Can", "equal"], ["<con>", "<con>", "equal"], ["not", "not", "equal"], ["create", "create", "equal"], ["secret", "secret", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["name", "name", "equal"], [",", ",", "equal"], ["e", "e", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Conflict", "Conflict", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["format", "format", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Can", "Can", "equal"], ["<con>", "<con>", "equal"], ["not", "not", "equal"], ["create", "create", "equal"], ["secret", "secret", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["s", "s", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["name", "name", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["long", "long", "equal"], ["secret", "secret", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["=", "=", "equal"], ["secret", "secret", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["groups", "groups", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Group", "Group", "equal"], ["<con>", "<con>", "equal"], ["Ids", "Ids", "equal"], ["(", "(", "equal"], ["request", "request", "equal"], [".", ".", "equal"], ["groups", "groups", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["for", "for", "equal"], ["<con>", "<con>", "equal"], ["Each", "Each", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["maybe", "maybe", "equal"], ["<con>", "<con>", "equal"], ["Group", "Group", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], ["->", "->", "equal"], ["maybe", "maybe", "equal"], ["<con>", "<con>", "equal"], ["Group", "Group", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [".", ".", "equal"], ["if", "if", "equal"], ["<con>", "<con>", "equal"], ["Present", "Present", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["group", "group", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], ["->", "->", "equal"], ["acl", "acl", "equal"], ["<con>", "<con>", "equal"], ["DAO", "DAO", "equal"], [".", ".", "equal"], ["find", "find", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Allow", "Allow", "equal"], ["<con>", "<con>", "equal"], ["Access", "Access", "equal"], ["(", "(", "equal"], ["secret", "secret", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [",", ",", "equal"], ["group", "group", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Uri", "Uri", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["uri", "uri", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["=", "=", "equal"], ["Uri", "Uri", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], [".", ".", "equal"], ["from", "from", "equal"], ["<con>", "<con>", "equal"], ["Resource", "Resource", "equal"], ["(", "(", "equal"], ["Secret", "Secret", "equal"], ["<con>", "<con>", "equal"], ["Resource", "Resource", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["(", "(", "equal"], ["name", "name", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["request", "request", "equal"], [".", ".", "equal"], ["versioned", "versioned", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["uri", "uri", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["(", "(", "equal"], ["secret", "secret", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Version", "Version", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["Response", "Response", "equal"], [".", ".", "equal"], ["created", "created", "equal"], ["(", "(", "equal"], ["uri", "uri", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], [".", ".", "equal"], ["build", "build", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["build", "build", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static boolean isAssignable(Class < ? > []classArray, Class < ? > []toClassArray) { return isAssignable(classArray, toClassArray, false); } ", "focal_tgt": "public static boolean isAssignable(Class < ? > []classArray, Class < ? > []toClassArray) { return isAssignable(classArray, toClassArray, SystemUtils.isJavaVersionAtLeast(1.5f)); } ", "test_src": "@Test public void test_isAssignable() { assertFalse(ClassUtils.isAssignable((Class < ? > )null, null)); assertFalse(ClassUtils.isAssignable(String.class, null)); assertTrue(ClassUtils.isAssignable(null, Object.class)); assertTrue(ClassUtils.isAssignable(null, Integer.class)); assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); assertTrue(ClassUtils.isAssignable(String.class, Object.class)); assertTrue(ClassUtils.isAssignable(String.class, String.class)); assertFalse(ClassUtils.isAssignable(Object.class, String.class)); assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class)); assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class)); assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE)); assertTrue(ClassUtils.isAssignable(Integer.class, Object.class)); assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Object.class)); assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class)); assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); } ", "label": 0, "focal_db": [581490, "apache/commons-lang", "/data/comment_repos/apache@commons-lang", "240b7a92f63bec0a81ec8707e6b08115da368590", "118760909d10c9abca51d1358d097619dd753083", "src/main/java/org/apache/commons/lang3/ClassUtils.java", "85fda048eebfb42f97b36d02056cdae17d42cf7c", "src/main/java/org/apache/commons/lang3/ClassUtils.java", "public static boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray) {\n        return isAssignable(classArray, toClassArray, false);\n    }", "// TODO when we bump the major version we should default autoboxing to true on platforms >= 1.5\n", "public static boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray) {\n        return isAssignable(classArray, toClassArray, SystemUtils.isJavaVersionAtLeast(1.5f));\n    }", "/**\n * <p>Checks if an array of Classes can be assigned to another array of Classes.</p>\n *\n * <p>This method calls {@link #isAssignable(Class, Class) isAssignable} for each\n * Class pair in the input arrays. It can be used to check if a set of arguments\n * (the first parameter) are suitably compatible with a set of method parameter types\n * (the second parameter).</p>\n *\n * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this\n * method takes into account widenings of primitive classes and\n * <code>null</code>s.</p>\n *\n * <p>Primitive widenings allow an int to be assigned to a <code>long</code>,\n * <code>float</code> or <code>double</code>. This method returns the correct\n * result for these cases.</p>\n *\n * <p><code>Null</code> may be assigned to any reference type. This method will\n * return <code>true</code> if <code>null</code> is passed in and the toClass is\n * non-primitive.</p>\n *\n * <p>Specifically, this method tests whether the type represented by the\n * specified <code>Class</code> parameter can be converted to the type\n * represented by this <code>Class</code> object via an identity conversion\n * widening primitive or widening reference conversion. See\n * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n *\n * <p><strong>Since Lang 3.0,</strong> this method will default behavior for\n * calculating assignability between primitive and wrapper types <em>corresponding\n * to the running Java version</em>; i.e. autoboxing will be the default\n * behavior in VMs running Java versions >= 1.5.</p>\n *\n * @param classArray  the array of Classes to check, may be <code>null</code>\n * @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>\n * @return <code>true</code> if assignment possible\n */\n"], "test_db": ["bcfc9c2602b35bb4a6e5012430b4bfcc36796fd4", "apache/commons-lang", "/data/comment_repos/apache@commons-lang", "isAssignable", "/data/comment_repos/apache@commons-lang/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java", "test_isAssignable", "    @Test\n    public void test_isAssignable() {\n        assertFalse(ClassUtils.isAssignable((Class<?>) null, null));\n        assertFalse(ClassUtils.isAssignable(String.class, null));\n\n        assertTrue(ClassUtils.isAssignable(null, Object.class));\n        assertTrue(ClassUtils.isAssignable(null, Integer.class));\n        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));\n        assertTrue(ClassUtils.isAssignable(String.class, Object.class));\n        assertTrue(ClassUtils.isAssignable(String.class, String.class));\n        assertFalse(ClassUtils.isAssignable(Object.class, String.class));\n\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Object.class));\n        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Object.class));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class));\n        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));\n    }", "public static boolean isAssignable(Class cls, Class toClass) {\n        if (toClass == null) {\n            throw new IllegalArgumentException(\"The class must not be null\");\n        }\n        // have to check for null, as isAssignableFrom doesn't\n        if (cls == null) {\n            return !(toClass.isPrimitive());\n        }\n        if (cls.equals(toClass)) {\n            return true;\n        }\n        if (cls.isPrimitive()) {\n            if (toClass.isPrimitive() == false) {\n                return false;\n            }\n            if (Integer.TYPE.equals(cls)) {\n                return Long.TYPE.equals(toClass) \n                    || Float.TYPE.equals(toClass) \n                    || Double.TYPE.equals(toClass);\n            }\n            if (Long.TYPE.equals(cls)) {\n                return Float.TYPE.equals(toClass) \n                    || Double.TYPE.equals(toClass);\n            }\n            if (Boolean.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Double.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Float.TYPE.equals(cls)) {\n                return Double.TYPE.equals(toClass);\n            }\n            if (Character.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass) \n                    || Long.TYPE.equals(toClass) \n                    || Float.TYPE.equals(toClass) \n                    || Double.TYPE.equals(toClass);\n            }\n            if (Short.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass) \n                    || Long.TYPE.equals(toClass) \n                    || Float.TYPE.equals(toClass) \n                    || Double.TYPE.equals(toClass);\n            }\n            if (Byte.TYPE.equals(cls)) {\n                return Short.TYPE.equals(toClass) \n                    || Integer.TYPE.equals(toClass) \n                    || Long.TYPE.equals(toClass) \n                    || Float.TYPE.equals(toClass) \n                    || Double.TYPE.equals(toClass);\n            }\n            // should never get here\n            return false;\n        }\n        return toClass.isAssignableFrom(cls);\n    }", "src/java/org/apache/commons/lang/ClassUtils.java", "public static boolean isAssignable(Class cls, Class toClass) {\n        if (toClass == null) {\n            return false;\n        }\n        // have to check for null, as isAssignableFrom doesn't\n        if (cls == null) {\n            return !(toClass.isPrimitive());\n        }\n        if (cls.equals(toClass)) {\n            return true;\n        }\n        if (cls.isPrimitive()) {\n            if (toClass.isPrimitive() == false) {\n                return false;\n            }\n            if (Integer.TYPE.equals(cls)) {\n                return Long.TYPE.equals(toClass) \n                    || Float.TYPE.equals(toClass) \n                    || Double.TYPE.equals(toClass);\n            }\n            if (Long.TYPE.equals(cls)) {\n                return Float.TYPE.equals(toClass) \n                    || Double.TYPE.equals(toClass);\n            }\n            if (Boolean.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Double.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Float.TYPE.equals(cls)) {\n                return Double.TYPE.equals(toClass);\n            }\n            if (Character.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass) \n                    || Long.TYPE.equals(toClass) \n                    || Float.TYPE.equals(toClass) \n                    || Double.TYPE.equals(toClass);\n            }\n            if (Short.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass) \n                    || Long.TYPE.equals(toClass) \n                    || Float.TYPE.equals(toClass) \n                    || Double.TYPE.equals(toClass);\n            }\n            if (Byte.TYPE.equals(cls)) {\n                return Short.TYPE.equals(toClass) \n                    || Integer.TYPE.equals(toClass) \n                    || Long.TYPE.equals(toClass) \n                    || Float.TYPE.equals(toClass) \n                    || Double.TYPE.equals(toClass);\n            }\n            // should never get here\n            return false;\n        }\n        return toClass.isAssignableFrom(cls);\n    }", "src/java/org/apache/commons/lang/ClassUtils.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["boolean", "boolean", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Assignable", "Assignable", "equal"], ["(", "(", "equal"], ["Class", "Class", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], [">", ">", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["class", "class", "equal"], ["<con>", "<con>", "equal"], ["Array", "Array", "equal"], [",", ",", "equal"], ["Class", "Class", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], [">", ">", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Array", "Array", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Assignable", "Assignable", "equal"], ["(", "(", "equal"], ["class", "class", "equal"], ["<con>", "<con>", "equal"], ["Array", "Array", "equal"], [",", ",", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Array", "Array", "equal"], [",", ",", "equal"], ["", "System", "insert"], ["", "<con>", "insert"], ["false", "Utils", "replace"], ["", ".", "insert"], ["", "is", "insert"], ["", "<con>", "insert"], ["", "Java", "insert"], ["", "<con>", "insert"], ["", "Version", "insert"], ["", "<con>", "insert"], ["", "At", "insert"], ["", "<con>", "insert"], ["", "Least", "insert"], ["", "(", "insert"], ["", "1.5f", "insert"], ["", ")", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static NestedSet < Artifact > getTransitiveSources(TransitiveInfoCollection target)throws EvalException { if(hasModernProvider(target)) { return getModernProvider(target).getTransitiveSources().getSet(Artifact.class); } else if(hasLegacyProvider(target)) { return PyStructUtils.getTransitiveSources(getLegacyProvider(target)); } else { NestedSet < Artifact > files = target.getProvider(FileProvider.class).getFilesToBuild(); return NestedSetBuilder. < Artifact > compileOrder().addAll(FileType.filter(files, PyRuleClasses.PYTHON_SOURCE)).build(); } } ", "focal_tgt": "public static NestedSet < Artifact > getTransitiveSources(TransitiveInfoCollection target)throws EvalException { if(hasModernProvider(target)) { return getModernProvider(target).getTransitiveSourcesSet(); } else if(hasLegacyProvider(target)) { return PyStructUtils.getTransitiveSources(getLegacyProvider(target)); } else { NestedSet < Artifact > files = target.getProvider(FileProvider.class).getFilesToBuild(); return NestedSetBuilder. < Artifact > compileOrder().addAll(FileType.filter(files, PyRuleClasses.PYTHON_SOURCE)).build(); } } ", "test_src": "@Test public void getTransitiveSources_ModernProvider()throws Exception { declareTargetWithImplementation(TRANSITIVE_SOURCES_SETUP_CODE, \"return [modern_info]\"); assertThat(PyProviderUtils.getTransitiveSources(getTarget())).containsExactly(getBinArtifact(\"a.py\", getTarget())); } ", "label": 0, "focal_db": [1403561, "bazelbuild/bazel", "/data/comment_repos/bazelbuild@bazel", "74ee2b2e14c12caed7bda1a9c291e19b8f73f5fd", "d3c26ccebc68283e834ce172a6ce9fce71078dc5", "src/main/java/com/google/devtools/build/lib/rules/python/PyProviderUtils.java", "80a442a0fa76946ee91af42b4a1e95e33c5c761d", "src/main/java/com/google/devtools/build/lib/rules/python/PyProviderUtils.java", "public static NestedSet<Artifact> getTransitiveSources(TransitiveInfoCollection target)\n      throws EvalException {\n    if (hasModernProvider(target)) {\n      return getModernProvider(target).getTransitiveSources().getSet(Artifact.class);\n    } else if (hasLegacyProvider(target)) {\n      return PyStructUtils.getTransitiveSources(getLegacyProvider(target));\n    } else {\n      NestedSet<Artifact> files = target.getProvider(FileProvider.class).getFilesToBuild();\n      return NestedSetBuilder.<Artifact>compileOrder()\n          .addAll(FileType.filter(files, PyRuleClasses.PYTHON_SOURCE))\n          .build();\n    }\n  }", "// the relevant rules.\n", "public static NestedSet<Artifact> getTransitiveSources(TransitiveInfoCollection target)\n      throws EvalException {\n    if (hasModernProvider(target)) {\n      return getModernProvider(target).getTransitiveSourcesSet();\n    } else if (hasLegacyProvider(target)) {\n      return PyStructUtils.getTransitiveSources(getLegacyProvider(target));\n    } else {\n      NestedSet<Artifact> files = target.getProvider(FileProvider.class).getFilesToBuild();\n      return NestedSetBuilder.<Artifact>compileOrder()\n          .addAll(FileType.filter(files, PyRuleClasses.PYTHON_SOURCE))\n          .build();\n    }\n  }", "// the relevant rules.\n"], "test_db": ["a092b696f0f3639ba00380c1a45d8924a65d7c4d", "bazelbuild/bazel", "/data/comment_repos/bazelbuild@bazel", "getTransitiveSources", "/data/comment_repos/bazelbuild@bazel/src/test/java/com/google/devtools/build/lib/rules/python/PyProviderUtilsTest.java", "getTransitiveSources_ModernProvider", "  @Test\n  public void getTransitiveSources_ModernProvider() throws Exception {\n    declareTargetWithImplementation( //\n        TRANSITIVE_SOURCES_SETUP_CODE, //\n        \"return [modern_info]\");\n    assertThat(PyProviderUtils.getTransitiveSources(getTarget()))\n        .containsExactly(getBinArtifact(\"a.py\", getTarget()));\n  }", "public static NestedSet<Artifact> getTransitiveSources(TransitiveInfoCollection target)\n      throws EvalException {\n    if (hasProvider(target)) {\n      return PyStructUtils.getTransitiveSources(getProvider(target));\n    } else {\n      NestedSet<Artifact> files = target.getProvider(FileProvider.class).getFilesToBuild();\n      return NestedSetBuilder.<Artifact>compileOrder()\n          .addAll(FileType.filter(files, PyRuleClasses.PYTHON_SOURCE))\n          .build();\n    }\n  }", "src/main/java/com/google/devtools/build/lib/rules/python/PyProviderUtils.java", "public static NestedSet<Artifact> getTransitiveSources(TransitiveInfoCollection target)\n      throws EvalException {\n    if (hasModernProvider(target)) {\n      return getModernProvider(target).getTransitiveSources().getSet(Artifact.class);\n    } else if (hasLegacyProvider(target)) {\n      return PyStructUtils.getTransitiveSources(getLegacyProvider(target));\n    } else {\n      NestedSet<Artifact> files = target.getProvider(FileProvider.class).getFilesToBuild();\n      return NestedSetBuilder.<Artifact>compileOrder()\n          .addAll(FileType.filter(files, PyRuleClasses.PYTHON_SOURCE))\n          .build();\n    }\n  }", "src/main/java/com/google/devtools/build/lib/rules/python/PyProviderUtils.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["Nested", "Nested", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Artifact", "Artifact", "equal"], [">", ">", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Transitive", "Transitive", "equal"], ["<con>", "<con>", "equal"], ["Sources", "Sources", "equal"], ["(", "(", "equal"], ["Transitive", "Transitive", "equal"], ["<con>", "<con>", "equal"], ["Info", "Info", "equal"], ["<con>", "<con>", "equal"], ["Collection", "Collection", "equal"], ["target", "target", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Eval", "Eval", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["has", "has", "equal"], ["<con>", "<con>", "equal"], ["Modern", "Modern", "equal"], ["<con>", "<con>", "equal"], ["Provider", "Provider", "equal"], ["(", "(", "equal"], ["target", "target", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Modern", "Modern", "equal"], ["<con>", "<con>", "equal"], ["Provider", "Provider", "equal"], ["(", "(", "equal"], ["target", "target", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Transitive", "Transitive", "equal"], ["<con>", "<con>", "equal"], ["Sources", "Sources", "equal"], ["", "<con>", "insert"], ["", "Set", "insert"], ["(", "(", "equal"], [")", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Set", "", "delete"], ["(", "", "delete"], ["Artifact", "", "delete"], [".", "", "delete"], ["class", "", "delete"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["has", "has", "equal"], ["<con>", "<con>", "equal"], ["Legacy", "Legacy", "equal"], ["<con>", "<con>", "equal"], ["Provider", "Provider", "equal"], ["(", "(", "equal"], ["target", "target", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["Py", "Py", "equal"], ["<con>", "<con>", "equal"], ["Struct", "Struct", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Transitive", "Transitive", "equal"], ["<con>", "<con>", "equal"], ["Sources", "Sources", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Legacy", "Legacy", "equal"], ["<con>", "<con>", "equal"], ["Provider", "Provider", "equal"], ["(", "(", "equal"], ["target", "target", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["Nested", "Nested", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Artifact", "Artifact", "equal"], [">", ">", "equal"], ["files", "files", "equal"], ["=", "=", "equal"], ["target", "target", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Provider", "Provider", "equal"], ["(", "(", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Provider", "Provider", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Files", "Files", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Build", "Build", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["Nested", "Nested", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], [".", ".", "equal"], ["<", "<", "equal"], ["Artifact", "Artifact", "equal"], [">", ">", "equal"], ["compile", "compile", "equal"], ["<con>", "<con>", "equal"], ["Order", "Order", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["(", "(", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], [".", ".", "equal"], ["filter", "filter", "equal"], ["(", "(", "equal"], ["files", "files", "equal"], [",", ",", "equal"], ["Py", "Py", "equal"], ["<con>", "<con>", "equal"], ["Rule", "Rule", "equal"], ["<con>", "<con>", "equal"], ["Classes", "Classes", "equal"], [".", ".", "equal"], ["PYTHON", "PYTHON", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["SOURCE", "SOURCE", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["build", "build", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static Collection union(final Collection a, final Collection b) { SetOperationCardinalityHelper helper = new SetOperationCardinalityHelper(a, b); for(Object obj : helper) { helper.setCardinality(obj, helper.max(obj)); } return helper.list(); } ", "focal_tgt": "public static < O > Collection < O > union(final Iterable < ? extends O > a, final Iterable < ? extends O > b) { SetOperationCardinalityHelper < O > helper = new SetOperationCardinalityHelper < O > (a, b); for(O obj : helper) { helper.setCardinality(obj, helper.max(obj)); } return helper.list(); } ", "test_src": "@Test public void union() { final Collection < Integer > col = CollectionUtils.union(iterableA, iterableC); final Map < Integer, Integer > freq = CollectionUtils.getCardinalityMap(col); assertEquals(Integer.valueOf(1), freq.get(1)); assertEquals(Integer.valueOf(4), freq.get(2)); assertEquals(Integer.valueOf(3), freq.get(3)); assertEquals(Integer.valueOf(4), freq.get(4)); assertEquals(Integer.valueOf(1), freq.get(5)); final Collection < Number > col2 = CollectionUtils.union(collectionC2, iterableA); final Map < Number, Integer > freq2 = CollectionUtils.getCardinalityMap(col2); assertEquals(Integer.valueOf(1), freq2.get(1)); assertEquals(Integer.valueOf(4), freq2.get(2)); assertEquals(Integer.valueOf(3), freq2.get(3)); assertEquals(Integer.valueOf(4), freq2.get(4)); assertEquals(Integer.valueOf(1), freq2.get(5)); } ", "label": 0, "focal_db": [565084, "apache/commons-collections", "/data/comment_repos/apache@commons-collections", "cf3ddae273f089e77cf0a35947fb4bc8a462fca0", "6b7c683afcc190b3c3e723f9582e48733233e8f0", "src/java/org/apache/commons/collections/CollectionUtils.java", "70b2cb0467315ea69c7decb94eccc84956a10f75", "src/java/org/apache/commons/collections/CollectionUtils.java", "public static Collection union(final Collection a, final Collection b) {\n        SetOperationCardinalityHelper helper = new SetOperationCardinalityHelper(a, b);\n        for (Object obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }", "/**\n * Returns a {@link Collection} containing the union\n * of the given {@link Collection}s.\n * <p>\n * The cardinality of each element in the returned {@link Collection}\n * will be equal to the maximum of the cardinality of that element\n * in the two given {@link Collection}s.\n *\n * @param a  the first collection, must not be null\n * @param b  the second collection, must not be null\n * @return  the union of the two collections\n * @see Collection#addAll\n */\n", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n        SetOperationCardinalityHelper<O> helper = new SetOperationCardinalityHelper<O>(a, b);\n        for (O obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }", "/**\n * Returns a {@link Collection} containing the union of the given\n * {@link Collection}s.\n * <p>\n * The cardinality of each element in the returned {@link Collection} will\n * be equal to the maximum of the cardinality of that element in the two\n * given {@link Collection}s.\n *\n * @param a the first collection, must not be null\n * @param b the second collection, must not be null\n * @param <O> the generic type that is able to represent the types contained\n *        in both input collections.\n * @param <I1> the generic type of the first input {@link Iterable}.\n * @param <I2> the generic type of the second input {@link Iterable}.\n * @return the union of the two collections\n * @see Collection#addAll\n */\n"], "test_db": ["a93c64409f70100bf172015eb8a279d343b69db9", "apache/commons-collections", "/data/comment_repos/apache@commons-collections", "union", "/data/comment_repos/apache@commons-collections/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "union", "    @Test\n    public void union() {\n        final Collection<Integer> col = CollectionUtils.union(iterableA, iterableC);\n        final Map<Integer, Integer> freq = CollectionUtils.getCardinalityMap(col);\n        assertEquals(Integer.valueOf(1), freq.get(1));\n        assertEquals(Integer.valueOf(4), freq.get(2));\n        assertEquals(Integer.valueOf(3), freq.get(3));\n        assertEquals(Integer.valueOf(4), freq.get(4));\n        assertEquals(Integer.valueOf(1), freq.get(5));\n\n        final Collection<Number> col2 = CollectionUtils.union(collectionC2, iterableA);\n        final Map<Number, Integer> freq2 = CollectionUtils.getCardinalityMap(col2);\n        assertEquals(Integer.valueOf(1), freq2.get(1));\n        assertEquals(Integer.valueOf(4), freq2.get(2));\n        assertEquals(Integer.valueOf(3), freq2.get(3));\n        assertEquals(Integer.valueOf(4), freq2.get(4));\n        assertEquals(Integer.valueOf(1), freq2.get(5));\n    }", "public static Collection union(final Collection a, final Collection b) {\n        ArrayList list = new ArrayList();\n        Map mapa = getCardinalityMap(a);\n        Map mapb = getCardinalityMap(b);\n        Set elts = new HashSet(a);\n        elts.addAll(b);\n        Iterator it = elts.iterator();\n        while(it.hasNext()) {\n            Object obj = it.next();\n            for(int i=0,m=Math.max(getFreq(obj,mapa),getFreq(obj,mapb));i<m;i++) {\n                list.add(obj);\n            }\n        }\n        return list;\n    }", "src/java/org/apache/commons/collections/CollectionUtils.java", "public static Collection union(final Collection a, final Collection b) {\n        SetOperationCardinalityHelper helper = new SetOperationCardinalityHelper(a, b);\n        for (Object obj : helper) {\n            helper.setCardinality(obj, helper.max(obj));\n        }\n        return helper.list();\n    }", "src/java/org/apache/commons/collections/CollectionUtils.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["", "<", "insert"], ["", "O", "insert"], ["", ">", "insert"], ["Collection", "Collection", "equal"], ["", "<", "insert"], ["", "O", "insert"], ["", ">", "insert"], ["union", "union", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["Collection", "Iterable", "replace"], ["", "<", "insert"], ["", "?", "insert"], ["", "extends", "insert"], ["", "O", "insert"], ["", ">", "insert"], ["a", "a", "equal"], [",", ",", "equal"], ["final", "final", "equal"], ["Collection", "Iterable", "replace"], ["", "<", "insert"], ["", "?", "insert"], ["", "extends", "insert"], ["", "O", "insert"], ["", ">", "insert"], ["b", "b", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Set", "Set", "equal"], ["<con>", "<con>", "equal"], ["Operation", "Operation", "equal"], ["<con>", "<con>", "equal"], ["Cardinality", "Cardinality", "equal"], ["<con>", "<con>", "equal"], ["Helper", "Helper", "equal"], ["", "<", "insert"], ["", "O", "insert"], ["", ">", "insert"], ["helper", "helper", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Set", "Set", "equal"], ["<con>", "<con>", "equal"], ["Operation", "Operation", "equal"], ["<con>", "<con>", "equal"], ["Cardinality", "Cardinality", "equal"], ["<con>", "<con>", "equal"], ["Helper", "Helper", "equal"], ["", "<", "insert"], ["", "O", "insert"], ["", ">", "insert"], ["(", "(", "equal"], ["a", "a", "equal"], [",", ",", "equal"], ["b", "b", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["Object", "O", "replace"], ["obj", "obj", "equal"], [":", ":", "equal"], ["helper", "helper", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["helper", "helper", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Cardinality", "Cardinality", "equal"], ["(", "(", "equal"], ["obj", "obj", "equal"], [",", ",", "equal"], ["helper", "helper", "equal"], [".", ".", "equal"], ["max", "max", "equal"], ["(", "(", "equal"], ["obj", "obj", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["helper", "helper", "equal"], [".", ".", "equal"], ["list", "list", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@Override public boolean commit()throws LoginException { if(this.principals == null) { return false; } if(this.subject.isReadOnly()) { throw new LoginException(\"Subject cannot be read-only.\"); } final Set < Principal > principalsSet = this.subject.getPrincipals(); principalsSet.addAll(this.principals); LOGGER.debug(\"committing {} principals\", Integer.valueOf(this.subject.getPrincipals().size())); if(this.debug) { for(Principal principal : principalsSet) { LOGGER.debug(\" principal: {}\", principal.getName()); } } return true; } ", "focal_tgt": "@Override public boolean commit()throws LoginException { if(this.principals == null) { return false; } if(this.subject.isReadOnly()) { throw new LoginException(\"Subject cannot be read-only.\"); } final Set < Principal > principalsSet = this.subject.getPrincipals(); principalsSet.addAll(this.principals); WindowsLoginModule.LOGGER.debug(\"committing {} principals\", Integer.valueOf(this.subject.getPrincipals().size())); if(this.debug) { for(Principal principal : principalsSet) { WindowsLoginModule.LOGGER.debug(\" principal: {}\", principal.getName()); } } return true; } ", "test_src": "@Test public void commit_noPrincipal()throws LoginException { Assertions.assertFalse(this.loginModule.commit()); } ", "label": 0, "focal_db": [3853848, "Waffle/waffle", "/data/comment_repos/Waffle@waffle", "0cd1149d958ef05d608816b602b93bb021e062fe", "a9d4d2326075887e225c5d83d3c9bf0e2c6d380f", "Source/JNA/waffle-jna/src/main/java/waffle/jaas/WindowsLoginModule.java", "279d4f0eae8d23f6d1a93126c9c597f69d3af77f", "Source/JNA/waffle-jna/src/main/java/waffle/jaas/WindowsLoginModule.java", "@Override\n    public boolean commit() throws LoginException {\n        if (this.principals == null) {\n            return false;\n        }\n\n        if (this.subject.isReadOnly()) {\n            throw new LoginException(\"Subject cannot be read-only.\");\n        }\n\n        final Set<Principal> principalsSet = this.subject.getPrincipals();\n        principalsSet.addAll(this.principals);\n\n        LOGGER.debug(\"committing {} principals\", Integer.valueOf(this.subject.getPrincipals().size()));\n        if (this.debug) {\n            for (Principal principal : principalsSet) {\n                LOGGER.debug(\" principal: {}\", principal.getName());\n            }\n        }\n\n        return true;\n    }", "/**\n * Commit principals to the subject.\n *\n * @return true, if successful\n * @throws LoginException\n *             the login exception\n */\n", "@Override\n    public boolean commit() throws LoginException {\n        if (this.principals == null) {\n            return false;\n        }\n\n        if (this.subject.isReadOnly()) {\n            throw new LoginException(\"Subject cannot be read-only.\");\n        }\n\n        final Set<Principal> principalsSet = this.subject.getPrincipals();\n        principalsSet.addAll(this.principals);\n\n        WindowsLoginModule.LOGGER.debug(\"committing {} principals\", Integer.valueOf(this.subject.getPrincipals().size()));\n        if (this.debug) {\n            for (Principal principal : principalsSet) {\n                WindowsLoginModule.LOGGER.debug(\" principal: {}\", principal.getName());\n            }\n        }\n\n        return true;\n    }", "/**\n * Commit principals to the subject.\n *\n * @return true, if successful\n * @throws LoginException\n *             the login exception\n */\n"], "test_db": ["2281de6cf5c90e45a20842a60210b8c4518c10e2", "Waffle/waffle", "/data/comment_repos/Waffle@waffle", "commit", "/data/comment_repos/Waffle@waffle/Source/JNA/waffle-jna/src/test/java/waffle/jaas/WindowsLoginModuleTest.java", "commit_noPrincipal", "    @Test\n    public void commit_noPrincipal() throws LoginException {\n        Assertions.assertFalse(this.loginModule.commit());\n    }", "@Override\r\n\tpublic boolean commit() throws LoginException {\r\n\t\tif (_principals == null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n        if (_subject.isReadOnly()) {\r\n            throw new LoginException(\"Subject cannot be read-only.\");\r\n        }\r\n    \r\n        Set<Principal> principals = _subject.getPrincipals();\r\n        principals.addAll(_principals);\r\n        \r\n        debug(\"committing \" + _subject.getPrincipals().size() + \" principals\");\r\n        if (_debug) {\r\n        \tfor (Principal principal : principals) {\r\n        \t\tdebug(\" principal: \" + principal.getName());\r\n        \t}\r\n        }\r\n        \r\n\t\treturn true;\r\n\t}", "Source/JNAWindowsAuthProvider/src/waffle/jaas/WindowsLoginModule.java", "public boolean commit() throws LoginException {\r\n\t\tif (_principals == null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n        if (_subject.isReadOnly()) {\r\n            throw new LoginException(\"Subject cannot be read-only.\");\r\n        }\r\n    \r\n        Set<Principal> principals = _subject.getPrincipals();\r\n        principals.addAll(_principals);\r\n        \r\n        debug(\"committing \" + _subject.getPrincipals().size() + \" principals\");\r\n        if (_debug) {\r\n        \tfor (Principal principal : principals) {\r\n        \t\tdebug(\" principal: \" + principal.getName());\r\n        \t}\r\n        }\r\n        \r\n\t\treturn true;\r\n\t}", "Source/JNAWindowsAuthProvider/src/waffle/jaas/WindowsLoginModule.java"], "edit_seq": [["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["boolean", "boolean", "equal"], ["commit", "commit", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Login", "Login", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["principals", "principals", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["subject", "subject", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Read", "Read", "equal"], ["<con>", "<con>", "equal"], ["Only", "Only", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Login", "Login", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Subject", "Subject", "equal"], ["can", "can", "equal"], ["<con>", "<con>", "equal"], ["not", "not", "equal"], ["be", "be", "equal"], ["read", "read", "equal"], ["<con>", "<con>", "equal"], ["-", "-", "equal"], ["<con>", "<con>", "equal"], ["only", "only", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["final", "final", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Principal", "Principal", "equal"], [">", ">", "equal"], ["principals", "principals", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["=", "=", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["subject", "subject", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Principals", "Principals", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["principals", "principals", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["(", "(", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["principals", "principals", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["", "Windows", "insert"], ["", "<con>", "insert"], ["", "Login", "insert"], ["", "<con>", "insert"], ["", "Module", "insert"], ["", ".", "insert"], ["LOGGER", "LOGGER", "equal"], [".", ".", "equal"], ["debug", "debug", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["committing", "committing", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["principals", "principals", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["Integer", "Integer", "equal"], [".", ".", "equal"], ["value", "value", "equal"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["(", "(", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["subject", "subject", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Principals", "Principals", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["size", "size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["debug", "debug", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["Principal", "Principal", "equal"], ["principal", "principal", "equal"], [":", ":", "equal"], ["principals", "principals", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["", "Windows", "insert"], ["", "<con>", "insert"], ["", "Login", "insert"], ["", "<con>", "insert"], ["", "Module", "insert"], ["", ".", "insert"], ["LOGGER", "LOGGER", "equal"], [".", ".", "equal"], ["debug", "debug", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["principal", "principal", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["principal", "principal", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["true", "true", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public AssignableInvoiceCandidate ofRecord(@Nullable final I_C_Invoice_Candidate assignableRecord) { final InvoiceCandidateId invoiceCandidateId = InvoiceCandidateId.ofRepoId(assignableRecord.getC_Invoice_Candidate_ID()); final Timestamp invoicableFromDate = getValueOverrideOrValue(assignableRecord, I_C_Invoice_Candidate.COLUMNNAME_DateToInvoice); final BigDecimal moneyAmount = assignableRecord.getNetAmtInvoiced().add(assignableRecord.getNetAmtToInvoice()); final I_C_Currency currencyRecord = assignableRecord.getC_Currency(); final CurrencyId currencyId = CurrencyId.ofRepoId(currencyRecord.getC_Currency_ID()); final int precision = currencyRecord.getStdPrecision(); final Money money = Money.of(stripTrailingDecimalZeros(moneyAmount), currencyId); final Quantity quantity = Quantity.of(assignableRecord.getQtyToInvoice().add(stripTrailingDecimalZeros(assignableRecord.getQtyInvoiced())), assignableRecord.getM_Product().getC_UOM()); final List < AssignmentToRefundCandidate > assignments = assignmentToRefundCandidateRepository.getAssignmentsByAssignableCandidateId(invoiceCandidateId); final AssignableInvoiceCandidate invoiceCandidate = AssignableInvoiceCandidate.builder().repoId(invoiceCandidateId).bpartnerId(BPartnerId.ofRepoId(assignableRecord.getBill_BPartner_ID())).invoiceableFrom(TimeUtil.asLocalDate(invoicableFromDate)).money(money).precision(precision).quantity(quantity).productId(ProductId.ofRepoId(assignableRecord.getM_Product_ID())).assignmentsToRefundCandidates(assignments).build(); return invoiceCandidate; } ", "focal_tgt": "public AssignableInvoiceCandidate ofRecord(@Nullable final I_C_Invoice_Candidate assignableRecord) { final InvoiceCandidateId invoiceCandidateId = InvoiceCandidateId.ofRepoId(assignableRecord.getC_Invoice_Candidate_ID()); final Timestamp invoicableFromDate = getValueOverrideOrValue(assignableRecord, I_C_Invoice_Candidate.COLUMNNAME_DateToInvoice); final BigDecimal moneyAmount = assignableRecord.getNetAmtInvoiced().add(assignableRecord.getNetAmtToInvoice()); final I_C_Currency currencyRecord = assignableRecord.getC_Currency(); final CurrencyId currencyId = CurrencyId.ofRepoId(currencyRecord.getC_Currency_ID()); final int precision = currencyRecord.getStdPrecision(); final Money money = Money.of(stripTrailingDecimalZeros(moneyAmount), currencyId); final Quantity quantity = Quantity.of(assignableRecord.getQtyToInvoice().add(stripTrailingDecimalZeros(assignableRecord.getQtyInvoiced())), assignableRecord.getM_Product().getC_UOM()); final List < AssignmentToRefundCandidate > assignments = assignmentToRefundCandidateRepository.getAssignmentsByAssignableCandidateId(invoiceCandidateId); final AssignableInvoiceCandidate invoiceCandidate = AssignableInvoiceCandidate.builder().id(invoiceCandidateId).bpartnerId(BPartnerId.ofRepoId(assignableRecord.getBill_BPartner_ID())).invoiceableFrom(TimeUtil.asLocalDate(invoicableFromDate)).money(money).precision(precision).quantity(quantity).productId(ProductId.ofRepoId(assignableRecord.getM_Product_ID())).assignmentsToRefundCandidates(assignments).build(); return invoiceCandidate; } ", "test_src": "@Test public void ofRecord_AssignableInvoiceCandidate() { final AssignableInvoiceCandidate ofRecord = assignableInvoiceCandidateFactory.ofRecord(assignableIcRecord); assertThat(ofRecord.getBpartnerLocationId().getBpartnerId().getRepoId()).isEqualTo(BPartnerRecordID); assertThat(ofRecord.getProductId().getRepoId()).isEqualTo(productRecord.getM_Product_ID()); assertThat(ofRecord.getMoney().toBigDecimal()).isEqualByComparingTo(TEN); assertThat(ofRecord.getInvoiceableFrom()).isEqualTo(TimeUtil.asLocalDate(dateToInvoiceOfAssignableCand)); } ", "label": 0, "focal_db": [2707283, "metasfresh/metasfresh", "/data/comment_repos/metasfresh@metasfresh", "f5faa6c126b28cd0e6463579492ddecd9e2aba5d", "40e57be5693bdca2075cc9dd8bc7cc3bf317e733", "de.metas.contracts/src/main/java/de/metas/contracts/refund/AssignableInvoiceCandidateFactory.java", "de74de78e85ca27e4679bad84e27c22eb55d6fa8", "de.metas.contracts/src/main/java/de/metas/contracts/refund/AssignableInvoiceCandidateFactory.java", "public AssignableInvoiceCandidate ofRecord(@Nullable final I_C_Invoice_Candidate assignableRecord)\n\t{\n\t\tfinal InvoiceCandidateId invoiceCandidateId = InvoiceCandidateId.ofRepoId(assignableRecord.getC_Invoice_Candidate_ID());\n\n\t\tfinal Timestamp invoicableFromDate = getValueOverrideOrValue(assignableRecord, I_C_Invoice_Candidate.COLUMNNAME_DateToInvoice);\n\t\tfinal BigDecimal moneyAmount = assignableRecord\n\t\t\t\t.getNetAmtInvoiced()\n\t\t\t\t.add(assignableRecord.getNetAmtToInvoice());\n\n\t\tfinal I_C_Currency currencyRecord = assignableRecord.getC_Currency();\n\t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(currencyRecord.getC_Currency_ID());\n\t\tfinal int precision = currencyRecord.getStdPrecision();\n\n\t\tfinal Money money = Money.of(stripTrailingDecimalZeros(moneyAmount), currencyId);\n\n\t\tfinal Quantity quantity = Quantity.of(\n\t\t\t\tassignableRecord.getQtyToInvoice().add(stripTrailingDecimalZeros(assignableRecord.getQtyInvoiced())),\n\t\t\t\tassignableRecord.getM_Product().getC_UOM());\n\n\t\tfinal List<AssignmentToRefundCandidate> assignments = assignmentToRefundCandidateRepository.getAssignmentsByAssignableCandidateId(invoiceCandidateId);\n\n\t\tfinal AssignableInvoiceCandidate invoiceCandidate = AssignableInvoiceCandidate.builder()\n\t\t\t\t.repoId(invoiceCandidateId)\n\t\t\t\t.bpartnerId(BPartnerId.ofRepoId(assignableRecord.getBill_BPartner_ID()))\n\t\t\t\t.invoiceableFrom(TimeUtil.asLocalDate(invoicableFromDate))\n\t\t\t\t.money(money)\n\t\t\t\t.precision(precision)\n\t\t\t\t.quantity(quantity)\n\t\t\t\t.productId(ProductId.ofRepoId(assignableRecord.getM_Product_ID()))\n\t\t\t\t.assignmentsToRefundCandidates(assignments)\n\t\t\t\t.build();\n\n\t\treturn invoiceCandidate;\n\t}", "/**\n * Note: does not load&include {@link AssignmentToRefundCandidate}s; those need to be retrieved using {@link AssignmentToRefundCandidateRepository}.\n */\n", "public AssignableInvoiceCandidate ofRecord(@Nullable final I_C_Invoice_Candidate assignableRecord)\n\t{\n\t\tfinal InvoiceCandidateId invoiceCandidateId = InvoiceCandidateId.ofRepoId(assignableRecord.getC_Invoice_Candidate_ID());\n\n\t\tfinal Timestamp invoicableFromDate = getValueOverrideOrValue(assignableRecord, I_C_Invoice_Candidate.COLUMNNAME_DateToInvoice);\n\t\tfinal BigDecimal moneyAmount = assignableRecord\n\t\t\t\t.getNetAmtInvoiced()\n\t\t\t\t.add(assignableRecord.getNetAmtToInvoice());\n\n\t\tfinal I_C_Currency currencyRecord = assignableRecord.getC_Currency();\n\t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(currencyRecord.getC_Currency_ID());\n\t\tfinal int precision = currencyRecord.getStdPrecision();\n\n\t\tfinal Money money = Money.of(stripTrailingDecimalZeros(moneyAmount), currencyId);\n\n\t\tfinal Quantity quantity = Quantity.of(\n\t\t\t\tassignableRecord.getQtyToInvoice().add(stripTrailingDecimalZeros(assignableRecord.getQtyInvoiced())),\n\t\t\t\tassignableRecord.getM_Product().getC_UOM());\n\n\t\tfinal List<AssignmentToRefundCandidate> assignments = assignmentToRefundCandidateRepository.getAssignmentsByAssignableCandidateId(invoiceCandidateId);\n\n\t\tfinal AssignableInvoiceCandidate invoiceCandidate = AssignableInvoiceCandidate.builder()\n\t\t\t\t.id(invoiceCandidateId)\n\t\t\t\t.bpartnerId(BPartnerId.ofRepoId(assignableRecord.getBill_BPartner_ID()))\n\t\t\t\t.invoiceableFrom(TimeUtil.asLocalDate(invoicableFromDate))\n\t\t\t\t.money(money)\n\t\t\t\t.precision(precision)\n\t\t\t\t.quantity(quantity)\n\t\t\t\t.productId(ProductId.ofRepoId(assignableRecord.getM_Product_ID()))\n\t\t\t\t.assignmentsToRefundCandidates(assignments)\n\t\t\t\t.build();\n\n\t\treturn invoiceCandidate;\n\t}", "/**\n * Note: does not load&include {@link AssignmentToRefundCandidate}s; those need to be retrieved using {@link AssignmentToRefundCandidateRepository}.\n */\n"], "test_db": ["89b71e620d38d2fc9dc0249e2e884b904fe89426", "metasfresh/metasfresh", "/data/comment_repos/metasfresh@metasfresh", "ofRecord", "/data/comment_repos/metasfresh@metasfresh/de.metas.contracts/src/test/java/de/metas/contracts/refund/AssignableInvoiceCandidateFactoryTest.java", "ofRecord_AssignableInvoiceCandidate", "\t@Test\n\tpublic void ofRecord_AssignableInvoiceCandidate()\n\t{\n\t\t// invoke the method under test\n\t\tfinal AssignableInvoiceCandidate ofRecord = assignableInvoiceCandidateFactory.ofRecord(assignableIcRecord);\n\n\t\tassertThat(ofRecord.getBpartnerLocationId().getBpartnerId().getRepoId()).isEqualTo(BPartnerRecordID);\n\n\t\tassertThat(ofRecord.getProductId().getRepoId()).isEqualTo(productRecord.getM_Product_ID());\n\n\t\t// TODO move to dedicated test case\n\t\t// assertThat(cast.getAssignmentsToRefundCandidates().get(0).getRefundInvoiceCandidate().getId().getRepoId()).isEqualTo(refundContractIcRecord.getC_Invoice_Candidate_ID());\n\t\tassertThat(ofRecord.getMoney().toBigDecimal()).isEqualByComparingTo(TEN);\n\t\tassertThat(ofRecord.getInvoiceableFrom()).isEqualTo(TimeUtil.asLocalDate(dateToInvoiceOfAssignableCand));\n\t}", "public AssignableInvoiceCandidate ofRecord(@Nullable final I_C_Invoice_Candidate assignableRecord)\n\t{\n\t\tfinal InvoiceCandidateId invoiceCandidateId = InvoiceCandidateId.ofRepoId(assignableRecord.getC_Invoice_Candidate_ID());\n\n\t\tfinal Timestamp invoicableFromDate = getValueOverrideOrValue(assignableRecord, I_C_Invoice_Candidate.COLUMNNAME_DateToInvoice);\n\t\tfinal BigDecimal moneyAmount = assignableRecord\n\t\t\t\t.getNetAmtInvoiced()\n\t\t\t\t.add(assignableRecord.getNetAmtToInvoice());\n\n\t\tfinal I_C_Currency currencyRecord = assignableRecord.getC_Currency();\n\t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(currencyRecord.getC_Currency_ID());\n\t\tfinal int precision = currencyRecord.getStdPrecision();\n\n\t\tfinal Money money = Money.of(moneyAmount, currencyId);\n\n\t\tfinal Quantity quantity = Quantity.of(\n\t\t\t\tassignableRecord.getQtyToInvoice().add(assignableRecord.getQtyInvoiced()),\n\t\t\t\tassignableRecord.getM_Product().getC_UOM());\n\n\t\tfinal AssignableInvoiceCandidate invoiceCandidate = AssignableInvoiceCandidate.builder()\n\t\t\t\t.id(invoiceCandidateId)\n\t\t\t\t.bpartnerId(BPartnerId.ofRepoId(assignableRecord.getBill_BPartner_ID()))\n\t\t\t\t.invoiceableFrom(TimeUtil.asLocalDate(invoicableFromDate))\n\t\t\t\t.money(money)\n\t\t\t\t.precision(precision)\n\t\t\t\t.quantity(quantity)\n\t\t\t\t.productId(ProductId.ofRepoId(assignableRecord.getM_Product_ID()))\n\t\t\t\t.build();\n\n\t\treturn invoiceCandidate;\n\t}", "de.metas.contracts/src/main/java/de/metas/contracts/refund/AssignableInvoiceCandidateFactory.java", "public AssignableInvoiceCandidate ofRecord(@Nullable final I_C_Invoice_Candidate assignableRecord)\n\t{\n\t\tfinal InvoiceCandidateId invoiceCandidateId = InvoiceCandidateId.ofRepoId(assignableRecord.getC_Invoice_Candidate_ID());\n\n\t\tfinal Timestamp invoicableFromDate = getValueOverrideOrValue(assignableRecord, I_C_Invoice_Candidate.COLUMNNAME_DateToInvoice);\n\t\tfinal BigDecimal moneyAmount = assignableRecord\n\t\t\t\t.getNetAmtInvoiced()\n\t\t\t\t.add(assignableRecord.getNetAmtToInvoice());\n\n\t\tfinal I_C_Currency currencyRecord = assignableRecord.getC_Currency();\n\t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(currencyRecord.getC_Currency_ID());\n\t\tfinal int precision = currencyRecord.getStdPrecision();\n\n\t\tfinal Money money = Money.of(moneyAmount, currencyId);\n\n\t\tfinal Quantity quantity = Quantity.of(\n\t\t\t\tassignableRecord.getQtyToInvoice().add(assignableRecord.getQtyInvoiced()),\n\t\t\t\tassignableRecord.getM_Product().getC_UOM());\n\n\t\tfinal AssignableInvoiceCandidate invoiceCandidate = AssignableInvoiceCandidate.builder()\n\t\t\t\t.repoId(invoiceCandidateId)\n\t\t\t\t.bpartnerId(BPartnerId.ofRepoId(assignableRecord.getBill_BPartner_ID()))\n\t\t\t\t.invoiceableFrom(TimeUtil.asLocalDate(invoicableFromDate))\n\t\t\t\t.money(money)\n\t\t\t\t.precision(precision)\n\t\t\t\t.quantity(quantity)\n\t\t\t\t.productId(ProductId.ofRepoId(assignableRecord.getM_Product_ID()))\n\t\t\t\t.build();\n\n\t\treturn invoiceCandidate;\n\t}", "de.metas.contracts/src/main/java/de/metas/contracts/refund/AssignableInvoiceCandidateFactory.java"], "edit_seq": [["public", "public", "equal"], ["Assignable", "Assignable", "equal"], ["<con>", "<con>", "equal"], ["Invoice", "Invoice", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], ["(", "(", "equal"], ["@", "@", "equal"], ["Nullable", "Nullable", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Invoice", "Invoice", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["Invoice", "Invoice", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["invoice", "invoice", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["=", "=", "equal"], ["Invoice", "Invoice", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["Repo", "Repo", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Invoice", "Invoice", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ID", "ID", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Timestamp", "Timestamp", "equal"], ["invoicable", "invoicable", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["=", "=", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["<con>", "<con>", "equal"], ["Override", "Override", "equal"], ["<con>", "<con>", "equal"], ["Or", "Or", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [",", ",", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Invoice", "Invoice", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], [".", ".", "equal"], ["COLUMNNAME", "COLUMNNAME", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Invoice", "Invoice", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Big", "Big", "equal"], ["<con>", "<con>", "equal"], ["Decimal", "Decimal", "equal"], ["money", "money", "equal"], ["<con>", "<con>", "equal"], ["Amount", "Amount", "equal"], ["=", "=", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Net", "Net", "equal"], ["<con>", "<con>", "equal"], ["Amt", "Amt", "equal"], ["<con>", "<con>", "equal"], ["Invoiced", "Invoiced", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Net", "Net", "equal"], ["<con>", "<con>", "equal"], ["Amt", "Amt", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Invoice", "Invoice", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["I", "I", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Currency", "Currency", "equal"], ["currency", "currency", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], ["=", "=", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Currency", "Currency", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Currency", "Currency", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["currency", "currency", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["=", "=", "equal"], ["Currency", "Currency", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["Repo", "Repo", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["currency", "currency", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Currency", "Currency", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ID", "ID", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["int", "int", "equal"], ["precision", "precision", "equal"], ["=", "=", "equal"], ["currency", "currency", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Std", "Std", "equal"], ["<con>", "<con>", "equal"], ["Precision", "Precision", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Money", "Money", "equal"], ["money", "money", "equal"], ["=", "=", "equal"], ["Money", "Money", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["(", "(", "equal"], ["strip", "strip", "equal"], ["<con>", "<con>", "equal"], ["Trailing", "Trailing", "equal"], ["<con>", "<con>", "equal"], ["Decimal", "Decimal", "equal"], ["<con>", "<con>", "equal"], ["Zeros", "Zeros", "equal"], ["(", "(", "equal"], ["money", "money", "equal"], ["<con>", "<con>", "equal"], ["Amount", "Amount", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["currency", "currency", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Quantity", "Quantity", "equal"], ["quantity", "quantity", "equal"], ["=", "=", "equal"], ["Quantity", "Quantity", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["(", "(", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Invoice", "Invoice", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["strip", "strip", "equal"], ["<con>", "<con>", "equal"], ["Trailing", "Trailing", "equal"], ["<con>", "<con>", "equal"], ["Decimal", "Decimal", "equal"], ["<con>", "<con>", "equal"], ["Zeros", "Zeros", "equal"], ["(", "(", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Qty", "Qty", "equal"], ["<con>", "<con>", "equal"], ["Invoiced", "Invoiced", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["M", "M", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["UOM", "UOM", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Assignment", "Assignment", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Refund", "Refund", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], [">", ">", "equal"], ["assignments", "assignments", "equal"], ["=", "=", "equal"], ["assignment", "assignment", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Refund", "Refund", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["<con>", "<con>", "equal"], ["Repository", "Repository", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Assignments", "Assignments", "equal"], ["<con>", "<con>", "equal"], ["By", "By", "equal"], ["<con>", "<con>", "equal"], ["Assignable", "Assignable", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["invoice", "invoice", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Assignable", "Assignable", "equal"], ["<con>", "<con>", "equal"], ["Invoice", "Invoice", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["invoice", "invoice", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["=", "=", "equal"], ["Assignable", "Assignable", "equal"], ["<con>", "<con>", "equal"], ["Invoice", "Invoice", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], [".", ".", "equal"], ["builder", "builder", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["repo", "", "delete"], ["<con>", "", "delete"], ["Id", "id", "replace"], ["(", "(", "equal"], ["invoice", "invoice", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["bpartner", "bpartner", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["Repo", "Repo", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Bill", "Bill", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["B", "B", "equal"], ["<con>", "<con>", "equal"], ["Partner", "Partner", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ID", "ID", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["invoiceable", "invoiceable", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["(", "(", "equal"], ["Time", "Time", "equal"], ["<con>", "<con>", "equal"], ["Util", "Util", "equal"], [".", ".", "equal"], ["as", "as", "equal"], ["<con>", "<con>", "equal"], ["Local", "Local", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], ["(", "(", "equal"], ["invoicable", "invoicable", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Date", "Date", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["money", "money", "equal"], ["(", "(", "equal"], ["money", "money", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["precision", "precision", "equal"], ["(", "(", "equal"], ["precision", "precision", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["quantity", "quantity", "equal"], ["(", "(", "equal"], ["quantity", "quantity", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["product", "product", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["Repo", "Repo", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], ["assignable", "assignable", "equal"], ["<con>", "<con>", "equal"], ["Record", "Record", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["M", "M", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Product", "Product", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ID", "ID", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["assignments", "assignments", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Refund", "Refund", "equal"], ["<con>", "<con>", "equal"], ["Candidates", "Candidates", "equal"], ["(", "(", "equal"], ["assignments", "assignments", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["build", "build", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["invoice", "invoice", "equal"], ["<con>", "<con>", "equal"], ["Candidate", "Candidate", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public CalculationResult execute(CalculationEnvironment scenarioData) { CalculationMarketData calculationData = new DefaultCalculationMarketData(scenarioData, marketDataMappings); Result < ? > result; try { Object value = function.execute(target, calculationData); result = value instanceof Result ? (Result < ? > )value : Result.success(value); } catch(RuntimeException e) { result = Result.failure(e); } return CalculationResult.of(target, rowIndex, columnIndex, convertToReportingCurrency(result, calculationData)); } ", "focal_tgt": "@SuppressWarnings(\"unchecked\")public CalculationResult execute(CalculationEnvironment scenarioData) { CalculationMarketData calculationData = new DefaultCalculationMarketData(scenarioData, marketDataMappings); Result < ? > result; try { if(function instanceof CalculationSingleFunction) { Object value = ((CalculationSingleFunction < CalculationTarget, Object > )function).execute(target, calculationData); result = value instanceof Result ? (Result < ? > )value : Result.success(value); } else if(function instanceof CalculationMultiFunction) { ImmutableSet < Measure > measures = ImmutableSet.of(getMeasure()); Map < Measure, Result < ScenarioResult < ? > > > map = ((CalculationMultiFunction < CalculationTarget > )function).calculate(target, measures, calculationData); if( ! map.containsKey(getMeasure())) { throw new IllegalStateException(Messages.format(\"Function '{}' did not return requested measure '{}'\", function.getClass().getName(), getMeasure())); } result = map.get(getMeasure()); } else { throw new IllegalStateException(Messages.format(\"Unknown function type '{}'\", function.getClass().getName())); } } catch(RuntimeException ex) { result = Result.failure(ex); } return CalculationResult.of(target, rowIndex, columnIndex, convertToReportingCurrency(result, calculationData)); } ", "test_src": "@Test public void execute() { SupplierFunction < String > fn = SupplierFunction.of(() -> \"foo\"); CalculationTaskCell cell = CalculationTaskCell.of(0, 0, TestingMeasures.PRESENT_VALUE, REPORTING_CURRENCY_USD); CalculationTask task = CalculationTask.of(TARGET, fn, cell); ScenarioMarketData marketData = ImmutableScenarioMarketData.builder(date(2011, 3, 8)).build(); CalculationResults calculationResults = task.execute(marketData, REF_DATA); Result < ? > result = calculationResults.getCells().get(0).getResult(); assertThat(result).hasValue(ScenarioArray.of(\"foo\")); } ", "label": 0, "focal_db": [2926772, "OpenGamma/Strata", "/data/comment_repos/OpenGamma@Strata", "8850cc5d681b000aca3d77f5a779e2da765488db", "b7e9dbb72bf04d43934f83356bea8f02b6df51b5", "modules/calc/src/main/java/com/opengamma/strata/calc/runner/CalculationTask.java", "58d32eaeea7a4e2ec391c0f6be8db898e2605f5c", "modules/calc/src/main/java/com/opengamma/strata/calc/runner/CalculationTask.java", "public CalculationResult execute(CalculationEnvironment scenarioData) {\n    CalculationMarketData calculationData = new DefaultCalculationMarketData(scenarioData, marketDataMappings);\n    Result<?> result;\n\n    try {\n      Object value = function.execute(target, calculationData);\n      result = value instanceof Result ?\n          (Result<?>) value :\n          Result.success(value);\n    } catch (RuntimeException e) {\n      result = Result.failure(e);\n    }\n    return CalculationResult.of(target, rowIndex, columnIndex, convertToReportingCurrency(result, calculationData));\n  }", "/**\n * Performs calculations for the target using multiple sets of market data.\n *\n * @param scenarioData  the market data used in the calculation\n * @return results of the calculation, one for every scenario in the market data\n */\n", "@SuppressWarnings(\"unchecked\")\n  public CalculationResult execute(CalculationEnvironment scenarioData) {\n    CalculationMarketData calculationData = new DefaultCalculationMarketData(scenarioData, marketDataMappings);\n    Result<?> result;\n\n    try {\n      if (function instanceof CalculationSingleFunction) {\n        Object value = ((CalculationSingleFunction<CalculationTarget, Object>) function).execute(target, calculationData);\n        result = value instanceof Result ? (Result<?>) value : Result.success(value);\n\n      } else if (function instanceof CalculationMultiFunction) {\n        ImmutableSet<Measure> measures = ImmutableSet.of(getMeasure());\n        Map<Measure, Result<ScenarioResult<?>>> map =\n            ((CalculationMultiFunction<CalculationTarget>) function).calculate(target, measures, calculationData);\n        if (!map.containsKey(getMeasure())) {\n          throw new IllegalStateException(Messages.format(\n              \"Function '{}' did not return requested measure '{}'\", function.getClass().getName(), getMeasure()));\n        }\n        result = map.get(getMeasure());\n\n      } else {\n        throw new IllegalStateException(Messages.format(\"Unknown function type '{}'\", function.getClass().getName()));\n      }\n    } catch (RuntimeException ex) {\n      result = Result.failure(ex);\n    }\n    return CalculationResult.of(target, rowIndex, columnIndex, convertToReportingCurrency(result, calculationData));\n  }", "/**\n * Performs calculations for the target using multiple sets of market data.\n *\n * @param scenarioData  the market data used in the calculation\n * @return results of the calculation, one for every scenario in the market data\n */\n"], "test_db": ["258c5964bbf5c86068f8b678b43e531299ec57fd", "OpenGamma/Strata", "/data/comment_repos/OpenGamma@Strata", "execute", "/data/comment_repos/OpenGamma@Strata/modules/calc/src/test/java/com/opengamma/strata/calc/runner/CalculationTaskTest.java", "execute", "  @Test\n  public void execute() {\n    SupplierFunction<String> fn = SupplierFunction.of(() -> \"foo\");\n    CalculationTaskCell cell = CalculationTaskCell.of(0, 0, TestingMeasures.PRESENT_VALUE, REPORTING_CURRENCY_USD);\n    CalculationTask task = CalculationTask.of(TARGET, fn, cell);\n    ScenarioMarketData marketData = ImmutableScenarioMarketData.builder(date(2011, 3, 8)).build();\n\n    CalculationResults calculationResults = task.execute(marketData, REF_DATA);\n    Result<?> result = calculationResults.getCells().get(0).getResult();\n    assertThat(result).hasValue(ScenarioArray.of(\"foo\"));\n  }", "public CalculationResult execute(ScenarioMarketData marketData) {\n    Result<?> result;\n    try {\n      DefaultCalculationMarketData calculationData = new DefaultCalculationMarketData(marketData, marketDataMappings);\n      result = Result.success(function.execute(target, calculationData, reportingRules));\n    } catch (Exception e) {\n      result = Result.failure(e);\n    }\n    return CalculationResult.of(target, rowIndex, columnIndex, result);\n  }", "modules/engine/src/main/java/com/opengamma/strata/engine/calculations/CalculationTask.java", "public CalculationResult execute(ScenarioMarketData marketData) {\n    DefaultCalculationMarketData calculationData = new DefaultCalculationMarketData(marketData, marketDataMappings);\n    Result<?> result = Result.of(() -> function.execute(target, calculationData, reportingRules));\n    return CalculationResult.of(target, rowIndex, columnIndex, result);\n  }", "modules/engine/src/main/java/com/opengamma/strata/engine/calculations/CalculationTask.java"], "edit_seq": [["", "@", "insert"], ["", "Suppress", "insert"], ["", "<con>", "insert"], ["", "Warnings", "insert"], ["", "(", "insert"], ["", "\"", "insert"], ["", "unchecked", "insert"], ["", "\"", "insert"], ["", ")", "insert"], ["public", "public", "equal"], ["Calculation", "Calculation", "equal"], ["<con>", "<con>", "equal"], ["Result", "Result", "equal"], ["execute", "execute", "equal"], ["(", "(", "equal"], ["Calculation", "Calculation", "equal"], ["<con>", "<con>", "equal"], ["Environment", "Environment", "equal"], ["scenario", "scenario", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Calculation", "Calculation", "equal"], ["<con>", "<con>", "equal"], ["Market", "Market", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["calculation", "calculation", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Default", "Default", "equal"], ["<con>", "<con>", "equal"], ["Calculation", "Calculation", "equal"], ["<con>", "<con>", "equal"], ["Market", "Market", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["(", "(", "equal"], ["scenario", "scenario", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [",", ",", "equal"], ["market", "market", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Mappings", "Mappings", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Result", "Result", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], [">", ">", "equal"], ["result", "result", "equal"], [";", ";", "equal"], ["try", "try", "equal"], ["{", "{", "equal"], ["", "if", "insert"], ["", "(", "insert"], ["", "function", "insert"], ["", "instanceof", "insert"], ["", "Calculation", "insert"], ["", "<con>", "insert"], ["", "Single", "insert"], ["", "<con>", "insert"], ["", "Function", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["Object", "Object", "equal"], ["value", "value", "equal"], ["=", "=", "equal"], ["function", "(", "replace"], ["", "(", "insert"], ["", "Calculation", "insert"], ["", "<con>", "insert"], ["", "Single", "insert"], ["", "<con>", "insert"], ["", "Function", "insert"], ["", "<", "insert"], ["", "Calculation", "insert"], ["", "<con>", "insert"], ["", "Target", "insert"], ["", ",", "insert"], ["", "Object", "insert"], ["", ">", "insert"], ["", ")", "insert"], ["", "function", "insert"], ["", ")", "insert"], [".", ".", "equal"], ["execute", "execute", "equal"], ["(", "(", "equal"], ["target", "target", "equal"], [",", ",", "equal"], ["calculation", "calculation", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["result", "result", "equal"], ["=", "=", "equal"], ["value", "value", "equal"], ["instanceof", "instanceof", "equal"], ["Result", "Result", "equal"], ["?", "?", "equal"], ["(", "(", "equal"], ["Result", "Result", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], [">", ">", "equal"], [")", ")", "equal"], ["value", "value", "equal"], [":", ":", "equal"], ["Result", "Result", "equal"], [".", ".", "equal"], ["success", "success", "equal"], ["(", "(", "equal"], ["value", "value", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["", "else", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "function", "insert"], ["", "instanceof", "insert"], ["", "Calculation", "insert"], ["", "<con>", "insert"], ["", "Multi", "insert"], ["", "<con>", "insert"], ["", "Function", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "Immutable", "insert"], ["", "<con>", "insert"], ["", "Set", "insert"], ["", "<", "insert"], ["", "Measure", "insert"], ["", ">", "insert"], ["", "measures", "insert"], ["", "=", "insert"], ["", "Immutable", "insert"], ["", "<con>", "insert"], ["", "Set", "insert"], ["", ".", "insert"], ["", "of", "insert"], ["", "(", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Measure", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "Map", "insert"], ["", "<", "insert"], ["", "Measure", "insert"], ["", ",", "insert"], ["", "Result", "insert"], ["", "<", "insert"], ["", "Scenario", "insert"], ["", "<con>", "insert"], ["", "Result", "insert"], ["", "<", "insert"], ["", "?", "insert"], ["", ">", "insert"], ["", ">", "insert"], ["", ">", "insert"], ["", "map", "insert"], ["", "=", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "Calculation", "insert"], ["", "<con>", "insert"], ["", "Multi", "insert"], ["", "<con>", "insert"], ["", "Function", "insert"], ["", "<", "insert"], ["", "Calculation", "insert"], ["", "<con>", "insert"], ["", "Target", "insert"], ["", ">", "insert"], ["", ")", "insert"], ["", "function", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "calculate", "insert"], ["", "(", "insert"], ["", "target", "insert"], ["", ",", "insert"], ["", "measures", "insert"], ["", ",", "insert"], ["", "calculation", "insert"], ["", "<con>", "insert"], ["", "Data", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "!", "insert"], ["", "map", "insert"], ["", ".", "insert"], ["", "contains", "insert"], ["", "<con>", "insert"], ["", "Key", "insert"], ["", "(", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Measure", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "throw", "insert"], ["", "new", "insert"], ["", "Illegal", "insert"], ["", "<con>", "insert"], ["", "State", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["", "(", "insert"], ["", "Messages", "insert"], ["", ".", "insert"], ["", "format", "insert"], ["", "(", "insert"], ["", "\"", "insert"], ["", "Function", "insert"], ["", "'", "insert"], ["", "<con>", "insert"], ["", "{", "insert"], ["", "<con>", "insert"], ["", "}", "insert"], ["", "<con>", "insert"], ["", "'", "insert"], ["", "did", "insert"], ["", "not", "insert"], ["", "return", "insert"], ["", "requested", "insert"], ["", "measure", "insert"], ["", "'", "insert"], ["", "<con>", "insert"], ["", "{", "insert"], ["", "<con>", "insert"], ["", "}", "insert"], ["", "<con>", "insert"], ["", "'", "insert"], ["", "\"", "insert"], ["", ",", "insert"], ["", "function", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Class", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Name", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ",", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Measure", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "result", "insert"], ["", "=", "insert"], ["", "map", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "(", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Measure", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "else", "insert"], ["", "{", "insert"], ["", "throw", "insert"], ["", "new", "insert"], ["", "Illegal", "insert"], ["", "<con>", "insert"], ["", "State", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["", "(", "insert"], ["", "Messages", "insert"], ["", ".", "insert"], ["", "format", "insert"], ["", "(", "insert"], ["", "\"", "insert"], ["", "Unknown", "insert"], ["", "function", "insert"], ["", "type", "insert"], ["", "'", "insert"], ["", "<con>", "insert"], ["", "{", "insert"], ["", "<con>", "insert"], ["", "}", "insert"], ["", "<con>", "insert"], ["", "'", "insert"], ["", "\"", "insert"], ["", ",", "insert"], ["", "function", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Class", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Name", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "}", "insert"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["Runtime", "Runtime", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["e", "ex", "replace"], [")", ")", "equal"], ["{", "{", "equal"], ["result", "result", "equal"], ["=", "=", "equal"], ["Result", "Result", "equal"], [".", ".", "equal"], ["failure", "failure", "equal"], ["(", "(", "equal"], ["e", "ex", "replace"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["Calculation", "Calculation", "equal"], ["<con>", "<con>", "equal"], ["Result", "Result", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["(", "(", "equal"], ["target", "target", "equal"], [",", ",", "equal"], ["row", "row", "equal"], ["<con>", "<con>", "equal"], ["Index", "Index", "equal"], [",", ",", "equal"], ["column", "column", "equal"], ["<con>", "<con>", "equal"], ["Index", "Index", "equal"], [",", ",", "equal"], ["convert", "convert", "equal"], ["<con>", "<con>", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Reporting", "Reporting", "equal"], ["<con>", "<con>", "equal"], ["Currency", "Currency", "equal"], ["(", "(", "equal"], ["result", "result", "equal"], [",", ",", "equal"], ["calculation", "calculation", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static ImmutableSet < ExecutableElement > getLocalAndInheritedMethods(TypeElement type, Elements elementUtils) { SetMultimap < String, ExecutableElement > methodMap = LinkedHashMultimap.create(); getLocalAndInheritedMethods(getPackage(type), type, methodMap); Set < ExecutableElement > overridden = new LinkedHashSet < ExecutableElement > (); for(String methodName : methodMap.keySet()) { List < ExecutableElement > methodList = ImmutableList.copyOf(methodMap.get(methodName)); for(int i = 0; i < methodList.size(); i ++ ) { ExecutableElement methodI = methodList.get(i); for(int j = i + 1; j < methodList.size(); j ++ ) { ExecutableElement methodJ = methodList.get(j); if(elementUtils.overrides(methodJ, methodI, type)) { overridden.add(methodI); } } } } Set < ExecutableElement > methods = new LinkedHashSet < ExecutableElement > (methodMap.values()); methods.removeAll(overridden); return ImmutableSet.copyOf(methods); } ", "focal_tgt": "@Deprecated public static ImmutableSet < ExecutableElement > getLocalAndInheritedMethods(TypeElement type, Elements elementUtils) { Overrides overrides = new Overrides.NativeOverrides(elementUtils); return getLocalAndInheritedMethods(type, overrides); } ", "test_src": "@Test public void getLocalAndInheritedMethods_Old() { Elements elements = compilation.getElements(); Types types = compilation.getTypes(); TypeMirror intMirror = types.getPrimitiveType(TypeKind.INT); TypeMirror longMirror = types.getPrimitiveType(TypeKind.LONG); TypeElement childType = elements.getTypeElement(Child.class.getCanonicalName()); @SuppressWarnings(\"deprecation\")Set < ExecutableElement > childTypeMethods = MoreElements.getLocalAndInheritedMethods(childType, elements); Set < ExecutableElement > objectMethods = visibleMethodsFromObject(); assertThat(childTypeMethods).containsAtLeastElementsIn(objectMethods); Set < ExecutableElement > nonObjectMethods = Sets.difference(childTypeMethods, objectMethods); assertThat(nonObjectMethods).containsExactly(getMethod(ParentInterface.class, \"bar\", longMirror), getMethod(ParentClass.class, \"foo\"), getMethod(Child.class, \"bar\"), getMethod(Child.class, \"baz\"), getMethod(Child.class, \"buh\", intMirror), getMethod(Child.class, \"buh\", intMirror, intMirror)).inOrder(); ; } ", "label": 0, "focal_db": [2010480, "google/auto", "/data/comment_repos/google@auto", "3d9fa6369a9ee737f51e5115668953e71be8714b", "4fa23f466c0d7be9f45999a7165f10d330d93ea5", "common/src/main/java/com/google/auto/common/MoreElements.java", "9950c7a3175b90f6ee00fb9f6cc688f7c3fbf6a1", "common/src/main/java/com/google/auto/common/MoreElements.java", "public static ImmutableSet<ExecutableElement> getLocalAndInheritedMethods(\n      TypeElement type, Elements elementUtils) {\n    SetMultimap<String, ExecutableElement> methodMap = LinkedHashMultimap.create();\n    getLocalAndInheritedMethods(getPackage(type), type, methodMap);\n    // Find methods that are overridden. We do this using `Elements.overrides`, which means\n    // that it is inherently a quadratic operation, since we have to compare every method against\n    // every other method. We reduce the performance impact by (a) grouping methods by name, since\n    // a method cannot override another method with a different name, and (b) making sure that\n    // methods in ancestor types precede those in descendant types, which means we only have to\n    // check a method against the ones that follow it in that order.\n    Set<ExecutableElement> overridden = new LinkedHashSet<ExecutableElement>();\n    for (String methodName : methodMap.keySet()) {\n      List<ExecutableElement> methodList = ImmutableList.copyOf(methodMap.get(methodName));\n      for (int i = 0; i < methodList.size(); i++) {\n        ExecutableElement methodI = methodList.get(i);\n        for (int j = i + 1; j < methodList.size(); j++) {\n          ExecutableElement methodJ = methodList.get(j);\n          if (elementUtils.overrides(methodJ, methodI, type)) {\n            overridden.add(methodI);\n          }\n        }\n      }\n    }\n    Set<ExecutableElement> methods = new LinkedHashSet<ExecutableElement>(methodMap.values());\n    methods.removeAll(overridden);\n    return ImmutableSet.copyOf(methods);\n  }", "/**\n * Returns the set of all non-private methods from {@code type}, including methods that it\n * inherits from its ancestors. Inherited methods that are overridden are not included in the\n * result. So if {@code type} defines {@code public String toString()}, the returned set will\n * contain that method, but not the {@code toString()} method defined by {@code Object}.\n *\n * <p>The returned set may contain more than one method with the same signature, if\n * {@code type} inherits those methods from different ancestors. For example, if it\n * inherits from unrelated interfaces {@code One} and {@code Two} which each define\n * {@code void foo();}, and if it does not itself override the {@code foo()} method,\n * then both {@code One.foo()} and {@code Two.foo()} will be in the returned set.\n *\n * @param type the type whose own and inherited methods are to be returned\n * @param elementUtils an {@link Elements} object, typically returned by\n *     {@link javax.annotation.processing.AbstractProcessor#processingEnv processingEnv}<!--\n *     -->.{@link javax.annotation.processing.ProcessingEnvironment.getElementUtils()\n *     getElementUtils()}\n */\n", "@Deprecated\n  public static ImmutableSet<ExecutableElement> getLocalAndInheritedMethods(\n      TypeElement type, Elements elementUtils) {\n    Overrides overrides = new Overrides.NativeOverrides(elementUtils);\n    return getLocalAndInheritedMethods(type, overrides);\n  }", "/**\n * Returns the set of all non-private methods from {@code type}, including methods that it\n * inherits from its ancestors. Inherited methods that are overridden are not included in the\n * result. So if {@code type} defines {@code public String toString()}, the returned set will\n * contain that method, but not the {@code toString()} method defined by {@code Object}.\n *\n * <p>The returned set may contain more than one method with the same signature, if\n * {@code type} inherits those methods from different ancestors. For example, if it\n * inherits from unrelated interfaces {@code One} and {@code Two} which each define\n * {@code void foo();}, and if it does not itself override the {@code foo()} method,\n * then both {@code One.foo()} and {@code Two.foo()} will be in the returned set.\n *\n * @param type the type whose own and inherited methods are to be returned\n * @param elementUtils an {@link Elements} object, typically returned by\n *     {@link javax.annotation.processing.AbstractProcessor#processingEnv processingEnv}<!--\n *     -->.{@link javax.annotation.processing.ProcessingEnvironment.getElementUtils()\n *     getElementUtils()}\n *\n * @deprecated The method {@link #getLocalAndInheritedMethods(TypeElement, Types, Elements)}\n *     has better consistency between Java compilers.\n */\n"], "test_db": ["89dcbae7ac7b3b711246263ba5008c2c7d031df9", "google/auto", "/data/comment_repos/google@auto", "getLocalAndInheritedMethods", "/data/comment_repos/google@auto/common/src/test/java/com/google/auto/common/MoreElementsTest.java", "getLocalAndInheritedMethods_Old", "  @Test\n  public void getLocalAndInheritedMethods_Old() {\n    Elements elements = compilation.getElements();\n    Types types = compilation.getTypes();\n    TypeMirror intMirror = types.getPrimitiveType(TypeKind.INT);\n    TypeMirror longMirror = types.getPrimitiveType(TypeKind.LONG);\n    TypeElement childType = elements.getTypeElement(Child.class.getCanonicalName());\n    @SuppressWarnings(\"deprecation\")\n    Set<ExecutableElement> childTypeMethods =\n        MoreElements.getLocalAndInheritedMethods(childType, elements);\n    Set<ExecutableElement> objectMethods = visibleMethodsFromObject();\n    assertThat(childTypeMethods).containsAtLeastElementsIn(objectMethods);\n    Set<ExecutableElement> nonObjectMethods = Sets.difference(childTypeMethods, objectMethods);\n    assertThat(nonObjectMethods).containsExactly(\n            getMethod(ParentInterface.class, \"bar\", longMirror),\n            getMethod(ParentClass.class, \"foo\"),\n            getMethod(Child.class, \"bar\"),\n            getMethod(Child.class, \"baz\"),\n            getMethod(Child.class, \"buh\", intMirror),\n            getMethod(Child.class, \"buh\", intMirror, intMirror))\n        .inOrder();;\n  }", "public static ImmutableSet<ExecutableElement> getLocalAndInheritedMethods(\n      TypeElement type, Types typeUtils, Elements elementUtils) {\n    // TODO(emcmanus): detect if the Types and Elements are the javac ones, and use\n    //   NativeOverrides if so. We may need to adjust the logic further to avoid the bug\n    //   tested for by MoreElementsTest.getLocalAndInheritedMethods_DaggerBug.\n    Overrides overrides = new Overrides.ExplicitOverrides(typeUtils, elementUtils);\n    return getLocalAndInheritedMethods(type, overrides);\n  }", "common/src/main/java/com/google/auto/common/MoreElements.java", "public static ImmutableSet<ExecutableElement> getLocalAndInheritedMethods(\n      TypeElement type, Types typeUtils, Elements elementUtils) {\n    // TODO(emcmanus): detect if the Types and Elements are the javac ones, and use\n    //   NativeOverrides if so. We may need to adjust the logic further to avoid the bug\n    //   tested for by MoreElementsTest.getLocalAndInheritedMethods_DaggerBug.\n    Overrides overrides = new Overrides.ExplicitOverrides(typeUtils);\n    return getLocalAndInheritedMethods(type, overrides);\n  }", "common/src/main/java/com/google/auto/common/MoreElements.java"], "edit_seq": [["", "@", "insert"], ["", "Deprecated", "insert"], ["public", "public", "equal"], ["static", "static", "equal"], ["Immutable", "Immutable", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Executable", "Executable", "equal"], ["<con>", "<con>", "equal"], ["Element", "Element", "equal"], [">", ">", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Local", "Local", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Inherited", "Inherited", "equal"], ["<con>", "<con>", "equal"], ["Methods", "Methods", "equal"], ["(", "(", "equal"], ["Type", "Type", "equal"], ["<con>", "<con>", "equal"], ["Element", "Element", "equal"], ["type", "type", "equal"], [",", ",", "equal"], ["Elements", "Elements", "equal"], ["element", "element", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Set", "", "delete"], ["<con>", "", "delete"], ["Multimap", "", "delete"], ["<", "", "delete"], ["String", "", "delete"], [",", "", "delete"], ["Executable", "", "delete"], ["<con>", "", "delete"], ["Element", "", "delete"], [">", "Overrides", "replace"], ["method", "overrides", "replace"], ["<con>", "", "delete"], ["Map", "", "delete"], ["=", "=", "equal"], ["", "new", "insert"], ["Linked", "Overrides", "replace"], ["<con>", "", "delete"], ["Hash", "", "delete"], ["<con>", "", "delete"], ["Multimap", "", "delete"], [".", ".", "equal"], ["create", "Native", "replace"], ["", "<con>", "insert"], ["", "Overrides", "insert"], ["(", "(", "equal"], ["", "element", "insert"], ["", "<con>", "insert"], ["", "Utils", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["", "return", "insert"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Local", "Local", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Inherited", "Inherited", "equal"], ["<con>", "<con>", "equal"], ["Methods", "Methods", "equal"], ["(", "(", "equal"], ["get", "", "delete"], ["<con>", "", "delete"], ["Package", "", "delete"], ["(", "", "delete"], ["type", "", "delete"], [")", "", "delete"], [",", "", "delete"], ["type", "type", "equal"], [",", ",", "equal"], ["method", "", "delete"], ["<con>", "", "delete"], ["Map", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["Set", "", "delete"], ["<", "", "delete"], ["Executable", "", "delete"], ["<con>", "", "delete"], ["Element", "", "delete"], [">", "", "delete"], ["overridden", "", "delete"], ["=", "", "delete"], ["new", "", "delete"], ["Linked", "", "delete"], ["<con>", "", "delete"], ["Hash", "", "delete"], ["<con>", "", "delete"], ["Set", "", "delete"], ["<", "", "delete"], ["Executable", "", "delete"], ["<con>", "", "delete"], ["Element", "", "delete"], [">", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["for", "", "delete"], ["(", "", "delete"], ["String", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["Name", "", "delete"], [":", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["Map", "", "delete"], [".", "", "delete"], ["key", "", "delete"], ["<con>", "", "delete"], ["Set", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [")", "", "delete"], ["{", "", "delete"], ["List", "", "delete"], ["<", "", "delete"], ["Executable", "", "delete"], ["<con>", "", "delete"], ["Element", "", "delete"], [">", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["List", "", "delete"], ["=", "", "delete"], ["Immutable", "", "delete"], ["<con>", "", "delete"], ["List", "", "delete"], [".", "", "delete"], ["copy", "", "delete"], ["<con>", "", "delete"], ["Of", "", "delete"], ["(", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["Map", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["(", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["Name", "", "delete"], [")", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["for", "", "delete"], ["(", "", "delete"], ["int", "", "delete"], ["i", "", "delete"], ["=", "", "delete"], ["0", "", "delete"], [";", "", "delete"], ["i", "", "delete"], ["<", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["List", "", "delete"], [".", "", "delete"], ["size", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["i", "", "delete"], ["++", "", "delete"], [")", "", "delete"], ["{", "", "delete"], ["Executable", "", "delete"], ["<con>", "", "delete"], ["Element", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["I", "", "delete"], ["=", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["List", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["(", "", "delete"], ["i", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["for", "", "delete"], ["(", "", "delete"], ["int", "", "delete"], ["j", "", "delete"], ["=", "", "delete"], ["i", "", "delete"], ["+", "", "delete"], ["1", "", "delete"], [";", "", "delete"], ["j", "", "delete"], ["<", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["List", "", "delete"], [".", "", "delete"], ["size", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["j", "", "delete"], ["++", "", "delete"], [")", "", "delete"], ["{", "", "delete"], ["Executable", "", "delete"], ["<con>", "", "delete"], ["Element", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["J", "", "delete"], ["=", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["List", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["(", "", "delete"], ["j", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["if", "", "delete"], ["(", "", "delete"], ["element", "", "delete"], ["<con>", "", "delete"], ["Utils", "", "delete"], [".", "", "delete"], ["overrides", "overrides", "equal"], ["(", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["J", "", "delete"], [",", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["I", "", "delete"], [",", "", "delete"], ["type", "", "delete"], [")", "", "delete"], [")", "", "delete"], ["{", "", "delete"], ["overridden", "", "delete"], [".", "", "delete"], ["add", "", "delete"], ["(", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["I", "", "delete"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "", "delete"], ["}", "", "delete"], ["}", "", "delete"], ["Set", "", "delete"], ["<", "", "delete"], ["Executable", "", "delete"], ["<con>", "", "delete"], ["Element", "", "delete"], [">", "", "delete"], ["methods", "", "delete"], ["=", "", "delete"], ["new", "", "delete"], ["Linked", "", "delete"], ["<con>", "", "delete"], ["Hash", "", "delete"], ["<con>", "", "delete"], ["Set", "", "delete"], ["<", "", "delete"], ["Executable", "", "delete"], ["<con>", "", "delete"], ["Element", "", "delete"], [">", "", "delete"], ["(", "", "delete"], ["method", "", "delete"], ["<con>", "", "delete"], ["Map", "", "delete"], [".", "", "delete"], ["values", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["methods", "", "delete"], [".", "", "delete"], ["remove", "", "delete"], ["<con>", "", "delete"], ["All", "", "delete"], ["(", "", "delete"], ["overridden", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["return", "", "delete"], ["Immutable", "", "delete"], ["<con>", "", "delete"], ["Set", "", "delete"], [".", "", "delete"], ["copy", "", "delete"], ["<con>", "", "delete"], ["Of", "", "delete"], ["(", "", "delete"], ["methods", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["}", "", "delete"]]}, {"focal_src": "@Nullable static MetricDescriptor createMetricDescriptor(View view, String projectId) { if( ! (view.getWindow()instanceof Cumulative)) { return null; } MetricDescriptor.Builder builder = MetricDescriptor.newBuilder(); String viewName = view.getName().asString(); builder.setName(String.format(\"projects/%s\", projectId)); builder.setType(String.format(\"custom.googleapis.com/opencensus/%s\", viewName)); builder.setDescription(view.getDescription()); builder.setUnit(view.getMeasure().getUnit()); builder.setDisplayName(\"OpenCensus/\" + viewName); for(TagKey tagKey : view.getColumns()) { builder.addLabels(createLabelDescriptor(tagKey)); } builder.setMetricKind(createMetricKind(view.getWindow())); builder.setValueType(createValueType(view.getAggregation(), view.getMeasure())); return builder.build(); } ", "focal_tgt": "@Nullable static MetricDescriptor createMetricDescriptor(View view, String projectId) { if( ! (view.getWindow()instanceof Cumulative)) { return null; } MetricDescriptor.Builder builder = MetricDescriptor.newBuilder(); String viewName = view.getName().asString(); String type = generateType(viewName); builder.setName(String.format(\"projects/%s/metricDescriptors/%s\", projectId, type)); builder.setType(type); builder.setDescription(view.getDescription()); builder.setUnit(view.getMeasure().getUnit()); builder.setDisplayName(\"OpenCensus/\" + viewName); for(TagKey tagKey : view.getColumns()) { builder.addLabels(createLabelDescriptor(tagKey)); } builder.setMetricKind(createMetricKind(view.getWindow())); builder.setValueType(createValueType(view.getAggregation(), view.getMeasure())); return builder.build(); } ", "test_src": "@Test public void createMetricDescriptor() { MetricDescriptor metricDescriptor = StackdriverExportUtils.createMetricDescriptor(METRIC_DESCRIPTOR, PROJECT_ID, \"custom.googleapis.com/myorg/\", \"myorg/\", DEFAULT_CONSTANT_LABELS); assertThat(metricDescriptor.getName()).isEqualTo(\"projects/\" + PROJECT_ID + \"/metricDescriptors/custom.googleapis.com/myorg/\" + METRIC_NAME); assertThat(metricDescriptor.getDescription()).isEqualTo(METRIC_DESCRIPTION); assertThat(metricDescriptor.getDisplayName()).isEqualTo(\"myorg/\" + METRIC_NAME); assertThat(metricDescriptor.getType()).isEqualTo(\"custom.googleapis.com/myorg/\" + METRIC_NAME); assertThat(metricDescriptor.getUnit()).isEqualTo(METRIC_UNIT); assertThat(metricDescriptor.getMetricKind()).isEqualTo(MetricKind.CUMULATIVE); assertThat(metricDescriptor.getValueType()).isEqualTo(MetricDescriptor.ValueType.DOUBLE); assertThat(metricDescriptor.getLabelsList()).containsExactly(LabelDescriptor.newBuilder().setKey(LABEL_KEY.get(0).getKey()).setDescription(LABEL_KEY.get(0).getDescription()).setValueType(ValueType.STRING).build(), LabelDescriptor.newBuilder().setKey(StackdriverExportUtils.OPENCENSUS_TASK_KEY.getKey()).setDescription(StackdriverExportUtils.OPENCENSUS_TASK_KEY.getDescription()).setValueType(ValueType.STRING).build()); } ", "label": 0, "focal_db": [1609508, "census-instrumentation/opencensus-java", "/data/comment_repos/census-instrumentation@opencensus-java", "86b751df5030639c86f193d46842d1fdf8adb83b", "ea35103426d0246206ee20ce45bc35fb55e9a73c", "exporters/stats/stackdriver/src/main/java/io/opencensus/exporter/stats/stackdriver/StackdriverExportUtils.java", "2b45dcdf8870fbef1d67d4275edd606050c5daff", "exporters/stats/stackdriver/src/main/java/io/opencensus/exporter/stats/stackdriver/StackdriverExportUtils.java", "@Nullable\n  static MetricDescriptor createMetricDescriptor(View view, String projectId) {\n    if (!(view.getWindow() instanceof Cumulative)) {\n      // TODO(songya): Only Cumulative view will be exported to Stackdriver in this version.\n      return null;\n    }\n\n    MetricDescriptor.Builder builder = MetricDescriptor.newBuilder();\n    String viewName = view.getName().asString();\n    // Name format refers to\n    // cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors/create\n    builder.setName(String.format(\"projects/%s\", projectId));\n    builder.setType(String.format(\"custom.googleapis.com/opencensus/%s\", viewName));\n    builder.setDescription(view.getDescription());\n    builder.setUnit(view.getMeasure().getUnit());\n    builder.setDisplayName(\"OpenCensus/\" + viewName);\n    for (TagKey tagKey : view.getColumns()) {\n      builder.addLabels(createLabelDescriptor(tagKey));\n    }\n    builder.setMetricKind(createMetricKind(view.getWindow()));\n    builder.setValueType(createValueType(view.getAggregation(), view.getMeasure()));\n    return builder.build();\n  }", "// Construct a MetricDescriptor using a View.\n", "@Nullable\n  static MetricDescriptor createMetricDescriptor(View view, String projectId) {\n    if (!(view.getWindow() instanceof Cumulative)) {\n      // TODO(songya): Only Cumulative view will be exported to Stackdriver in this version.\n      return null;\n    }\n\n    MetricDescriptor.Builder builder = MetricDescriptor.newBuilder();\n    String viewName = view.getName().asString();\n    String type = generateType(viewName);\n    // Name format refers to\n    // cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors/create\n    builder.setName(String.format(\"projects/%s/metricDescriptors/%s\", projectId, type));\n    builder.setType(type);\n    builder.setDescription(view.getDescription());\n    builder.setUnit(view.getMeasure().getUnit());\n    builder.setDisplayName(\"OpenCensus/\" + viewName);\n    for (TagKey tagKey : view.getColumns()) {\n      builder.addLabels(createLabelDescriptor(tagKey));\n    }\n    builder.setMetricKind(createMetricKind(view.getWindow()));\n    builder.setValueType(createValueType(view.getAggregation(), view.getMeasure()));\n    return builder.build();\n  }", "// Construct a MetricDescriptor using a View.\n"], "test_db": ["14f60542376b1862c36d6092d354d9d651e1f61c", "census-instrumentation/opencensus-java", "/data/comment_repos/census-instrumentation@opencensus-java", "createMetricDescriptor", "/data/comment_repos/census-instrumentation@opencensus-java/exporters/stats/stackdriver/src/test/java/io/opencensus/exporter/stats/stackdriver/StackdriverExportUtilsTest.java", "createMetricDescriptor", "  @Test\n  public void createMetricDescriptor() {\n    MetricDescriptor metricDescriptor =\n        StackdriverExportUtils.createMetricDescriptor(\n            METRIC_DESCRIPTOR,\n            PROJECT_ID,\n            \"custom.googleapis.com/myorg/\",\n            \"myorg/\",\n            DEFAULT_CONSTANT_LABELS);\n    assertThat(metricDescriptor.getName())\n        .isEqualTo(\n            \"projects/\"\n                + PROJECT_ID\n                + \"/metricDescriptors/custom.googleapis.com/myorg/\"\n                + METRIC_NAME);\n    assertThat(metricDescriptor.getDescription()).isEqualTo(METRIC_DESCRIPTION);\n    assertThat(metricDescriptor.getDisplayName()).isEqualTo(\"myorg/\" + METRIC_NAME);\n    assertThat(metricDescriptor.getType()).isEqualTo(\"custom.googleapis.com/myorg/\" + METRIC_NAME);\n    assertThat(metricDescriptor.getUnit()).isEqualTo(METRIC_UNIT);\n    assertThat(metricDescriptor.getMetricKind()).isEqualTo(MetricKind.CUMULATIVE);\n\n    assertThat(metricDescriptor.getValueType()).isEqualTo(MetricDescriptor.ValueType.DOUBLE);\n    assertThat(metricDescriptor.getLabelsList())\n        .containsExactly(\n            LabelDescriptor.newBuilder()\n                .setKey(LABEL_KEY.get(0).getKey())\n                .setDescription(LABEL_KEY.get(0).getDescription())\n                .setValueType(ValueType.STRING)\n                .build(),\n            LabelDescriptor.newBuilder()\n                .setKey(StackdriverExportUtils.OPENCENSUS_TASK_KEY.getKey())\n                .setDescription(StackdriverExportUtils.OPENCENSUS_TASK_KEY.getDescription())\n                .setValueType(ValueType.STRING)\n                .build());\n  }", "@Nullable\n  static MetricDescriptor createMetricDescriptor(View view, String projectId) {\n    if (!(view.getWindow() instanceof Cumulative)) {\n      // TODO(songya): Only Cumulative view will be exported to Stackdriver in this version.\n      return null;\n    }\n\n    MetricDescriptor.Builder builder = MetricDescriptor.newBuilder();\n    String viewName = view.getName().asString();\n    // Name format refers to\n    // cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors/create\n    builder.setName(String.format(\"projects/%s\", projectId));\n    builder.setType(String.format(\"custom.googleapis.com/opencensus/%s\", viewName));\n    builder.setDescription(view.getDescription());\n    builder.setUnit(view.getMeasure().getUnit());\n    builder.setDisplayName(\"OpenCensus/\" + viewName);\n    for (TagKey tagKey : view.getColumns()) {\n      builder.addLabels(createLabelDescriptor(tagKey));\n    }\n    builder.setMetricKind(createMetricKind(view.getWindow()));\n    builder.setValueType(createValueType(view.getAggregation(), view.getMeasure()));\n    return builder.build();\n  }", "exporters/stats/stackdriver/src/main/java/io/opencensus/exporter/stats/stackdriver/StackdriverExportUtils.java", "@Nullable\n  static MetricDescriptor createMetricDescriptor(View view, String projectId) {\n    if (!(view.getWindow() instanceof Cumulative)) {\n      // TODO(songya): Only Cumulative view will be exported to Stackdriver in this version.\n      return null;\n    }\n\n    MetricDescriptor.Builder builder = MetricDescriptor.newBuilder();\n    String viewName = view.getName().asString();\n    String type = generateType(viewName);\n    // Name format refers to\n    // cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors/create\n    builder.setName(String.format(\"projects/%s/metricDescriptors/%s\", projectId, type));\n    builder.setType(type);\n    builder.setDescription(view.getDescription());\n    builder.setUnit(view.getMeasure().getUnit());\n    builder.setDisplayName(\"OpenCensus/\" + viewName);\n    for (TagKey tagKey : view.getColumns()) {\n      builder.addLabels(createLabelDescriptor(tagKey));\n    }\n    builder.setMetricKind(createMetricKind(view.getWindow()));\n    builder.setValueType(createValueType(view.getAggregation(), view.getMeasure()));\n    return builder.build();\n  }", "exporters/stats/stackdriver/src/main/java/io/opencensus/exporter/stats/stackdriver/StackdriverExportUtils.java"], "edit_seq": [["@", "@", "equal"], ["Nullable", "Nullable", "equal"], ["static", "static", "equal"], ["Metric", "Metric", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Metric", "Metric", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], ["(", "(", "equal"], ["View", "View", "equal"], ["view", "view", "equal"], [",", ",", "equal"], ["String", "String", "equal"], ["project", "project", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["(", "(", "equal"], ["view", "view", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Window", "Window", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["instanceof", "instanceof", "equal"], ["Cumulative", "Cumulative", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["null", "null", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["Metric", "Metric", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], [".", ".", "equal"], ["Builder", "Builder", "equal"], ["builder", "builder", "equal"], ["=", "=", "equal"], ["Metric", "Metric", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], [".", ".", "equal"], ["new", "new", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["String", "String", "equal"], ["view", "view", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["=", "=", "equal"], ["view", "view", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["as", "as", "equal"], ["<con>", "<con>", "equal"], ["String", "String", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["", "String", "insert"], ["", "type", "insert"], ["", "=", "insert"], ["", "generate", "insert"], ["", "<con>", "insert"], ["", "Type", "insert"], ["", "(", "insert"], ["", "view", "insert"], ["", "<con>", "insert"], ["", "Name", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["builder", "builder", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], [".", ".", "equal"], ["format", "format", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["projects", "projects", "equal"], ["<con>", "<con>", "equal"], ["/", "/", "equal"], ["<con>", "<con>", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["s", "s", "equal"], ["", "<con>", "insert"], ["", "/", "insert"], ["", "<con>", "insert"], ["", "metric", "insert"], ["", "<con>", "insert"], ["", "Descriptors", "insert"], ["", "<con>", "insert"], ["", "/", "insert"], ["", "<con>", "insert"], ["", "%", "insert"], ["", "<con>", "insert"], ["", "s", "insert"], ["\"", "\"", "equal"], [",", ",", "equal"], ["project", "project", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["", ",", "insert"], ["", "type", "insert"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], ["(", "(", "equal"], ["String", "type", "replace"], [".", "", "delete"], ["format", "", "delete"], ["(", "", "delete"], ["\"", "", "delete"], ["custom", "", "delete"], ["<con>", "", "delete"], [".", "", "delete"], ["<con>", "", "delete"], ["googleapis", "", "delete"], ["<con>", "", "delete"], [".", "", "delete"], ["<con>", "", "delete"], ["com", "", "delete"], ["<con>", "", "delete"], ["/", "", "delete"], ["<con>", "", "delete"], ["opencensus", "", "delete"], ["<con>", "", "delete"], ["/", "", "delete"], ["<con>", "", "delete"], ["%", "", "delete"], ["<con>", "", "delete"], ["s", "", "delete"], ["\"", "", "delete"], [",", "", "delete"], ["view", "", "delete"], ["<con>", "", "delete"], ["Name", "", "delete"], [")", "", "delete"], [")", ")", "equal"], [";", ";", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Description", "Description", "equal"], ["(", "(", "equal"], ["view", "view", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Description", "Description", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Unit", "Unit", "equal"], ["(", "(", "equal"], ["view", "view", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Measure", "Measure", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Unit", "Unit", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Display", "Display", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Open", "Open", "equal"], ["<con>", "<con>", "equal"], ["Census", "Census", "equal"], ["<con>", "<con>", "equal"], ["/", "/", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["view", "view", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["Tag", "Tag", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["tag", "tag", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], [":", ":", "equal"], ["view", "view", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Columns", "Columns", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["Labels", "Labels", "equal"], ["(", "(", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Label", "Label", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], ["(", "(", "equal"], ["tag", "tag", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Metric", "Metric", "equal"], ["<con>", "<con>", "equal"], ["Kind", "Kind", "equal"], ["(", "(", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Metric", "Metric", "equal"], ["<con>", "<con>", "equal"], ["Kind", "Kind", "equal"], ["(", "(", "equal"], ["view", "view", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Window", "Window", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], ["(", "(", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], ["(", "(", "equal"], ["view", "view", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Aggregation", "Aggregation", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["view", "view", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Measure", "Measure", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["build", "build", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static Interval delta(long earlierTime_millis, long laterTime_millis) { return Interval.milliseconds(laterTime_millis - earlierTime_millis); } ", "focal_tgt": "public static Interval delta(long earlierTime_millis, long laterTime_millis) { return Interval.millis(laterTime_millis - earlierTime_millis); } ", "test_src": "@Test public void deltaTest()throws Exception { startTest(false); Interval in = Interval.delta(1000, 10000); assertEquals(10000 - 1000, in.millis()); assertEquals((10000 - 1000) / 1000, in.secs(), 0); succeed(); } ", "label": 0, "focal_db": [2269829, "iDevicesInc/SweetBlue", "/data/comment_repos/iDevicesInc@SweetBlue", "fd3ce2e01cd1acc261e716907267218a8242081d", "cf4569328bdb41493ba4ac27d67fc4f0e92edb52", "src/com/idevicesinc/sweetblue/utils/Interval.java", "84e42674780f186929d359b2293be457b22af35d", "src/com/idevicesinc/sweetblue/utils/Interval.java", "public static Interval delta(long earlierTime_millis, long laterTime_millis)\n\t{\n\t\treturn Interval.milliseconds(laterTime_millis - earlierTime_millis);\n\t}", "/**\n * Returns a new {@link Interval} representing the delta between the two epoch times.\n */\n", "public static Interval delta(long earlierTime_millis, long laterTime_millis)\n\t{\n\t\treturn Interval.millis(laterTime_millis - earlierTime_millis);\n\t}", "/**\n * Returns a new {@link Interval} representing the delta between the two epoch times.\n */\n"], "test_db": ["fd3ce2e01cd1acc261e716907267218a8242081d", "iDevicesInc/SweetBlue", "/data/comment_repos/iDevicesInc@SweetBlue", "delta", "/data/comment_repos/iDevicesInc@SweetBlue/tester/src/test/java/com/idevicesinc/sweetblue/IntervalTest.java", "deltaTest", "    @Test\n    public void deltaTest() throws Exception\n    {\n        startTest(false);\n        Interval in = Interval.delta(1000, 10000);\n        assertEquals(10000 - 1000, in.millis());\n        assertEquals((10000 - 1000) / 1000, in.secs(), 0);\n        succeed();\n    }", "public static Interval delta(long earlierTime_millis, long laterTime_millis)\n\t{\n\t\treturn Interval.milliseconds(laterTime_millis - earlierTime_millis);\n\t}", "src/com/idevicesinc/sweetblue/utils/Interval.java", "public static Interval delta(long earlierTime_millis, long laterTime_millis)\n\t{\n\t\treturn Interval.millis(laterTime_millis - earlierTime_millis);\n\t}", "src/com/idevicesinc/sweetblue/utils/Interval.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["Interval", "Interval", "equal"], ["delta", "delta", "equal"], ["(", "(", "equal"], ["long", "long", "equal"], ["earlier", "earlier", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["millis", "millis", "equal"], [",", ",", "equal"], ["long", "long", "equal"], ["later", "later", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["millis", "millis", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["Interval", "Interval", "equal"], [".", ".", "equal"], ["milliseconds", "millis", "replace"], ["(", "(", "equal"], ["later", "later", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["millis", "millis", "equal"], ["-", "-", "equal"], ["earlier", "earlier", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["millis", "millis", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "@EventListener(priority = Integer.MAX_VALUE)public void request(TaskExecutionRequestEvent event) { LOG.trace(\"Task execution request received\"); usageService.incrementUsageFor(event.getModuleId()); executor.execute(() -> executionService.submit(event.getModuleId(), event.getParameters())); LOG.trace(\"Task execution submitted\"); } ", "focal_tgt": "@EventListener(priority = Integer.MAX_VALUE)public void request(TaskExecutionRequestEvent event) { LOG.trace(\"Task execution request received\"); usageService.incrementUsageFor(event.getModuleId()); executor.execute(() -> executionService.execute(event.getParameters())); LOG.trace(\"Task execution submitted\"); } ", "test_src": "@Test public void request() { String moduleId = \"module\"; AbstractParameters params = mock(AbstractParameters.class); victim.request(new TaskExecutionRequestEvent(moduleId, params)); verify(usageService).incrementUsageFor(moduleId); verify(executionService, timeout(1000).times(1)).execute(params); } ", "label": 0, "focal_db": [3722771, "torakiki/pdfsam", "/data/comment_repos/torakiki@pdfsam", "4e7e86a55ab4a9a1a19b2f4ea65381ab2b0c7558", "9772a32b5053ce72e590c46417438834224019d2", "pdfsam-service/src/main/java/org/pdfsam/task/TaskExecutionController.java", "afe95da7fa174608e5f6125f3c61df0514118881", "pdfsam-service/src/main/java/org/pdfsam/task/TaskExecutionController.java", "@EventListener(priority = Integer.MAX_VALUE)\n    public void request(TaskExecutionRequestEvent event) {\n        LOG.trace(\"Task execution request received\");\n        usageService.incrementUsageFor(event.getModuleId());\n        executor.execute(() -> executionService.submit(event.getModuleId(), event.getParameters()));\n        LOG.trace(\"Task execution submitted\");\n    }", "/**\n * Request a task execution\n *\n * @param event\n */\n", "@EventListener(priority = Integer.MAX_VALUE)\n    public void request(TaskExecutionRequestEvent event) {\n        LOG.trace(\"Task execution request received\");\n        usageService.incrementUsageFor(event.getModuleId());\n        executor.execute(() -> executionService.execute(event.getParameters()));\n        LOG.trace(\"Task execution submitted\");\n    }", "/**\n * Request a task execution\n *\n * @param event\n */\n"], "test_db": ["7cb202376bca50aff40bd0c3324b5a3b20649921", "torakiki/pdfsam", "/data/comment_repos/torakiki@pdfsam", "request", "/data/comment_repos/torakiki@pdfsam/pdfsam-service/src/test/java/org/pdfsam/task/TaskExecutionControllerTest.java", "request", "    @Test\n    public void request() {\n        String moduleId = \"module\";\n        AbstractParameters params = mock(AbstractParameters.class);\n        victim.request(new TaskExecutionRequestEvent(moduleId, params));\n        verify(usageService).incrementUsageFor(moduleId);\n        verify(executionService, timeout(1000).times(1)).execute(params);\n    }", "@EventListener\n    public void request(TaskExecutionRequestEvent event) {\n        LOG.trace(\"Task execution request received\");\n        usageService.incrementUsageFor(event.getModuleId());\n        executor.submit(() -> executionService.submit(event.getModuleId(), event.getParameters()));\n        LOG.trace(\"Task execution submitted\");\n    }", "pdfsam-service/src/main/java/org/pdfsam/task/TaskExecutionController.java", "@EventListener\n    public void request(TaskExecutionRequestEvent event) {\n        LOG.trace(\"Task execution request received\");\n        usageService.incrementUsageFor(event.getModuleId());\n        executor.execute(() -> executionService.submit(event.getModuleId(), event.getParameters()));\n        LOG.trace(\"Task execution submitted\");\n    }", "pdfsam-service/src/main/java/org/pdfsam/task/TaskExecutionController.java"], "edit_seq": [["@", "@", "equal"], ["Event", "Event", "equal"], ["<con>", "<con>", "equal"], ["Listener", "Listener", "equal"], ["(", "(", "equal"], ["priority", "priority", "equal"], ["=", "=", "equal"], ["Integer", "Integer", "equal"], [".", ".", "equal"], ["MAX", "MAX", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["VALUE", "VALUE", "equal"], [")", ")", "equal"], ["public", "public", "equal"], ["void", "void", "equal"], ["request", "request", "equal"], ["(", "(", "equal"], ["Task", "Task", "equal"], ["<con>", "<con>", "equal"], ["Execution", "Execution", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["event", "event", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["LOG", "LOG", "equal"], [".", ".", "equal"], ["trace", "trace", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Task", "Task", "equal"], ["execution", "execution", "equal"], ["request", "request", "equal"], ["received", "received", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["usage", "usage", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], [".", ".", "equal"], ["increment", "increment", "equal"], ["<con>", "<con>", "equal"], ["Usage", "Usage", "equal"], ["<con>", "<con>", "equal"], ["For", "For", "equal"], ["(", "(", "equal"], ["event", "event", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Module", "Module", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["executor", "executor", "equal"], [".", ".", "equal"], ["execute", "execute", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["->", "->", "equal"], ["execution", "execution", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], [".", ".", "equal"], ["submit", "execute", "replace"], ["(", "(", "equal"], ["event", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Module", "", "delete"], ["<con>", "", "delete"], ["Id", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [",", "", "delete"], ["event", "event", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Parameters", "Parameters", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["LOG", "LOG", "equal"], [".", ".", "equal"], ["trace", "trace", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Task", "Task", "equal"], ["execution", "execution", "equal"], ["submitted", "submitted", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public final JsonAdapter < T > serializeNulls() { final JsonAdapter < T > delegate = this; return new JsonAdapter < T > () { @Override public@Nullable T fromJson(JsonReader reader)throws IOException { return delegate.fromJson(reader); }@Override public void toJson(JsonWriter writer, @Nullable T value)throws IOException { boolean serializeNulls = writer.getSerializeNulls(); writer.setSerializeNulls(true); try { delegate.toJson(writer, value); } finally { writer.setSerializeNulls(serializeNulls); } }@Override public String toString() { return delegate + \".serializeNulls()\"; } }; } ", "focal_tgt": "@CheckReturnValue public final JsonAdapter < T > serializeNulls() { final JsonAdapter < T > delegate = this; return new JsonAdapter < T > () { @Override public@Nullable T fromJson(JsonReader reader)throws IOException { return delegate.fromJson(reader); }@Override public void toJson(JsonWriter writer, @Nullable T value)throws IOException { boolean serializeNulls = writer.getSerializeNulls(); writer.setSerializeNulls(true); try { delegate.toJson(writer, value); } finally { writer.setSerializeNulls(serializeNulls); } }@Override public String toString() { return delegate + \".serializeNulls()\"; } }; } ", "test_src": "@Test public void serializeNulls()throws Exception { JsonAdapter < Map < String, String > > serializeNulls = new JsonAdapter < Map < String, String > > () { @Override public Map < String, String > fromJson(JsonReader reader)throws IOException { throw new AssertionError(); }@Override public void toJson(JsonWriter writer, Map < String, String > map)throws IOException { writer.beginObject(); for(Map.Entry < String, String > entry : map.entrySet()) { writer.name(entry.getKey()).value(entry.getValue()); } writer.endObject(); } }.serializeNulls(); JsonWriter writer = factory.newWriter(); serializeNulls.toJson(writer, Collections. < String, String > singletonMap(\"a\", null)); assertThat(factory.json()).isEqualTo(\"{\\\"a\\\":null}\"); } ", "label": 0, "focal_db": [3565757, "square/moshi", "/data/comment_repos/square@moshi", "e643a04ee5334a29c275bcbdd91689908700c8e7", "43da90e8d5e0a3303bc3e2782797c3f4a4bf4084", "moshi/src/main/java/com/squareup/moshi/JsonAdapter.java", "8b832a439cbe581fab822adfa4b80ac41fe086b6", "moshi/src/main/java/com/squareup/moshi/JsonAdapter.java", "public final JsonAdapter<T> serializeNulls() {\n    final JsonAdapter<T> delegate = this;\n    return new JsonAdapter<T>() {\n      @Override public @Nullable T fromJson(JsonReader reader) throws IOException {\n        return delegate.fromJson(reader);\n      }\n      @Override public void toJson(JsonWriter writer, @Nullable T value) throws IOException {\n        boolean serializeNulls = writer.getSerializeNulls();\n        writer.setSerializeNulls(true);\n        try {\n          delegate.toJson(writer, value);\n        } finally {\n          writer.setSerializeNulls(serializeNulls);\n        }\n      }\n      @Override public String toString() {\n        return delegate + \".serializeNulls()\";\n      }\n    };\n  }", "/**\n * Returns a JSON adapter equal to this JSON adapter, but that serializes nulls when encoding\n * JSON.\n */\n", "@CheckReturnValue public final JsonAdapter<T> serializeNulls() {\n    final JsonAdapter<T> delegate = this;\n    return new JsonAdapter<T>() {\n      @Override public @Nullable T fromJson(JsonReader reader) throws IOException {\n        return delegate.fromJson(reader);\n      }\n      @Override public void toJson(JsonWriter writer, @Nullable T value) throws IOException {\n        boolean serializeNulls = writer.getSerializeNulls();\n        writer.setSerializeNulls(true);\n        try {\n          delegate.toJson(writer, value);\n        } finally {\n          writer.setSerializeNulls(serializeNulls);\n        }\n      }\n      @Override public String toString() {\n        return delegate + \".serializeNulls()\";\n      }\n    };\n  }", "/**\n * Returns a JSON adapter equal to this JSON adapter, but that serializes nulls when encoding\n * JSON.\n */\n"], "test_db": ["c65b3bf1cbdf710ea689cf5e9c26579aa75ea42c", "square/moshi", "/data/comment_repos/square@moshi", "serializeNulls", "/data/comment_repos/square@moshi/moshi/src/test/java/com/squareup/moshi/JsonAdapterTest.java", "serializeNulls", "  @Test public void serializeNulls() throws Exception {\n    JsonAdapter<Map<String, String>> serializeNulls = new JsonAdapter<Map<String, String>>() {\n      @Override public Map<String, String> fromJson(JsonReader reader) throws IOException {\n        throw new AssertionError();\n      }\n\n      @Override public void toJson(JsonWriter writer, Map<String, String> map) throws IOException {\n        writer.beginObject();\n        for (Map.Entry<String, String> entry : map.entrySet()) {\n          writer.name(entry.getKey()).value(entry.getValue());\n        }\n        writer.endObject();\n      }\n    }.serializeNulls();\n\n    JsonWriter writer = factory.newWriter();\n    serializeNulls.toJson(writer, Collections.<String, String>singletonMap(\"a\", null));\n    assertThat(factory.json()).isEqualTo(\"{\\\"a\\\":null}\");\n  }", "public final JsonAdapter<T> serializeNulls() {\n    final JsonAdapter<T> delegate = this;\n    return new JsonAdapter<T>() {\n      @Override public T fromJson(JsonReader reader) throws IOException {\n        return delegate.fromJson(reader);\n      }\n      @Override public void toJson(JsonWriter writer, T value) throws IOException {\n        boolean serializeNulls = writer.getSerializeNulls();\n        writer.setSerializeNulls(true);\n        try {\n          delegate.toJson(writer, value);\n        } finally {\n          writer.setSerializeNulls(serializeNulls);\n        }\n      }\n      @Override public String toString() {\n        return delegate + \".serializeNulls()\";\n      }\n    };\n  }", "moshi/src/main/java/com/squareup/moshi/JsonAdapter.java", "public final JsonAdapter<T> serializeNulls() {\n    final JsonAdapter<T> delegate = this;\n    return new JsonAdapter<T>() {\n      @Override public @Nullable T fromJson(JsonReader reader) throws IOException {\n        return delegate.fromJson(reader);\n      }\n      @Override public void toJson(JsonWriter writer, @Nullable T value) throws IOException {\n        boolean serializeNulls = writer.getSerializeNulls();\n        writer.setSerializeNulls(true);\n        try {\n          delegate.toJson(writer, value);\n        } finally {\n          writer.setSerializeNulls(serializeNulls);\n        }\n      }\n      @Override public String toString() {\n        return delegate + \".serializeNulls()\";\n      }\n    };\n  }", "moshi/src/main/java/com/squareup/moshi/JsonAdapter.java"], "edit_seq": [["", "@", "insert"], ["", "Check", "insert"], ["", "<con>", "insert"], ["", "Return", "insert"], ["", "<con>", "insert"], ["", "Value", "insert"], ["public", "public", "equal"], ["final", "final", "equal"], ["Json", "Json", "equal"], ["<con>", "<con>", "equal"], ["Adapter", "Adapter", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["serialize", "serialize", "equal"], ["<con>", "<con>", "equal"], ["Nulls", "Nulls", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["Json", "Json", "equal"], ["<con>", "<con>", "equal"], ["Adapter", "Adapter", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["delegate", "delegate", "equal"], ["=", "=", "equal"], ["this", "this", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["new", "new", "equal"], ["Json", "Json", "equal"], ["<con>", "<con>", "equal"], ["Adapter", "Adapter", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["@", "@", "equal"], ["Nullable", "Nullable", "equal"], ["T", "T", "equal"], ["from", "from", "equal"], ["<con>", "<con>", "equal"], ["Json", "Json", "equal"], ["(", "(", "equal"], ["Json", "Json", "equal"], ["<con>", "<con>", "equal"], ["Reader", "Reader", "equal"], ["reader", "reader", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["IO", "IO", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["delegate", "delegate", "equal"], [".", ".", "equal"], ["from", "from", "equal"], ["<con>", "<con>", "equal"], ["Json", "Json", "equal"], ["(", "(", "equal"], ["reader", "reader", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["void", "void", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Json", "Json", "equal"], ["(", "(", "equal"], ["Json", "Json", "equal"], ["<con>", "<con>", "equal"], ["Writer", "Writer", "equal"], ["writer", "writer", "equal"], [",", ",", "equal"], ["@", "@", "equal"], ["Nullable", "Nullable", "equal"], ["T", "T", "equal"], ["value", "value", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["IO", "IO", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["boolean", "boolean", "equal"], ["serialize", "serialize", "equal"], ["<con>", "<con>", "equal"], ["Nulls", "Nulls", "equal"], ["=", "=", "equal"], ["writer", "writer", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Serialize", "Serialize", "equal"], ["<con>", "<con>", "equal"], ["Nulls", "Nulls", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["writer", "writer", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Serialize", "Serialize", "equal"], ["<con>", "<con>", "equal"], ["Nulls", "Nulls", "equal"], ["(", "(", "equal"], ["true", "true", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["try", "try", "equal"], ["{", "{", "equal"], ["delegate", "delegate", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Json", "Json", "equal"], ["(", "(", "equal"], ["writer", "writer", "equal"], [",", ",", "equal"], ["value", "value", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["finally", "finally", "equal"], ["{", "{", "equal"], ["writer", "writer", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Serialize", "Serialize", "equal"], ["<con>", "<con>", "equal"], ["Nulls", "Nulls", "equal"], ["(", "(", "equal"], ["serialize", "serialize", "equal"], ["<con>", "<con>", "equal"], ["Nulls", "Nulls", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["String", "String", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["String", "String", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["delegate", "delegate", "equal"], ["+", "+", "equal"], ["\"", "\"", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["serialize", "serialize", "equal"], ["<con>", "<con>", "equal"], ["Nulls", "Nulls", "equal"], ["<con>", "<con>", "equal"], ["(", "(", "equal"], ["<con>", "<con>", "equal"], [")", ")", "equal"], ["\"", "\"", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public void buildIndex(String indexType) { if(this.gridRectangleRDD == null) { throw new IllegalClassException(\"To build index, you must build grid first\"); } JavaPairRDD < Integer, Iterable < Envelope > > gridedRectangleListRDD = this.gridRectangleRDD.groupByKey(); this.indexedRDD = gridedRectangleListRDD.flatMapValues(new Function < Iterable < Envelope > , Iterable < STRtree > > () { @Override public Iterable < STRtree > call(Iterable < Envelope > envelopes)throws Exception { STRtree rt = new STRtree(); GeometryFactory geometryFactory = new GeometryFactory(); for(Envelope e : envelopes)rt.insert(e, geometryFactory.toGeometry(e)); ArrayList < STRtree > result = new ArrayList < STRtree > (); result.add(rt); return result; } }); this.indexedRDD.cache(); } ", "focal_tgt": "public void buildIndex(String indexType) { if(this.gridRectangleRDD == null) { throw new IllegalClassException(\"To build index, you must build grid first\"); } JavaPairRDD < Integer, Iterable < Envelope > > gridedRectangleListRDD = this.gridRectangleRDD.groupByKey(); this.indexedRDD = gridedRectangleListRDD.flatMapValues(new Function < Iterable < Envelope > , Iterable < STRtree > > () { @Override public Iterable < STRtree > call(Iterable < Envelope > envelopes)throws Exception { STRtree rt = new STRtree(); GeometryFactory geometryFactory = new GeometryFactory(); for(Envelope e : envelopes)try { rt.insert(e, geometryFactory.toGeometry(e)); } catch(ClassCastException e1) { } ArrayList < STRtree > result = new ArrayList < STRtree > (); result.add(rt); return result; } }); this.indexedRDD.cache(); } ", "test_src": "@Test public void testBuildIndex()throws Exception { RectangleRDD rectangleRDD = new RectangleRDD(sc, InputLocation, offset, splitter, gridType, numPartitions); rectangleRDD.buildIndex(\"R-Tree\"); List < Polygon > result = rectangleRDD.indexedRDD.take(1).get(0)._2().query(rectangleRDD.boundaryEnvelope); for(Polygon e : result) { System.out.println(e.getEnvelopeInternal()); } } ", "test_tgt": "@Test public void testBuildIndex()throws Exception { RectangleRDD rectangleRDD = new RectangleRDD(sc, InputLocation, offset, splitter, gridType, numPartitions); rectangleRDD.buildIndex(\"R-Tree\"); List < Polygon > result = rectangleRDD.indexedRDD.take(1).get(0)._2().query(rectangleRDD.boundaryEnvelope); try { for(Polygon e : result) { System.out.println(e.getEnvelopeInternal()); } } catch(Exception e) { } } ", "label": 1, "focal_db": [1759608, "DataSystemsLab/GeoSpark", "/data/comment_repos/DataSystemsLab@GeoSpark", "ac21391cc9a3308ca3574c502e43c86f69d8c321", "7c78e5188ad96e326dc852b6f1d7d9a3e79a530d", "src/main/java/org/datasyslab/geospark/spatialRDD/RectangleRDD.java", "1b19530f41edf76b56f8916d002e7b00901e1326", "src/main/java/org/datasyslab/geospark/spatialRDD/RectangleRDD.java", "public void buildIndex(String indexType) {\n\n\t\tif (this.gridRectangleRDD == null) {\n\t\t\tthrow new IllegalClassException(\"To build index, you must build grid first\");\n\t\t}\n\n\t\t//Use GroupByKey, since I have repartition data, it should be much faster.\n\t\t//todo: Need to test performance here...\n\t\tJavaPairRDD<Integer, Iterable<Envelope>> gridedRectangleListRDD = this.gridRectangleRDD.groupByKey();\n\n\t\tthis.indexedRDD = gridedRectangleListRDD.flatMapValues(new Function<Iterable<Envelope>, Iterable<STRtree>>() {\n\t\t\t@Override\n\t\t\tpublic Iterable<STRtree> call(Iterable<Envelope> envelopes) throws Exception {\n\t\t\t\tSTRtree rt = new STRtree();\n\t\t\t\tGeometryFactory geometryFactory = new GeometryFactory();\n\t\t\t\tfor (Envelope e : envelopes)\n\t\t\t\t\trt.insert(e, geometryFactory.toGeometry(e));\n\t\t\t\tArrayList<STRtree> result = new ArrayList<STRtree>();\n\t\t\t\tresult.add(rt);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t});\n\t\tthis.indexedRDD.cache();\n\t}", "/**\n * @author Jinxuan Wu\n *\n * Create an IndexedRDD and cached it. Need to have a grided RDD first.\n */\n", "public void buildIndex(String indexType) {\n\n\t\tif (this.gridRectangleRDD == null) {\n\t\t\tthrow new IllegalClassException(\"To build index, you must build grid first\");\n\t\t}\n\n\t\t//Use GroupByKey, since I have repartition data, it should be much faster.\n\t\t//todo: Need to test performance here...\n\t\tJavaPairRDD<Integer, Iterable<Envelope>> gridedRectangleListRDD = this.gridRectangleRDD.groupByKey();\n\n\t\tthis.indexedRDD = gridedRectangleListRDD.flatMapValues(new Function<Iterable<Envelope>, Iterable<STRtree>>() {\n\t\t\t@Override\n\t\t\tpublic Iterable<STRtree> call(Iterable<Envelope> envelopes) throws Exception {\n\t\t\t\tSTRtree rt = new STRtree();\n\t\t\t\tGeometryFactory geometryFactory = new GeometryFactory();\n\t\t\t\tfor (Envelope e : envelopes)\n\t\t\t\t\ttry {\n\t\t\t\t\t\trt.insert(e, geometryFactory.toGeometry(e));\n\t\t\t\t\t} catch (ClassCastException e1) {\n\t\t\t\t\t}\n\t\t\t\tArrayList<STRtree> result = new ArrayList<STRtree>();\n\t\t\t\tresult.add(rt);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t});\n\t\tthis.indexedRDD.cache();\n\t}", "/**\n * @author Jinxuan Wu\n *\n * Create an IndexedRDD and cached it. Need to have a grided RDD first.\n */\n"], "test_db": [1759609, "DataSystemsLab/GeoSpark", "/data/comment_repos/DataSystemsLab@GeoSpark", "ac21391cc9a3308ca3574c502e43c86f69d8c321", "dcd3b37c9911a6819e6a5932bf83dc655abbdc44", "src/test/java/org/datasyslab/geospark/spatialRDD/RectangleRDDTest.java", "11940419eb3daf014c1ee62e603a4c6f28541ab5", "src/test/java/org/datasyslab/geospark/spatialRDD/RectangleRDDTest.java", "@Test\n    public void testBuildIndex() throws Exception {\n        RectangleRDD rectangleRDD = new RectangleRDD(sc, InputLocation, offset, splitter, gridType, numPartitions);\n        rectangleRDD.buildIndex(\"R-Tree\");\n        List<Polygon> result = rectangleRDD.indexedRDD.take(1).get(0)._2().query(rectangleRDD.boundaryEnvelope);\n        for(Polygon e: result) {\n            System.out.println(e.getEnvelopeInternal());\n        }\n    }", "/*\n        Test build Index.\n     */\n", "@Test\n    public void testBuildIndex() throws Exception {\n        RectangleRDD rectangleRDD = new RectangleRDD(sc, InputLocation, offset, splitter, gridType, numPartitions);\n        rectangleRDD.buildIndex(\"R-Tree\");\n        List<Polygon> result = rectangleRDD.indexedRDD.take(1).get(0)._2().query(rectangleRDD.boundaryEnvelope);\n        //todo, here have their might be a problem where the result is essentially a point(dirty data) and jts will throw exception.\n        try {\n            for(Polygon e: result) {\n                System.out.println(e.getEnvelopeInternal());\n            }\n        } catch (Exception e) {\n\n        }\n    }", "/*\n        Test build Index.\n     */\n"], "edit_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["build", "build", "equal"], ["<con>", "<con>", "equal"], ["Index", "Index", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["index", "index", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["grid", "grid", "equal"], ["<con>", "<con>", "equal"], ["Rectangle", "Rectangle", "equal"], ["<con>", "<con>", "equal"], ["RDD", "RDD", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["To", "To", "equal"], ["build", "build", "equal"], ["index", "index", "equal"], ["<con>", "<con>", "equal"], [",", ",", "equal"], ["you", "you", "equal"], ["must", "must", "equal"], ["build", "build", "equal"], ["grid", "grid", "equal"], ["first", "first", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["Java", "Java", "equal"], ["<con>", "<con>", "equal"], ["Pair", "Pair", "equal"], ["<con>", "<con>", "equal"], ["RDD", "RDD", "equal"], ["<", "<", "equal"], ["Integer", "Integer", "equal"], [",", ",", "equal"], ["Iterable", "Iterable", "equal"], ["<", "<", "equal"], ["Envelope", "Envelope", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["grided", "grided", "equal"], ["<con>", "<con>", "equal"], ["Rectangle", "Rectangle", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<con>", "<con>", "equal"], ["RDD", "RDD", "equal"], ["=", "=", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["grid", "grid", "equal"], ["<con>", "<con>", "equal"], ["Rectangle", "Rectangle", "equal"], ["<con>", "<con>", "equal"], ["RDD", "RDD", "equal"], [".", ".", "equal"], ["group", "group", "equal"], ["<con>", "<con>", "equal"], ["By", "By", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["indexed", "indexed", "equal"], ["<con>", "<con>", "equal"], ["RDD", "RDD", "equal"], ["=", "=", "equal"], ["grided", "grided", "equal"], ["<con>", "<con>", "equal"], ["Rectangle", "Rectangle", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<con>", "<con>", "equal"], ["RDD", "RDD", "equal"], [".", ".", "equal"], ["flat", "flat", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], ["<con>", "<con>", "equal"], ["Values", "Values", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Function", "Function", "equal"], ["<", "<", "equal"], ["Iterable", "Iterable", "equal"], ["<", "<", "equal"], ["Envelope", "Envelope", "equal"], [">", ">", "equal"], [",", ",", "equal"], ["Iterable", "Iterable", "equal"], ["<", "<", "equal"], ["ST", "ST", "equal"], ["<con>", "<con>", "equal"], ["Rtree", "Rtree", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["Iterable", "Iterable", "equal"], ["<", "<", "equal"], ["ST", "ST", "equal"], ["<con>", "<con>", "equal"], ["Rtree", "Rtree", "equal"], [">", ">", "equal"], ["call", "call", "equal"], ["(", "(", "equal"], ["Iterable", "Iterable", "equal"], ["<", "<", "equal"], ["Envelope", "Envelope", "equal"], [">", ">", "equal"], ["envelopes", "envelopes", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["ST", "ST", "equal"], ["<con>", "<con>", "equal"], ["Rtree", "Rtree", "equal"], ["rt", "rt", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["ST", "ST", "equal"], ["<con>", "<con>", "equal"], ["Rtree", "Rtree", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Geometry", "Geometry", "equal"], ["<con>", "<con>", "equal"], ["Factory", "Factory", "equal"], ["geometry", "geometry", "equal"], ["<con>", "<con>", "equal"], ["Factory", "Factory", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Geometry", "Geometry", "equal"], ["<con>", "<con>", "equal"], ["Factory", "Factory", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["Envelope", "Envelope", "equal"], ["e", "e", "equal"], [":", ":", "equal"], ["envelopes", "envelopes", "equal"], [")", ")", "equal"], ["", "try", "insert"], ["", "{", "insert"], ["rt", "rt", "equal"], [".", ".", "equal"], ["insert", "insert", "equal"], ["(", "(", "equal"], ["e", "e", "equal"], [",", ",", "equal"], ["geometry", "geometry", "equal"], ["<con>", "<con>", "equal"], ["Factory", "Factory", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Geometry", "Geometry", "equal"], ["(", "(", "equal"], ["e", "e", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["", "}", "insert"], ["", "catch", "insert"], ["", "(", "insert"], ["", "Class", "insert"], ["", "<con>", "insert"], ["", "Cast", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["", "e1", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "}", "insert"], ["Array", "Array", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["ST", "ST", "equal"], ["<con>", "<con>", "equal"], ["Rtree", "Rtree", "equal"], [">", ">", "equal"], ["result", "result", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Array", "Array", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["ST", "ST", "equal"], ["<con>", "<con>", "equal"], ["Rtree", "Rtree", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["result", "result", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["rt", "rt", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["result", "result", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["indexed", "indexed", "equal"], ["<con>", "<con>", "equal"], ["RDD", "RDD", "equal"], [".", ".", "equal"], ["cache", "cache", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static Collection < MapTile > getTilesCoverage(final BoundingBox pBB, final int pZoomLevel) { final Set < MapTile > result = new HashSet < > (); final int mapTileUpperBound = 1 << pZoomLevel; final Point lowerRight = getMapTileFromCoordinates(pBB.getLatSouth(), pBB.getLonEast(), pZoomLevel); final Point upperLeft = getMapTileFromCoordinates(pBB.getLatNorth(), pBB.getLonWest(), pZoomLevel); int width = lowerRight.x - upperLeft.x + 1; if(width <= 0) { width += mapTileUpperBound; } int height = lowerRight.y - upperLeft.y + 1; if(height <= 0) { height += mapTileUpperBound; } for(int i = 0; i < width; i ++ ) { for(int j = 0; j < height; j ++ ) { final int x = MyMath.mod(upperLeft.x + i, mapTileUpperBound); final int y = MyMath.mod(upperLeft.y + j, mapTileUpperBound); result.add(new MapTile(pZoomLevel, x, y)); } } return result; } ", "focal_tgt": "public static Collection < Long > getTilesCoverage(final BoundingBox pBB, final int pZoomLevel) { final Set < Long > result = new HashSet < > (); final int mapTileUpperBound = 1 << pZoomLevel; final Point lowerRight = getMapTileFromCoordinates(pBB.getLatSouth(), pBB.getLonEast(), pZoomLevel); final Point upperLeft = getMapTileFromCoordinates(pBB.getLatNorth(), pBB.getLonWest(), pZoomLevel); int width = lowerRight.x - upperLeft.x + 1; if(width <= 0) { width += mapTileUpperBound; } int height = lowerRight.y - upperLeft.y + 1; if(height <= 0) { height += mapTileUpperBound; } for(int i = 0; i < width; i ++ ) { for(int j = 0; j < height; j ++ ) { final int x = MyMath.mod(upperLeft.x + i, mapTileUpperBound); final int y = MyMath.mod(upperLeft.y + j, mapTileUpperBound); result.add(MapTileIndex.getTileIndex(pZoomLevel, x, y)); } } return result; } ", "test_src": "private static Collection < Long > getTilesCoverage(final BoundingBox pBB, final int pZoomLevel) { final Set < Long > result = new LinkedHashSet < > (); final int mapTileUpperBound = 1 << pZoomLevel; final Rect rect = CacheManager.getTilesRect(pBB, pZoomLevel); for(int j = rect.top; j <= rect.bottom; j ++ ) { for(int i = rect.left; i <= rect.right; i ++ ) { final int x = MyMath.mod(i, mapTileUpperBound); final int y = MyMath.mod(j, mapTileUpperBound); result.add(MapTileIndex.getTileIndex(pZoomLevel, x, y)); } } return result; } ", "label": 0, "focal_db": [3134691, "osmdroid/osmdroid", "/data/comment_repos/osmdroid@osmdroid", "b54d749f40a52592776bc3f7e33f86849c7fdeaf", "18252c9bfff0b0d87c5e26f7b52a154530dde03c", "osmdroid-android/src/main/java/org/osmdroid/tileprovider/cachemanager/CacheManager.java", "33b474c6b37a6f634bfbc2dfc67d939a76ea9f3c", "osmdroid-android/src/main/java/org/osmdroid/tileprovider/cachemanager/CacheManager.java", "public static Collection<MapTile> getTilesCoverage(final BoundingBox pBB, final int pZoomLevel){\n        final Set<MapTile> result = new HashSet<>();\n        final int mapTileUpperBound = 1 << pZoomLevel;\n        final Point lowerRight = getMapTileFromCoordinates(\n                pBB.getLatSouth(), pBB.getLonEast(), pZoomLevel);\n        final Point upperLeft = getMapTileFromCoordinates(\n                pBB.getLatNorth(), pBB.getLonWest(), pZoomLevel);\n        int width = lowerRight.x - upperLeft.x + 1; // handling the modulo\n        if (width <= 0) {\n            width += mapTileUpperBound;\n        }\n        int height = lowerRight.y - upperLeft.y + 1; // handling the modulo\n        if (height <= 0) {\n            height += mapTileUpperBound;\n        }\n        for (int i = 0 ; i < width ; i ++) {\n            for (int j = 0 ; j < height ; j ++) {\n                final int x = MyMath.mod(upperLeft.x + i, mapTileUpperBound);\n                final int y = MyMath.mod(upperLeft.y + j, mapTileUpperBound);\n                result.add(new MapTile(pZoomLevel, x, y));\n            }\n        }\n        return result;\n    }", "/**\n * Computes the theoretical tiles covered by the bounding box\n * @return list of tiles for that zoom level, without any specific order\n */\n", "public static Collection<Long> getTilesCoverage(final BoundingBox pBB, final int pZoomLevel){\n        final Set<Long> result = new HashSet<>();\n        final int mapTileUpperBound = 1 << pZoomLevel;\n        final Point lowerRight = getMapTileFromCoordinates(\n                pBB.getLatSouth(), pBB.getLonEast(), pZoomLevel);\n        final Point upperLeft = getMapTileFromCoordinates(\n                pBB.getLatNorth(), pBB.getLonWest(), pZoomLevel);\n        int width = lowerRight.x - upperLeft.x + 1; // handling the modulo\n        if (width <= 0) {\n            width += mapTileUpperBound;\n        }\n        int height = lowerRight.y - upperLeft.y + 1; // handling the modulo\n        if (height <= 0) {\n            height += mapTileUpperBound;\n        }\n        for (int i = 0 ; i < width ; i ++) {\n            for (int j = 0 ; j < height ; j ++) {\n                final int x = MyMath.mod(upperLeft.x + i, mapTileUpperBound);\n                final int y = MyMath.mod(upperLeft.y + j, mapTileUpperBound);\n                result.add(MapTileIndex.getTileIndex(pZoomLevel, x, y));\n            }\n        }\n        return result;\n    }", "/**\n * Computes the theoretical tiles covered by the bounding box\n * @return list of tiles for that zoom level, without any specific order\n */\n"], "test_db": ["0990b70fa88b63f8e2140fc91726401673716853", "osmdroid/osmdroid", "/data/comment_repos/osmdroid@osmdroid", "getTilesCoverage", "/data/comment_repos/osmdroid@osmdroid/osmdroid-android/src/test/java/org/osmdroid/tileprovider/cachemanager/CacheManagerTest.java", "getTilesCoverage", "    private static Collection<Long> getTilesCoverage(final BoundingBox pBB, final int pZoomLevel){\n        final Set<Long> result = new LinkedHashSet<>();\n        final int mapTileUpperBound = 1 << pZoomLevel;\n        final Rect rect = CacheManager.getTilesRect(pBB, pZoomLevel);\n        for (int j = rect.top ; j <= rect.bottom ; j ++) {\n            for (int i = rect.left ; i <= rect.right ; i ++) { // x incrementing first for the test\n                final int x = MyMath.mod(i, mapTileUpperBound);\n                final int y = MyMath.mod(j, mapTileUpperBound);\n                result.add(MapTileIndex.getTileIndex(pZoomLevel, x, y));\n            }\n        }\n        return result;\n    }", "public static Collection<MapTile> getTilesCoverage(final ArrayList<GeoPoint> pGeoPoints,\n                                                       final int pZoomLevel) {\n        final Set<MapTile> result = new HashSet<>();\n\n        GeoPoint prevPoint = null;\n        Point tile, prevTile = null;\n\n        final int mapTileUpperBound = 1 << pZoomLevel;\n        for (GeoPoint geoPoint : pGeoPoints) {\n\n            final double d = TileSystem.GroundResolution(geoPoint.getLatitude(), pZoomLevel);\n\n            if (result.size() != 0) {\n\n                if (prevPoint != null) {\n\n                    final double leadCoef = (geoPoint.getLatitude() - prevPoint.getLatitude()) / (geoPoint.getLongitude() - prevPoint.getLongitude());\n                    final double brng;\n                    if (geoPoint.getLongitude() > prevPoint.getLongitude()) {\n                        brng = Math.PI / 2 - Math.atan(leadCoef);\n                    } else {\n                        brng = 3 * Math.PI / 2 - Math.atan(leadCoef);\n                    }\n\n                    final GeoPoint wayPoint = new GeoPoint(prevPoint.getLatitude(), prevPoint.getLongitude());\n\n                    while ((((geoPoint.getLatitude() > prevPoint.getLatitude()) && (wayPoint.getLatitude() < geoPoint.getLatitude())) ||\n                            (geoPoint.getLatitude() < prevPoint.getLatitude()) && (wayPoint.getLatitude() > geoPoint.getLatitude())) &&\n                            (((geoPoint.getLongitude() > prevPoint.getLongitude()) && (wayPoint.getLongitude() < geoPoint.getLongitude())) ||\n                                    ((geoPoint.getLongitude() < prevPoint.getLongitude()) && (wayPoint.getLongitude() > geoPoint.getLongitude())))) {\n\n                        final Point lastPoint = new Point();\n                        TileSystem.LatLongToPixelXY(geoPoint.getLatitude(), geoPoint.getLongitude(), pZoomLevel, lastPoint);\n\n                        final double prevLatRad = wayPoint.getLatitude() * Math.PI / 180.0;\n                        final double prevLonRad = wayPoint.getLongitude() * Math.PI / 180.0;\n\n                        final double latRad = Math.asin(Math.sin(prevLatRad) * Math.cos(d / GeoConstants.RADIUS_EARTH_METERS) + Math.cos(prevLatRad) * Math.sin(d / GeoConstants.RADIUS_EARTH_METERS) * Math.cos(brng));\n                        final double lonRad = prevLonRad + Math.atan2(Math.sin(brng) * Math.sin(d / GeoConstants.RADIUS_EARTH_METERS) * Math.cos(prevLatRad), Math.cos(d / GeoConstants.RADIUS_EARTH_METERS) - Math.sin(prevLatRad) * Math.sin(latRad));\n\n                        wayPoint.setLatitude(((latRad * 180.0 / Math.PI)));\n                        wayPoint.setLongitude(((lonRad * 180.0 / Math.PI)));\n\n                        tile = getMapTileFromCoordinates(wayPoint.getLatitude(), wayPoint.getLongitude(), pZoomLevel);\n\n                        if (!tile.equals(prevTile)) {\n//Log.d(Constants.APP_TAG, \"New Tile lat \" + tile.x + \" lon \" + tile.y);\n                            int ofsx = tile.x >= 0 ? 0 : -tile.x;\n                            int ofsy = tile.y >= 0 ? 0 : -tile.y;\n                            for (int xAround = tile.x + ofsx; xAround <= tile.x + 1 + ofsx; xAround++) {\n                                for (int yAround = tile.y + ofsy; yAround <= tile.y + 1 + ofsy; yAround++) {\n                                    final int tileY = MyMath.mod(yAround, mapTileUpperBound);\n                                    final int tileX = MyMath.mod(xAround, mapTileUpperBound);\n                                    result.add(new MapTile(pZoomLevel, tileX, tileY));\n                                }\n                            }\n\n                            prevTile = tile;\n                        }\n                    }\n                }\n\n            } else {\n                tile = getMapTileFromCoordinates(geoPoint.getLatitude(), geoPoint.getLongitude(), pZoomLevel);\n                prevTile = tile;\n\n                int ofsx = tile.x >= 0 ? 0 : -tile.x;\n                int ofsy = tile.y >= 0 ? 0 : -tile.y;\n                for (int xAround = tile.x + ofsx; xAround <= tile.x + 1 + ofsx; xAround++) {\n                    for (int yAround = tile.y + ofsy; yAround <= tile.y + 1 + ofsy; yAround++) {\n                        final int tileY = MyMath.mod(yAround, mapTileUpperBound);\n                        final int tileX = MyMath.mod(xAround, mapTileUpperBound);\n                        result.add(new MapTile(pZoomLevel, tileX, tileY));\n                    }\n                }\n            }\n\n            prevPoint = geoPoint;\n        }\n        return result;\n    }", "osmdroid-android/src/main/java/org/osmdroid/tileprovider/cachemanager/CacheManager.java", "public static Collection<MapTile> getTilesCoverage(final ArrayList<GeoPoint> pGeoPoints,\n                                                       final int pZoomLevel) {\n        final Set<MapTile> result = new HashSet<>();\n\n        GeoPoint prevPoint = null;\n        Point tile, prevTile = null;\n\n        final int mapTileUpperBound = 1 << pZoomLevel;\n        for (GeoPoint geoPoint : pGeoPoints) {\n\n            final double d = TileSystem.GroundResolution(geoPoint.getLatitude(), pZoomLevel);\n\n            if (result.size() != 0) {\n\n                if (prevPoint != null) {\n\n                    final double leadCoef = (geoPoint.getLatitude() - prevPoint.getLatitude()) / (geoPoint.getLongitude() - prevPoint.getLongitude());\n                    final double brng;\n                    if (geoPoint.getLongitude() > prevPoint.getLongitude()) {\n                        brng = Math.PI / 2 - Math.atan(leadCoef);\n                    } else {\n                        brng = 3 * Math.PI / 2 - Math.atan(leadCoef);\n                    }\n\n                    final GeoPoint wayPoint = new GeoPoint(prevPoint.getLatitude(), prevPoint.getLongitude());\n\n                    while ((((geoPoint.getLatitude() > prevPoint.getLatitude()) && (wayPoint.getLatitude() < geoPoint.getLatitude())) ||\n                            (geoPoint.getLatitude() < prevPoint.getLatitude()) && (wayPoint.getLatitude() > geoPoint.getLatitude())) &&\n                            (((geoPoint.getLongitude() > prevPoint.getLongitude()) && (wayPoint.getLongitude() < geoPoint.getLongitude())) ||\n                                    ((geoPoint.getLongitude() < prevPoint.getLongitude()) && (wayPoint.getLongitude() > geoPoint.getLongitude())))) {\n\n                        final double prevLatRad = wayPoint.getLatitude() * Math.PI / 180.0;\n                        final double prevLonRad = wayPoint.getLongitude() * Math.PI / 180.0;\n\n                        final double latRad = Math.asin(Math.sin(prevLatRad) * Math.cos(d / GeoConstants.RADIUS_EARTH_METERS) + Math.cos(prevLatRad) * Math.sin(d / GeoConstants.RADIUS_EARTH_METERS) * Math.cos(brng));\n                        final double lonRad = prevLonRad + Math.atan2(Math.sin(brng) * Math.sin(d / GeoConstants.RADIUS_EARTH_METERS) * Math.cos(prevLatRad), Math.cos(d / GeoConstants.RADIUS_EARTH_METERS) - Math.sin(prevLatRad) * Math.sin(latRad));\n\n                        wayPoint.setLatitude(((latRad * 180.0 / Math.PI)));\n                        wayPoint.setLongitude(((lonRad * 180.0 / Math.PI)));\n\n                        tile = getMapTileFromCoordinates(wayPoint.getLatitude(), wayPoint.getLongitude(), pZoomLevel);\n\n                        if (!tile.equals(prevTile)) {\n//Log.d(Constants.APP_TAG, \"New Tile lat \" + tile.x + \" lon \" + tile.y);\n                            int ofsx = tile.x >= 0 ? 0 : -tile.x;\n                            int ofsy = tile.y >= 0 ? 0 : -tile.y;\n                            for (int xAround = tile.x + ofsx; xAround <= tile.x + 1 + ofsx; xAround++) {\n                                for (int yAround = tile.y + ofsy; yAround <= tile.y + 1 + ofsy; yAround++) {\n                                    final int tileY = MyMath.mod(yAround, mapTileUpperBound);\n                                    final int tileX = MyMath.mod(xAround, mapTileUpperBound);\n                                    result.add(new MapTile(pZoomLevel, tileX, tileY));\n                                }\n                            }\n\n                            prevTile = tile;\n                        }\n                    }\n                }\n\n            } else {\n                tile = getMapTileFromCoordinates(geoPoint.getLatitude(), geoPoint.getLongitude(), pZoomLevel);\n                prevTile = tile;\n\n                int ofsx = tile.x >= 0 ? 0 : -tile.x;\n                int ofsy = tile.y >= 0 ? 0 : -tile.y;\n                for (int xAround = tile.x + ofsx; xAround <= tile.x + 1 + ofsx; xAround++) {\n                    for (int yAround = tile.y + ofsy; yAround <= tile.y + 1 + ofsy; yAround++) {\n                        final int tileY = MyMath.mod(yAround, mapTileUpperBound);\n                        final int tileX = MyMath.mod(xAround, mapTileUpperBound);\n                        result.add(new MapTile(pZoomLevel, tileX, tileY));\n                    }\n                }\n            }\n\n            prevPoint = geoPoint;\n        }\n        return result;\n    }", "osmdroid-android/src/main/java/org/osmdroid/tileprovider/cachemanager/CacheManager.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["Collection", "Collection", "equal"], ["<", "<", "equal"], ["Map", "Long", "replace"], ["<con>", "", "delete"], ["Tile", "", "delete"], [">", ">", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Tiles", "Tiles", "equal"], ["<con>", "<con>", "equal"], ["Coverage", "Coverage", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["Bounding", "Bounding", "equal"], ["<con>", "<con>", "equal"], ["Box", "Box", "equal"], ["p", "p", "equal"], ["<con>", "<con>", "equal"], ["BB", "BB", "equal"], [",", ",", "equal"], ["final", "final", "equal"], ["int", "int", "equal"], ["p", "p", "equal"], ["<con>", "<con>", "equal"], ["Zoom", "Zoom", "equal"], ["<con>", "<con>", "equal"], ["Level", "Level", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Map", "Long", "replace"], ["<con>", "", "delete"], ["Tile", "", "delete"], [">", ">", "equal"], ["result", "result", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["int", "int", "equal"], ["map", "map", "equal"], ["<con>", "<con>", "equal"], ["Tile", "Tile", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["<con>", "<con>", "equal"], ["Bound", "Bound", "equal"], ["=", "=", "equal"], ["1", "1", "equal"], ["<", "<", "equal"], ["<", "<", "equal"], ["p", "p", "equal"], ["<con>", "<con>", "equal"], ["Zoom", "Zoom", "equal"], ["<con>", "<con>", "equal"], ["Level", "Level", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Point", "Point", "equal"], ["lower", "lower", "equal"], ["<con>", "<con>", "equal"], ["Right", "Right", "equal"], ["=", "=", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], ["<con>", "<con>", "equal"], ["Tile", "Tile", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Coordinates", "Coordinates", "equal"], ["(", "(", "equal"], ["p", "p", "equal"], ["<con>", "<con>", "equal"], ["BB", "BB", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Lat", "Lat", "equal"], ["<con>", "<con>", "equal"], ["South", "South", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["p", "p", "equal"], ["<con>", "<con>", "equal"], ["BB", "BB", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Lon", "Lon", "equal"], ["<con>", "<con>", "equal"], ["East", "East", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["p", "p", "equal"], ["<con>", "<con>", "equal"], ["Zoom", "Zoom", "equal"], ["<con>", "<con>", "equal"], ["Level", "Level", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Point", "Point", "equal"], ["upper", "upper", "equal"], ["<con>", "<con>", "equal"], ["Left", "Left", "equal"], ["=", "=", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], ["<con>", "<con>", "equal"], ["Tile", "Tile", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Coordinates", "Coordinates", "equal"], ["(", "(", "equal"], ["p", "p", "equal"], ["<con>", "<con>", "equal"], ["BB", "BB", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Lat", "Lat", "equal"], ["<con>", "<con>", "equal"], ["North", "North", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["p", "p", "equal"], ["<con>", "<con>", "equal"], ["BB", "BB", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Lon", "Lon", "equal"], ["<con>", "<con>", "equal"], ["West", "West", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["p", "p", "equal"], ["<con>", "<con>", "equal"], ["Zoom", "Zoom", "equal"], ["<con>", "<con>", "equal"], ["Level", "Level", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["int", "int", "equal"], ["width", "width", "equal"], ["=", "=", "equal"], ["lower", "lower", "equal"], ["<con>", "<con>", "equal"], ["Right", "Right", "equal"], [".", ".", "equal"], ["x", "x", "equal"], ["-", "-", "equal"], ["upper", "upper", "equal"], ["<con>", "<con>", "equal"], ["Left", "Left", "equal"], [".", ".", "equal"], ["x", "x", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["width", "width", "equal"], ["<=", "<=", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["width", "width", "equal"], ["+=", "+=", "equal"], ["map", "map", "equal"], ["<con>", "<con>", "equal"], ["Tile", "Tile", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["<con>", "<con>", "equal"], ["Bound", "Bound", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["int", "int", "equal"], ["height", "height", "equal"], ["=", "=", "equal"], ["lower", "lower", "equal"], ["<con>", "<con>", "equal"], ["Right", "Right", "equal"], [".", ".", "equal"], ["y", "y", "equal"], ["-", "-", "equal"], ["upper", "upper", "equal"], ["<con>", "<con>", "equal"], ["Left", "Left", "equal"], [".", ".", "equal"], ["y", "y", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["height", "height", "equal"], ["<=", "<=", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["height", "height", "equal"], ["+=", "+=", "equal"], ["map", "map", "equal"], ["<con>", "<con>", "equal"], ["Tile", "Tile", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["<con>", "<con>", "equal"], ["Bound", "Bound", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], ["i", "i", "equal"], ["=", "=", "equal"], ["0", "0", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["<", "<", "equal"], ["width", "width", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], ["j", "j", "equal"], ["=", "=", "equal"], ["0", "0", "equal"], [";", ";", "equal"], ["j", "j", "equal"], ["<", "<", "equal"], ["height", "height", "equal"], [";", ";", "equal"], ["j", "j", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["int", "int", "equal"], ["x", "x", "equal"], ["=", "=", "equal"], ["My", "My", "equal"], ["<con>", "<con>", "equal"], ["Math", "Math", "equal"], [".", ".", "equal"], ["mod", "mod", "equal"], ["(", "(", "equal"], ["upper", "upper", "equal"], ["<con>", "<con>", "equal"], ["Left", "Left", "equal"], [".", ".", "equal"], ["x", "x", "equal"], ["+", "+", "equal"], ["i", "i", "equal"], [",", ",", "equal"], ["map", "map", "equal"], ["<con>", "<con>", "equal"], ["Tile", "Tile", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["<con>", "<con>", "equal"], ["Bound", "Bound", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["int", "int", "equal"], ["y", "y", "equal"], ["=", "=", "equal"], ["My", "My", "equal"], ["<con>", "<con>", "equal"], ["Math", "Math", "equal"], [".", ".", "equal"], ["mod", "mod", "equal"], ["(", "(", "equal"], ["upper", "upper", "equal"], ["<con>", "<con>", "equal"], ["Left", "Left", "equal"], [".", ".", "equal"], ["y", "y", "equal"], ["+", "+", "equal"], ["j", "j", "equal"], [",", ",", "equal"], ["map", "map", "equal"], ["<con>", "<con>", "equal"], ["Tile", "Tile", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["<con>", "<con>", "equal"], ["Bound", "Bound", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["result", "result", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["", "Map", "insert"], ["", "<con>", "insert"], ["", "Tile", "insert"], ["", "<con>", "insert"], ["", "Index", "insert"], ["new", ".", "replace"], ["Map", "get", "replace"], ["<con>", "<con>", "equal"], ["Tile", "Tile", "equal"], ["", "<con>", "insert"], ["", "Index", "insert"], ["(", "(", "equal"], ["p", "p", "equal"], ["<con>", "<con>", "equal"], ["Zoom", "Zoom", "equal"], ["<con>", "<con>", "equal"], ["Level", "Level", "equal"], [",", ",", "equal"], ["x", "x", "equal"], [",", ",", "equal"], ["y", "y", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["result", "result", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static WildcardType subtypeOf(Type bound) { return new WildcardTypeImpl(new Type[] { bound }, EMPTY_TYPE_ARRAY); } ", "focal_tgt": "public static WildcardType subtypeOf(Type bound) { Type[]upperBounds; if(bound instanceof WildcardType) { upperBounds = ((WildcardType)bound).getUpperBounds(); } else { upperBounds = new Type[] { bound }; } return new WildcardTypeImpl(upperBounds, EMPTY_TYPE_ARRAY); } ", "test_src": "@Test public void subtypeOf()throws Exception { Type listOfWildcardType = TypesTest.class.getDeclaredField(\"listSubtype\").getGenericType(); Type expected = Types.collectionElementType(listOfWildcardType, List.class); assertThat(Types.subtypeOf(CharSequence.class)).isEqualTo(expected); } ", "label": 0, "focal_db": [3565693, "square/moshi", "/data/comment_repos/square@moshi", "ae8b62b3ee7bb8609a24f384f02163606043e022", "a9bca93aa212dfc5978c474e5cda986818111cb6", "moshi/src/main/java/com/squareup/moshi/Types.java", "40829e37a0e4f75382ea78a48276ef1667ff7df4", "moshi/src/main/java/com/squareup/moshi/Types.java", "public static WildcardType subtypeOf(Type bound) {\n    return new WildcardTypeImpl(new Type[] { bound }, EMPTY_TYPE_ARRAY);\n  }", "/**\n * Returns a type that represents an unknown type that extends {@code bound}. For example, if\n * {@code bound} is {@code CharSequence.class}, this returns {@code ? extends CharSequence}. If\n * {@code bound} is {@code Object.class}, this returns {@code ?}, which is shorthand for {@code\n * ? extends Object}.\n */\n", "public static WildcardType subtypeOf(Type bound) {\n    Type[] upperBounds;\n    if (bound instanceof WildcardType) {\n      upperBounds = ((WildcardType) bound).getUpperBounds();\n    } else {\n      upperBounds = new Type[] { bound };\n    }\n    return new WildcardTypeImpl(upperBounds, EMPTY_TYPE_ARRAY);\n  }", "/**\n * Returns a type that represents an unknown type that extends {@code bound}. For example, if\n * {@code bound} is {@code CharSequence.class}, this returns {@code ? extends CharSequence}. If\n * {@code bound} is {@code Object.class}, this returns {@code ?}, which is shorthand for {@code\n * ? extends Object}.\n */\n"], "test_db": ["e643a04ee5334a29c275bcbdd91689908700c8e7", "square/moshi", "/data/comment_repos/square@moshi", "subtypeOf", "/data/comment_repos/square@moshi/moshi/src/test/java/com/squareup/moshi/TypesTest.java", "subtypeOf", "  @Test public void subtypeOf() throws Exception {\n    Type listOfWildcardType = TypesTest.class.getDeclaredField(\"listSubtype\").getGenericType();\n    Type expected = Types.collectionElementType(listOfWildcardType, List.class);\n    assertThat(Types.subtypeOf(CharSequence.class)).isEqualTo(expected);\n  }", "public static WildcardType subtypeOf(Type bound) {\n    return new WildcardTypeImpl(new Type[] { bound }, EMPTY_TYPE_ARRAY);\n  }", "moshi/src/main/java/com/squareup/moshi/Types.java", "@CheckReturnValue public static WildcardType subtypeOf(Type bound) {\n    return new WildcardTypeImpl(new Type[] { bound }, EMPTY_TYPE_ARRAY);\n  }", "moshi/src/main/java/com/squareup/moshi/Types.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["Wildcard", "Wildcard", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], ["subtype", "subtype", "equal"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["(", "(", "equal"], ["Type", "Type", "equal"], ["bound", "bound", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "Type", "replace"], ["new", "[", "replace"], ["Wildcard", "]", "replace"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Impl", "", "delete"], ["", "upper", "insert"], ["", "<con>", "insert"], ["", "Bounds", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["(", "(", "equal"], ["", "bound", "insert"], ["", "instanceof", "insert"], ["", "Wildcard", "insert"], ["", "<con>", "insert"], ["", "Type", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "upper", "insert"], ["", "<con>", "insert"], ["", "Bounds", "insert"], ["", "=", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "Wildcard", "insert"], ["", "<con>", "insert"], ["", "Type", "insert"], ["", ")", "insert"], ["", "bound", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Upper", "insert"], ["", "<con>", "insert"], ["", "Bounds", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "else", "insert"], ["", "{", "insert"], ["", "upper", "insert"], ["", "<con>", "insert"], ["", "Bounds", "insert"], ["", "=", "insert"], ["new", "new", "equal"], ["Type", "Type", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["{", "{", "equal"], ["bound", "bound", "equal"], ["}", "}", "equal"], ["", ";", "insert"], ["", "}", "insert"], ["", "return", "insert"], ["", "new", "insert"], ["", "Wildcard", "insert"], ["", "<con>", "insert"], ["", "Type", "insert"], ["", "<con>", "insert"], ["", "Impl", "insert"], ["", "(", "insert"], ["", "upper", "insert"], ["", "<con>", "insert"], ["", "Bounds", "insert"], [",", ",", "equal"], ["EMPTY", "EMPTY", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["TYPE", "TYPE", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["ARRAY", "ARRAY", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public Object toObject(Type genericType, Reader json); ", "focal_tgt": "public Object toObject(Type genericType, Reader json)throws IOException; ", "test_src": "@Test public void test_toObject() { JsonContext json = DB.getDefault().json(); Customer customer = new Customer(); customer.setId(1); customer.setName(\"Jim\"); String asJson = json.toJson(customer); Object bean = json.toObject(Customer.class, asJson); assertTrue(bean instanceof Customer); assertEquals(Integer.valueOf(1), ((Customer)bean).getId()); assertEquals(\"Jim\", ((Customer)bean).getName()); StringReader reader = new StringReader(asJson); bean = json.toObject(Customer.class, reader); assertTrue(bean instanceof Customer); assertEquals(Integer.valueOf(1), ((Customer)bean).getId()); assertEquals(\"Jim\", ((Customer)bean).getName()); } ", "label": 0, "focal_db": [1834588, "ebean-orm/ebean", "/data/comment_repos/ebean-orm@ebean", "16779174650106f119842f1dd026eb36776c3619", "a453c9231ae0b334017f480f0a3f2b06ebbc0194", "src/main/java/com/avaje/ebean/text/json/JsonContext.java", "ab5b182f0f8abfe3dd9825ead04959106dad2283", "src/main/java/com/avaje/ebean/text/json/JsonContext.java", "public Object toObject(Type genericType, Reader json);", "/**\n * Use the genericType to determine if this should be converted into a List or\n * bean.\n */\n", "public Object toObject(Type genericType, Reader json) throws IOException;", "/**\n * Use the genericType to determine if this should be converted into a List or\n * bean.\n */\n"], "test_db": ["58755a51a9da08d387f72af56228dce59f971a4a", "ebean-orm/ebean", "/data/comment_repos/ebean-orm@ebean", "toObject", "/data/comment_repos/ebean-orm@ebean/src/test/java/io/ebean/text/json/JsonContextTest.java", "test_toObject", "  @Test\n  public void test_toObject() {\n\n    JsonContext json = DB.getDefault().json();\n\n    Customer customer = new Customer();\n    customer.setId(1);\n    customer.setName(\"Jim\");\n\n    String asJson = json.toJson(customer);\n\n    Object bean = json.toObject(Customer.class, asJson);\n\n    assertTrue(bean instanceof Customer);\n    assertEquals(Integer.valueOf(1), ((Customer) bean).getId());\n    assertEquals(\"Jim\", ((Customer) bean).getName());\n\n    StringReader reader = new StringReader(asJson);\n    bean = json.toObject(Customer.class, reader);\n    assertTrue(bean instanceof Customer);\n    assertEquals(Integer.valueOf(1), ((Customer) bean).getId());\n    assertEquals(\"Jim\", ((Customer) bean).getName());\n  }", "public Object toObject(Type genericType, String json, JsonReadOptions options);", "src/main/java/com/avaje/ebean/text/json/JsonContext.java", "public Object toObject(Type genericType, String json);", "src/main/java/com/avaje/ebean/text/json/JsonContext.java"], "edit_seq": [["public", "public", "equal"], ["Object", "Object", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Object", "Object", "equal"], ["(", "(", "equal"], ["Type", "Type", "equal"], ["generic", "generic", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], [",", ",", "equal"], ["Reader", "Reader", "equal"], ["json", "json", "equal"], [")", ")", "equal"], ["", "throws", "insert"], ["", "IO", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], [";", ";", "equal"]]}, {"focal_src": "private static InternetAddress[]parse(String s, boolean strict, boolean parseHdr)throws AddressException { int start, end, index, nesting; int start_personal = - 1, end_personal = - 1; int length = s.length(); boolean ignoreErrors = parseHdr && ! strict; boolean in_group = false; boolean route_addr = false; boolean rfc822 = false; char c; List v = new ArrayList(); InternetAddress ma; for(start = end = - 1, index = 0; index < length; index ++ ) { c = s.charAt(index); switch(c) { case '(' : rfc822 = true; if(start >= 0 && end == - 1)end = index; int pindex = index; for(index ++ , nesting = 1; index < length && nesting > 0; index ++ ) { c = s.charAt(index); switch(c) { case '\\\\' : index ++ ; break; case '(' : nesting ++ ; break; case ')' : nesting -- ; break; default : break; } } if(nesting > 0) { if( ! ignoreErrors)throw new AddressException(\"Missing ')'\", s, index); index = pindex + 1; break; } index -- ; if(start_personal == - 1)start_personal = pindex + 1; if(end_personal == - 1)end_personal = index; break; case ')' : if( ! ignoreErrors)throw new AddressException(\"Missing '('\", s, index); if(start == - 1)start = index; break; case '<' : rfc822 = true; if(route_addr) { if( ! ignoreErrors)throw new AddressException(\"Extra route-addr\", s, index); if(start == - 1) { route_addr = false; rfc822 = false; start = end = - 1; break; } if( ! in_group) { if(end == - 1)end = index; String addr = s.substring(start, end).trim(); ma = new InternetAddress(); ma.setAddress(addr); if(start_personal >= 0) { ma.encodedPersonal = unquote(s.substring(start_personal, end_personal).trim()); } v.add(ma); route_addr = false; rfc822 = false; start = end = - 1; start_personal = end_personal = - 1; } } int rindex = index; boolean inquote = false; outf : for(index ++ ; index < length; index ++ ) { c = s.charAt(index); switch(c) { case '\\\\' : index ++ ; break; case '\"' : inquote = ! inquote; break; case '>' : if(inquote)continue; break outf; default : break; } } if(inquote) { if( ! ignoreErrors)throw new AddressException(\"Missing '\\\"'\", s, index); outq : for(index = rindex + 1; index < length; index ++ ) { c = s.charAt(index); if(c == '\\\\')index ++ ; else if(c == '>')break; } } if(index >= length) { if( ! ignoreErrors)throw new AddressException(\"Missing '>'\", s, index); index = rindex + 1; if(start == - 1)start = rindex; break; } if( ! in_group) { if(start >= 0) { start_personal = start; end_personal = rindex; } start = rindex + 1; } route_addr = true; end = index; break; case '>' : if( ! ignoreErrors)throw new AddressException(\"Missing '<'\", s, index); if(start == - 1)start = index; break; case '\"' : int qindex = index; rfc822 = true; if(start == - 1)start = index; outq : for(index ++ ; index < length; index ++ ) { c = s.charAt(index); switch(c) { case '\\\\' : index ++ ; break; case '\"' : break outq; default : break; } } if(index >= length) { if( ! ignoreErrors)throw new AddressException(\"Missing '\\\"'\", s, index); index = qindex + 1; } break; case '[' : rfc822 = true; int lindex = index; outb : for(index ++ ; index < length; index ++ ) { c = s.charAt(index); switch(c) { case '\\\\' : index ++ ; break; case ']' : break outb; default : break; } } if(index >= length) { if( ! ignoreErrors)throw new AddressException(\"Missing ']'\", s, index); index = lindex + 1; } break; case ';' : if(start == - 1) { route_addr = false; rfc822 = false; start = end = - 1; break; } if(in_group) { in_group = false; if(parseHdr && ! strict && index + 1 < length && s.charAt(index + 1) == '@')break; ma = new InternetAddress(); end = index + 1; ma.setAddress(s.substring(start, end).trim()); v.add(ma); route_addr = false; rfc822 = false; start = end = - 1; start_personal = end_personal = - 1; break; } if( ! ignoreErrors)throw new AddressException(\"Illegal semicolon, not in group\", s, index); case ',' : if(start == - 1) { route_addr = false; rfc822 = false; start = end = - 1; break; } if(in_group) { route_addr = false; break; } if(end == - 1)end = index; String addr = s.substring(start, end).trim(); String pers = null; if(rfc822 && start_personal >= 0) { pers = unquote(s.substring(start_personal, end_personal).trim()); if(pers.trim().length() == 0)pers = null; } if(parseHdr && ! strict && pers != null && pers.indexOf('@') >= 0 && addr.indexOf('@') < 0 && addr.indexOf('!') < 0) { String tmp = addr; addr = pers; pers = tmp; } if(rfc822 || strict || parseHdr) { if( ! ignoreErrors)checkAddress(addr, route_addr, false); ma = new InternetAddress(); ma.setAddress(addr); if(pers != null)ma.encodedPersonal = pers; v.add(ma); } else { StringTokenizer st = new StringTokenizer(addr); while(st.hasMoreTokens()) { String a = st.nextToken(); checkAddress(a, false, false); ma = new InternetAddress(); ma.setAddress(a); v.add(ma); } } route_addr = false; rfc822 = false; start = end = - 1; start_personal = end_personal = - 1; break; case ':' : rfc822 = true; if(in_group)if( ! ignoreErrors)throw new AddressException(\"Nested group\", s, index); if(start == - 1)start = index; if(parseHdr && ! strict) { if(index + 1 < length) { String addressSpecials = \")>[]:@\\\\,.\"; char nc = s.charAt(index + 1); if(addressSpecials.indexOf(nc) >= 0) { if(nc != '@')break; for(int i = index + 2; i < length; i ++ ) { nc = s.charAt(i); if(nc == ';')break; if(addressSpecials.indexOf(nc) >= 0)break; } if(nc == ';')break; } } String gname = s.substring(start, index); if(ignoreBogusGroupName && (gname.equalsIgnoreCase(\"mailto\") || gname.equalsIgnoreCase(\"From\") || gname.equalsIgnoreCase(\"To\") || gname.equalsIgnoreCase(\"Cc\") || gname.equalsIgnoreCase(\"Subject\") || gname.equalsIgnoreCase(\"Re\")))start = - 1; else in_group = true; } else in_group = true; break; case ' ' : case '\\t' : case '\\r' : case '\\n' : break; default : if(start == - 1)start = index; break; } } if(start >= 0) { if(end == - 1)end = length; String addr = s.substring(start, end).trim(); String pers = null; if(rfc822 && start_personal >= 0) { pers = unquote(s.substring(start_personal, end_personal).trim()); if(pers.trim().length() == 0)pers = null; } if(parseHdr && ! strict && pers != null && pers.indexOf('@') >= 0 && addr.indexOf('@') < 0 && addr.indexOf('!') < 0) { String tmp = addr; addr = pers; pers = tmp; } if(rfc822 || strict || parseHdr) { if( ! ignoreErrors)checkAddress(addr, route_addr, false); ma = new InternetAddress(); ma.setAddress(addr); if(pers != null)ma.encodedPersonal = pers; v.add(ma); } else { StringTokenizer st = new StringTokenizer(addr); while(st.hasMoreTokens()) { String a = st.nextToken(); checkAddress(a, false, false); ma = new InternetAddress(); ma.setAddress(a); v.add(ma); } } } InternetAddress[]a = new InternetAddress[v.size()]; v.toArray(a); return a; } ", "focal_tgt": "@SuppressWarnings(\"fallthrough\")private static InternetAddress[]parse(String s, boolean strict, boolean parseHdr)throws AddressException { int start, end, index, nesting; int start_personal = - 1, end_personal = - 1; int length = s.length(); boolean ignoreErrors = parseHdr && ! strict; boolean in_group = false; boolean route_addr = false; boolean rfc822 = false; char c; List v = new ArrayList(); InternetAddress ma; for(start = end = - 1, index = 0; index < length; index ++ ) { c = s.charAt(index); switch(c) { case '(' : rfc822 = true; if(start >= 0 && end == - 1)end = index; int pindex = index; for(index ++ , nesting = 1; index < length && nesting > 0; index ++ ) { c = s.charAt(index); switch(c) { case '\\\\' : index ++ ; break; case '(' : nesting ++ ; break; case ')' : nesting -- ; break; default : break; } } if(nesting > 0) { if( ! ignoreErrors)throw new AddressException(\"Missing ')'\", s, index); index = pindex + 1; break; } index -- ; if(start_personal == - 1)start_personal = pindex + 1; if(end_personal == - 1)end_personal = index; break; case ')' : if( ! ignoreErrors)throw new AddressException(\"Missing '('\", s, index); if(start == - 1)start = index; break; case '<' : rfc822 = true; if(route_addr) { if( ! ignoreErrors)throw new AddressException(\"Extra route-addr\", s, index); if(start == - 1) { route_addr = false; rfc822 = false; start = end = - 1; break; } if( ! in_group) { if(end == - 1)end = index; String addr = s.substring(start, end).trim(); ma = new InternetAddress(); ma.setAddress(addr); if(start_personal >= 0) { ma.encodedPersonal = unquote(s.substring(start_personal, end_personal).trim()); } v.add(ma); route_addr = false; rfc822 = false; start = end = - 1; start_personal = end_personal = - 1; } } int rindex = index; boolean inquote = false; outf : for(index ++ ; index < length; index ++ ) { c = s.charAt(index); switch(c) { case '\\\\' : index ++ ; break; case '\"' : inquote = ! inquote; break; case '>' : if(inquote)continue; break outf; default : break; } } if(inquote) { if( ! ignoreErrors)throw new AddressException(\"Missing '\\\"'\", s, index); outq : for(index = rindex + 1; index < length; index ++ ) { c = s.charAt(index); if(c == '\\\\')index ++ ; else if(c == '>')break; } } if(index >= length) { if( ! ignoreErrors)throw new AddressException(\"Missing '>'\", s, index); index = rindex + 1; if(start == - 1)start = rindex; break; } if( ! in_group) { if(start >= 0) { start_personal = start; end_personal = rindex; } start = rindex + 1; } route_addr = true; end = index; break; case '>' : if( ! ignoreErrors)throw new AddressException(\"Missing '<'\", s, index); if(start == - 1)start = index; break; case '\"' : int qindex = index; rfc822 = true; if(start == - 1)start = index; outq : for(index ++ ; index < length; index ++ ) { c = s.charAt(index); switch(c) { case '\\\\' : index ++ ; break; case '\"' : break outq; default : break; } } if(index >= length) { if( ! ignoreErrors)throw new AddressException(\"Missing '\\\"'\", s, index); index = qindex + 1; } break; case '[' : rfc822 = true; int lindex = index; outb : for(index ++ ; index < length; index ++ ) { c = s.charAt(index); switch(c) { case '\\\\' : index ++ ; break; case ']' : break outb; default : break; } } if(index >= length) { if( ! ignoreErrors)throw new AddressException(\"Missing ']'\", s, index); index = lindex + 1; } break; case ';' : if(start == - 1) { route_addr = false; rfc822 = false; start = end = - 1; break; } if(in_group) { in_group = false; if(parseHdr && ! strict && index + 1 < length && s.charAt(index + 1) == '@')break; ma = new InternetAddress(); end = index + 1; ma.setAddress(s.substring(start, end).trim()); v.add(ma); route_addr = false; rfc822 = false; start = end = - 1; start_personal = end_personal = - 1; break; } if( ! ignoreErrors)throw new AddressException(\"Illegal semicolon, not in group\", s, index); case ',' : if(start == - 1) { route_addr = false; rfc822 = false; start = end = - 1; break; } if(in_group) { route_addr = false; break; } if(end == - 1)end = index; String addr = s.substring(start, end).trim(); String pers = null; if(rfc822 && start_personal >= 0) { pers = unquote(s.substring(start_personal, end_personal).trim()); if(pers.trim().length() == 0)pers = null; } if(parseHdr && ! strict && pers != null && pers.indexOf('@') >= 0 && addr.indexOf('@') < 0 && addr.indexOf('!') < 0) { String tmp = addr; addr = pers; pers = tmp; } if(rfc822 || strict || parseHdr) { if( ! ignoreErrors)checkAddress(addr, route_addr, false); ma = new InternetAddress(); ma.setAddress(addr); if(pers != null)ma.encodedPersonal = pers; v.add(ma); } else { StringTokenizer st = new StringTokenizer(addr); while(st.hasMoreTokens()) { String a = st.nextToken(); checkAddress(a, false, false); ma = new InternetAddress(); ma.setAddress(a); v.add(ma); } } route_addr = false; rfc822 = false; start = end = - 1; start_personal = end_personal = - 1; break; case ':' : rfc822 = true; if(in_group)if( ! ignoreErrors)throw new AddressException(\"Nested group\", s, index); if(start == - 1)start = index; if(parseHdr && ! strict) { if(index + 1 < length) { String addressSpecials = \")>[]:@\\\\,.\"; char nc = s.charAt(index + 1); if(addressSpecials.indexOf(nc) >= 0) { if(nc != '@')break; for(int i = index + 2; i < length; i ++ ) { nc = s.charAt(i); if(nc == ';')break; if(addressSpecials.indexOf(nc) >= 0)break; } if(nc == ';')break; } } String gname = s.substring(start, index); if(ignoreBogusGroupName && (gname.equalsIgnoreCase(\"mailto\") || gname.equalsIgnoreCase(\"From\") || gname.equalsIgnoreCase(\"To\") || gname.equalsIgnoreCase(\"Cc\") || gname.equalsIgnoreCase(\"Subject\") || gname.equalsIgnoreCase(\"Re\")))start = - 1; else in_group = true; } else in_group = true; break; case ' ' : case '\\t' : case '\\r' : case '\\n' : break; default : if(start == - 1)start = index; break; } } if(start >= 0) { if(end == - 1)end = length; String addr = s.substring(start, end).trim(); String pers = null; if(rfc822 && start_personal >= 0) { pers = unquote(s.substring(start_personal, end_personal).trim()); if(pers.trim().length() == 0)pers = null; } if(parseHdr && ! strict && pers != null && pers.indexOf('@') >= 0 && addr.indexOf('@') < 0 && addr.indexOf('!') < 0) { String tmp = addr; addr = pers; pers = tmp; } if(rfc822 || strict || parseHdr) { if( ! ignoreErrors)checkAddress(addr, route_addr, false); ma = new InternetAddress(); ma.setAddress(addr); if(pers != null)ma.encodedPersonal = pers; v.add(ma); } else { StringTokenizer st = new StringTokenizer(addr); while(st.hasMoreTokens()) { String a = st.nextToken(); checkAddress(a, false, false); ma = new InternetAddress(); ma.setAddress(a); v.add(ma); } } } InternetAddress[]a = new InternetAddress[v.size()]; v.toArray(a); return a; } ", "test_src": "public static void parse(BufferedReader in)throws IOException { String header = \"\"; boolean doStrict = strict; boolean doParseHeader = parse_header; for(; ; ) { String s = in.readLine(); if(s != null && s.length() > 0) { char c = s.charAt(0); if(c == ' ' || c == '\\t') { header += '\\n' + s; continue; } } if(header.startsWith(\"Strict: \")) { doStrict = Boolean.parseBoolean(value(header)); } else if(header.startsWith(\"Header: \")) { doParseHeader = Boolean.parseBoolean(value(header)); } else if(header.startsWith(\"From: \") || header.startsWith(\"To: \") || header.startsWith(\"Cc: \")) { int i; String[]expect = null; if(s != null && s.startsWith(\"Expect: \")) { try { int nexpect = Integer.parseInt(s.substring(8)); expect = new String[nexpect]; for(i = 0; i < nexpect; i ++ )expect[i] = readLine(in).trim(); } catch(NumberFormatException e) { try { if(s.substring(8, 17).equals(\"Exception\")) { expect = new String[1]; expect[0] = \"Exception\"; } } catch(StringIndexOutOfBoundsException se) { } } } i = header.indexOf(':'); try { if(junit)testData.add(new Object[] { header.substring(0, i), header.substring(i + 2), expect, doStrict, doParseHeader }); else test(header.substring(0, i), header.substring(i + 2), expect, doStrict, doParseHeader); } catch(StringIndexOutOfBoundsException e) { e.printStackTrace(System.out); } } if(s == null)return; if(s.length() == 0) { while((s = in.readLine()) != null) { if(s.startsWith(\"From \"))break; } if(s == null)return; } header = s; } } ", "label": 0, "focal_db": [2386201, "javaee/javamail", "/data/comment_repos/javaee@javamail", "5d4d66b9fcf386ff9f03b3dfe248a097d2a4c760", "3926f77e48cec38c322a019abe3d77a15490233a", "mail/src/main/java/javax/mail/internet/InternetAddress.java", "2d2833074f6daf166ec72cc87effd82d73c80d8a", "mail/src/main/java/javax/mail/internet/InternetAddress.java", "private static InternetAddress[] parse(String s, boolean strict,\n\t\t\t\t    boolean parseHdr) throws AddressException {\n\tint start, end, index, nesting;\n\tint start_personal = -1, end_personal = -1;\n\tint length = s.length();\n\tboolean ignoreErrors = parseHdr && !strict;\n\tboolean in_group = false;\t// we're processing a group term\n\tboolean route_addr = false;\t// address came from route-addr term\n\tboolean rfc822 = false;\t\t// looks like an RFC822 address\n\tchar c;\n\tList v = new ArrayList();\n\tInternetAddress ma;\n\n\tfor (start = end = -1, index = 0; index < length; index++) {\n    \t    c = s.charAt(index);\n\n\t    switch (c) {\n\t    case '(': // We are parsing a Comment. Ignore everything inside.\n\t\t// XXX - comment fields should be parsed as whitespace,\n\t\t//\t more than one allowed per address\n\t\trfc822 = true;\n\t\tif (start >= 0 && end == -1)\n\t\t    end = index;\n\t\tint pindex = index;\n\t\tfor (index++, nesting = 1; index < length && nesting > 0;\n\t\t  index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '(':\n\t\t\tnesting++;\n\t\t\tbreak;\n\t\t    case ')':\n\t\t\tnesting--;\n\t\t\tbreak;\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (nesting > 0) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing ')'\", s, index);\n\t\t    // pretend the first paren was a regular character and\n\t\t    // continue parsing after it\n\t\t    index = pindex + 1;\n\t\t    break;\n\t\t}\n\t\tindex--;\t// point to closing paren\n\t\tif (start_personal == -1)\n\t\t    start_personal = pindex + 1;\n\t\tif (end_personal == -1)\n\t\t    end_personal = index;\n\t\tbreak;\n\n\t    case ')':\n\t\tif (!ignoreErrors)\n\t\t    throw new AddressException(\"Missing '('\", s, index);\n\t\t// pretend the left paren was a regular character and\n\t\t// continue parsing\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\n\t    case '<':\n\t\trfc822 = true;\n\t\tif (route_addr) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\n\t\t\t\t\t\t\"Extra route-addr\", s, index);\n\n\t\t    // assume missing comma between addresses\n\t\t    if (start == -1) {\n\t\t\troute_addr = false;\n\t\t\trfc822 = false;\n\t\t\tstart = end = -1;\n\t\t\tbreak;\t// nope, nothing there\n\t\t    }\n\t\t    if (!in_group) {\n\t\t\t// got a token, add this to our InternetAddress vector\n\t\t\tif (end == -1)\t// should never happen\n\t\t\t    end = index;\n\t\t\tString addr = s.substring(start, end).trim();\n\n\t\t\tma = new InternetAddress();\n\t\t\tma.setAddress(addr);\n\t\t\tif (start_personal >= 0) {\n\t\t\t    ma.encodedPersonal = unquote(\n\t\t\t\ts.substring(start_personal, end_personal).\n\t\t\t\t\t\t\t\ttrim());\n\t\t\t}\n\t\t\tv.add(ma);\n\n\t\t\troute_addr = false;\n\t\t\trfc822 = false;\n\t\t\tstart = end = -1;\n\t\t\tstart_personal = end_personal = -1;\n\t\t\t// continue processing this new address...\n\t\t    }\n\t\t}\n\n\t\tint rindex = index;\n\t\tboolean inquote = false;\n\t      outf:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\t// XXX - is this needed?\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '\"':\n\t\t\tinquote = !inquote;\n\t\t\tbreak;\n\t\t    case '>':\n\t\t\tif (inquote)\n\t\t\t    continue;\n\t\t\tbreak outf; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\n\t\t// did we find a matching quote?\n\t\tif (inquote) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing '\\\"'\", s, index);\n\t\t    // didn't find matching quote, try again ignoring quotes\n\t\t    // (e.g., ``<\"@foo.com>'')\n\t\t  outq:\n\t\t    for (index = rindex + 1; index < length; index++) {\n\t\t\tc = s.charAt(index);\n\t\t\tif (c == '\\\\')\t// XXX - is this needed?\n\t\t\t    index++;\t// skip both '\\' and the escaped char\n\t\t\telse if (c == '>')\n\t\t\t    break;\n\t\t    }\n\t\t}\n\n\t\t// did we find a terminating '>'?\n\t\tif (index >= length) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing '>'\", s, index);\n\t\t    // pretend the \"<\" was a regular character and\n\t\t    // continue parsing after it (e.g., ``<@foo.com'')\n\t\t    index = rindex + 1;\n\t\t    if (start == -1)\n\t\t\tstart = rindex;\t// back up to include \"<\"\n\t\t    break;\n\t\t}\n\n\t\tif (!in_group) {\n\t\t    if (start >= 0) {\n\t\t\t// seen some characters?  use them as the personal name\n\t\t\tstart_personal = start;\n\t\t\tend_personal = rindex;\n\t\t    }\n\t\t    start = rindex + 1;\n\t\t}\n\t\troute_addr = true;\n\t\tend = index;\n\t\tbreak;\n\n\t    case '>':\n\t\tif (!ignoreErrors)\n\t\t    throw new AddressException(\"Missing '<'\", s, index);\n\t\t// pretend the \">\" was a regular character and\n\t\t// continue parsing (e.g., ``>@foo.com'')\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\n\t    case '\"':\t// parse quoted string\n\t\tint qindex = index;\n\t\trfc822 = true;\n\t\tif (start == -1)\n\t\t    start = index;\n\t      outq:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '\"':\n\t\t\tbreak outq; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (index >= length) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing '\\\"'\", s, index);\n\t\t    // pretend the quote was a regular character and\n\t\t    // continue parsing after it (e.g., ``\"@foo.com'')\n\t\t    index = qindex + 1;\n\t\t}\n\t\tbreak;\n\n\t    case '[':\t// a domain-literal, probably\n\t\trfc822 = true;\n\t\tint lindex = index;\n\t      outb:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case ']':\n\t\t\tbreak outb; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (index >= length) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing ']'\", s, index);\n\t\t    // pretend the \"[\" was a regular character and\n\t\t    // continue parsing after it (e.g., ``[@foo.com'')\n\t\t    index = lindex + 1;\n\t\t}\n\t\tbreak;\n\n\t    case ';':\n\t\tif (start == -1) {\n\t\t    route_addr = false;\n\t\t    rfc822 = false;\n\t\t    start = end = -1;\n\t\t    break;\t// nope, nothing there\n\t\t}\n\t\tif (in_group) {\n\t\t    in_group = false;\n\t\t    /*\n\t\t     * If parsing headers, but not strictly, peek ahead.\n\t\t     * If next char is \"@\", treat the group name\n\t\t     * like the local part of the address, e.g.,\n\t\t     * \"Undisclosed-Recipient:;@java.sun.com\".\n\t\t     */\n\t\t    if (parseHdr && !strict &&\n\t\t\t    index + 1 < length && s.charAt(index + 1) == '@')\n\t\t\tbreak;\n\t\t    ma = new InternetAddress();\n\t\t    end = index + 1;\n\t\t    ma.setAddress(s.substring(start, end).trim());\n\t\t    v.add(ma);\n\n\t\t    route_addr = false;\n\t\t    rfc822 = false;\n\t\t    start = end = -1;\n\t\t    start_personal = end_personal = -1;\n\t\t    break;\n\t\t}\n\t\tif (!ignoreErrors)\n\t\t    throw new AddressException(\n\t\t\t    \"Illegal semicolon, not in group\", s, index);\n\n\t\t// otherwise, parsing a header; treat semicolon like comma\n\t\t// fall through to comma case...\n\n\t    case ',':\t// end of an address, probably\n\t\tif (start == -1) {\n\t\t    route_addr = false;\n\t\t    rfc822 = false;\n\t\t    start = end = -1;\n\t\t    break;\t// nope, nothing there\n\t\t}\n\t\tif (in_group) {\n\t\t    route_addr = false;\n\t\t    break;\n\t\t}\n\t\t// got a token, add this to our InternetAddress vector\n\t\tif (end == -1)\n\t\t    end = index;\n\n\t\tString addr = s.substring(start, end).trim();\n\t\tString pers = null;\n\t\tif (rfc822 && start_personal >= 0) {\n\t\t    pers = unquote(\n\t\t\t    s.substring(start_personal, end_personal).trim());\n\t\t    if (pers.trim().length() == 0)\n\t\t\tpers = null;\n\t\t}\n\n\t\t/*\n\t\t * If the personal name field has an \"@\" and the address\n\t\t * field does not, assume they were reversed, e.g.,\n\t\t * ``\"joe doe\" (john.doe@example.com)''.\n\t\t */\n\t\tif (parseHdr && !strict && pers != null &&\n\t\t\tpers.indexOf('@') >= 0 &&\n\t\t\taddr.indexOf('@') < 0 && addr.indexOf('!') < 0) {\n\t\t    String tmp = addr;\n\t\t    addr = pers;\n\t\t    pers = tmp;\n\t\t}\n\t\tif (rfc822 || strict || parseHdr) {\n\t\t    if (!ignoreErrors)\n\t\t\tcheckAddress(addr, route_addr, false);\n\t\t    ma = new InternetAddress();\n\t\t    ma.setAddress(addr);\n\t\t    if (pers != null)\n\t\t\tma.encodedPersonal = pers;\n\t\t    v.add(ma);\n\t\t} else {\n\t\t    // maybe we passed over more than one space-separated addr\n\t\t    StringTokenizer st = new StringTokenizer(addr);\n\t\t    while (st.hasMoreTokens()) {\n\t\t\tString a = st.nextToken();\n\t\t\tcheckAddress(a, false, false);\n\t\t\tma = new InternetAddress();\n\t\t\tma.setAddress(a);\n\t\t\tv.add(ma);\n\t\t    }\n\t\t}\n\n\t\troute_addr = false;\n\t\trfc822 = false;\n\t\tstart = end = -1;\n\t\tstart_personal = end_personal = -1;\n\t\tbreak;\n\n\t    case ':':\n\t\trfc822 = true;\n\t\tif (in_group)\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Nested group\", s, index);\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tif (parseHdr && !strict) {\n\t\t    /*\n\t\t     * If next char is a special character that can't occur at\n\t\t     * the start of a valid address, treat the group name\n\t\t     * as the entire address, e.g., \"Date:, Tue\", \"Re:@foo\".\n\t\t     */\n\t\t    if (index + 1 < length) {\n\t\t\tString addressSpecials = \")>[]:@\\\\,.\";\n\t\t\tchar nc = s.charAt(index + 1);\n\t\t\tif (addressSpecials.indexOf(nc) >= 0) {\n\t\t\t    if (nc != '@')\n\t\t\t\tbreak;\t// don't change in_group\n\t\t\t    /*\n\t\t\t     * Handle a common error:\n\t\t\t     * ``Undisclosed-Recipient:@example.com;''\n\t\t\t     *\n\t\t\t     * Scan ahead.  If we find a semicolon before\n\t\t\t     * one of these other special characters,\n\t\t\t     * consider it to be a group after all.\n\t\t\t     */\n\t\t\t    for (int i = index + 2; i < length; i++) {\n\t\t\t\tnc = s.charAt(i);\n\t\t\t\tif (nc == ';')\n\t\t\t\t    break;\n\t\t\t\tif (addressSpecials.indexOf(nc) >= 0)\n\t\t\t\t    break;\n\t\t\t    }\n\t\t\t    if (nc == ';')\n\t\t\t\tbreak;\t// don't change in_group\n\t\t\t}\n\t\t    }\n\n\t\t    // ignore bogus \"mailto:\" prefix in front of an address,\n\t\t    // or bogus mail header name included in the address field\n\t\t    String gname = s.substring(start, index);\n\t\t    if (ignoreBogusGroupName &&\n\t\t\t(gname.equalsIgnoreCase(\"mailto\") ||\n\t\t\tgname.equalsIgnoreCase(\"From\") ||\n\t\t\tgname.equalsIgnoreCase(\"To\") ||\n\t\t\tgname.equalsIgnoreCase(\"Cc\") ||\n\t\t\tgname.equalsIgnoreCase(\"Subject\") ||\n\t\t\tgname.equalsIgnoreCase(\"Re\")))\n\t\t\tstart = -1;\t// we're not really in a group\n\t\t    else\n\t\t\tin_group = true;\n\t\t} else\n\t\t    in_group = true;\n\t\tbreak;\n\n\t    // Ignore whitespace\n\t    case ' ':\n\t    case '\\t':\n\t    case '\\r':\n\t    case '\\n':\n\t\tbreak;\n\n\t    default:\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\t     }\n\t}\n\n\tif (start >= 0) {\n\t    /*\n\t     * The last token, add this to our InternetAddress vector.\n\t     * Note that this block of code should be identical to the\n\t     * block above for \"case ','\".\n\t     */\n\t    if (end == -1)\n\t\tend = length;\n\n\t    String addr = s.substring(start, end).trim();\n\t    String pers = null;\n\t    if (rfc822 && start_personal >= 0) {\n\t\tpers = unquote(\n\t\t\ts.substring(start_personal, end_personal).trim());\n\t\tif (pers.trim().length() == 0)\n\t\t    pers = null;\n\t    }\n\n\t    /*\n\t     * If the personal name field has an \"@\" and the address\n\t     * field does not, assume they were reversed, e.g.,\n\t     * ``\"joe doe\" (john.doe@example.com)''.\n\t     */\n\t    if (parseHdr && !strict &&\n\t\t    pers != null && pers.indexOf('@') >= 0 &&\n\t\t    addr.indexOf('@') < 0 && addr.indexOf('!') < 0) {\n\t\tString tmp = addr;\n\t\taddr = pers;\n\t\tpers = tmp;\n\t    }\n\t    if (rfc822 || strict || parseHdr) {\n\t\tif (!ignoreErrors)\n\t\t    checkAddress(addr, route_addr, false);\n\t\tma = new InternetAddress();\n\t\tma.setAddress(addr);\n\t\tif (pers != null)\n\t\t    ma.encodedPersonal = pers;\n\t\tv.add(ma);\n\t    } else {\n\t\t// maybe we passed over more than one space-separated addr\n\t\tStringTokenizer st = new StringTokenizer(addr);\n\t\twhile (st.hasMoreTokens()) {\n\t\t    String a = st.nextToken();\n\t\t    checkAddress(a, false, false);\n\t\t    ma = new InternetAddress();\n\t\t    ma.setAddress(a);\n\t\t    v.add(ma);\n\t\t}\n\t    }\n\t}\n\n\tInternetAddress[] a = new InternetAddress[v.size()];\n\tv.toArray(a);\n\treturn a;\n    }", "/*\n     * RFC822 Address parser.\n     *\n     * XXX - This is complex enough that it ought to be a real parser,\n     *       not this ad-hoc mess, and because of that, this is not perfect.\n     *\n     * XXX - Deal with encoded Headers too.\n     */\n", "@SuppressWarnings(\"fallthrough\")\n    private static InternetAddress[] parse(String s, boolean strict,\n\t\t\t\t    boolean parseHdr) throws AddressException {\n\tint start, end, index, nesting;\n\tint start_personal = -1, end_personal = -1;\n\tint length = s.length();\n\tboolean ignoreErrors = parseHdr && !strict;\n\tboolean in_group = false;\t// we're processing a group term\n\tboolean route_addr = false;\t// address came from route-addr term\n\tboolean rfc822 = false;\t\t// looks like an RFC822 address\n\tchar c;\n\tList v = new ArrayList();\n\tInternetAddress ma;\n\n\tfor (start = end = -1, index = 0; index < length; index++) {\n    \t    c = s.charAt(index);\n\n\t    switch (c) {\n\t    case '(': // We are parsing a Comment. Ignore everything inside.\n\t\t// XXX - comment fields should be parsed as whitespace,\n\t\t//\t more than one allowed per address\n\t\trfc822 = true;\n\t\tif (start >= 0 && end == -1)\n\t\t    end = index;\n\t\tint pindex = index;\n\t\tfor (index++, nesting = 1; index < length && nesting > 0;\n\t\t  index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '(':\n\t\t\tnesting++;\n\t\t\tbreak;\n\t\t    case ')':\n\t\t\tnesting--;\n\t\t\tbreak;\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (nesting > 0) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing ')'\", s, index);\n\t\t    // pretend the first paren was a regular character and\n\t\t    // continue parsing after it\n\t\t    index = pindex + 1;\n\t\t    break;\n\t\t}\n\t\tindex--;\t// point to closing paren\n\t\tif (start_personal == -1)\n\t\t    start_personal = pindex + 1;\n\t\tif (end_personal == -1)\n\t\t    end_personal = index;\n\t\tbreak;\n\n\t    case ')':\n\t\tif (!ignoreErrors)\n\t\t    throw new AddressException(\"Missing '('\", s, index);\n\t\t// pretend the left paren was a regular character and\n\t\t// continue parsing\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\n\t    case '<':\n\t\trfc822 = true;\n\t\tif (route_addr) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\n\t\t\t\t\t\t\"Extra route-addr\", s, index);\n\n\t\t    // assume missing comma between addresses\n\t\t    if (start == -1) {\n\t\t\troute_addr = false;\n\t\t\trfc822 = false;\n\t\t\tstart = end = -1;\n\t\t\tbreak;\t// nope, nothing there\n\t\t    }\n\t\t    if (!in_group) {\n\t\t\t// got a token, add this to our InternetAddress vector\n\t\t\tif (end == -1)\t// should never happen\n\t\t\t    end = index;\n\t\t\tString addr = s.substring(start, end).trim();\n\n\t\t\tma = new InternetAddress();\n\t\t\tma.setAddress(addr);\n\t\t\tif (start_personal >= 0) {\n\t\t\t    ma.encodedPersonal = unquote(\n\t\t\t\ts.substring(start_personal, end_personal).\n\t\t\t\t\t\t\t\ttrim());\n\t\t\t}\n\t\t\tv.add(ma);\n\n\t\t\troute_addr = false;\n\t\t\trfc822 = false;\n\t\t\tstart = end = -1;\n\t\t\tstart_personal = end_personal = -1;\n\t\t\t// continue processing this new address...\n\t\t    }\n\t\t}\n\n\t\tint rindex = index;\n\t\tboolean inquote = false;\n\t      outf:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\t// XXX - is this needed?\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '\"':\n\t\t\tinquote = !inquote;\n\t\t\tbreak;\n\t\t    case '>':\n\t\t\tif (inquote)\n\t\t\t    continue;\n\t\t\tbreak outf; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\n\t\t// did we find a matching quote?\n\t\tif (inquote) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing '\\\"'\", s, index);\n\t\t    // didn't find matching quote, try again ignoring quotes\n\t\t    // (e.g., ``<\"@foo.com>'')\n\t\t  outq:\n\t\t    for (index = rindex + 1; index < length; index++) {\n\t\t\tc = s.charAt(index);\n\t\t\tif (c == '\\\\')\t// XXX - is this needed?\n\t\t\t    index++;\t// skip both '\\' and the escaped char\n\t\t\telse if (c == '>')\n\t\t\t    break;\n\t\t    }\n\t\t}\n\n\t\t// did we find a terminating '>'?\n\t\tif (index >= length) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing '>'\", s, index);\n\t\t    // pretend the \"<\" was a regular character and\n\t\t    // continue parsing after it (e.g., ``<@foo.com'')\n\t\t    index = rindex + 1;\n\t\t    if (start == -1)\n\t\t\tstart = rindex;\t// back up to include \"<\"\n\t\t    break;\n\t\t}\n\n\t\tif (!in_group) {\n\t\t    if (start >= 0) {\n\t\t\t// seen some characters?  use them as the personal name\n\t\t\tstart_personal = start;\n\t\t\tend_personal = rindex;\n\t\t    }\n\t\t    start = rindex + 1;\n\t\t}\n\t\troute_addr = true;\n\t\tend = index;\n\t\tbreak;\n\n\t    case '>':\n\t\tif (!ignoreErrors)\n\t\t    throw new AddressException(\"Missing '<'\", s, index);\n\t\t// pretend the \">\" was a regular character and\n\t\t// continue parsing (e.g., ``>@foo.com'')\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\n\t    case '\"':\t// parse quoted string\n\t\tint qindex = index;\n\t\trfc822 = true;\n\t\tif (start == -1)\n\t\t    start = index;\n\t      outq:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '\"':\n\t\t\tbreak outq; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (index >= length) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing '\\\"'\", s, index);\n\t\t    // pretend the quote was a regular character and\n\t\t    // continue parsing after it (e.g., ``\"@foo.com'')\n\t\t    index = qindex + 1;\n\t\t}\n\t\tbreak;\n\n\t    case '[':\t// a domain-literal, probably\n\t\trfc822 = true;\n\t\tint lindex = index;\n\t      outb:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case ']':\n\t\t\tbreak outb; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (index >= length) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing ']'\", s, index);\n\t\t    // pretend the \"[\" was a regular character and\n\t\t    // continue parsing after it (e.g., ``[@foo.com'')\n\t\t    index = lindex + 1;\n\t\t}\n\t\tbreak;\n\n\t    case ';':\n\t\tif (start == -1) {\n\t\t    route_addr = false;\n\t\t    rfc822 = false;\n\t\t    start = end = -1;\n\t\t    break;\t// nope, nothing there\n\t\t}\n\t\tif (in_group) {\n\t\t    in_group = false;\n\t\t    /*\n\t\t     * If parsing headers, but not strictly, peek ahead.\n\t\t     * If next char is \"@\", treat the group name\n\t\t     * like the local part of the address, e.g.,\n\t\t     * \"Undisclosed-Recipient:;@java.sun.com\".\n\t\t     */\n\t\t    if (parseHdr && !strict &&\n\t\t\t    index + 1 < length && s.charAt(index + 1) == '@')\n\t\t\tbreak;\n\t\t    ma = new InternetAddress();\n\t\t    end = index + 1;\n\t\t    ma.setAddress(s.substring(start, end).trim());\n\t\t    v.add(ma);\n\n\t\t    route_addr = false;\n\t\t    rfc822 = false;\n\t\t    start = end = -1;\n\t\t    start_personal = end_personal = -1;\n\t\t    break;\n\t\t}\n\t\tif (!ignoreErrors)\n\t\t    throw new AddressException(\n\t\t\t    \"Illegal semicolon, not in group\", s, index);\n\n\t\t// otherwise, parsing a header; treat semicolon like comma\n\t\t// fall through to comma case...\n\n\t    case ',':\t// end of an address, probably\n\t\tif (start == -1) {\n\t\t    route_addr = false;\n\t\t    rfc822 = false;\n\t\t    start = end = -1;\n\t\t    break;\t// nope, nothing there\n\t\t}\n\t\tif (in_group) {\n\t\t    route_addr = false;\n\t\t    break;\n\t\t}\n\t\t// got a token, add this to our InternetAddress vector\n\t\tif (end == -1)\n\t\t    end = index;\n\n\t\tString addr = s.substring(start, end).trim();\n\t\tString pers = null;\n\t\tif (rfc822 && start_personal >= 0) {\n\t\t    pers = unquote(\n\t\t\t    s.substring(start_personal, end_personal).trim());\n\t\t    if (pers.trim().length() == 0)\n\t\t\tpers = null;\n\t\t}\n\n\t\t/*\n\t\t * If the personal name field has an \"@\" and the address\n\t\t * field does not, assume they were reversed, e.g.,\n\t\t * ``\"joe doe\" (john.doe@example.com)''.\n\t\t */\n\t\tif (parseHdr && !strict && pers != null &&\n\t\t\tpers.indexOf('@') >= 0 &&\n\t\t\taddr.indexOf('@') < 0 && addr.indexOf('!') < 0) {\n\t\t    String tmp = addr;\n\t\t    addr = pers;\n\t\t    pers = tmp;\n\t\t}\n\t\tif (rfc822 || strict || parseHdr) {\n\t\t    if (!ignoreErrors)\n\t\t\tcheckAddress(addr, route_addr, false);\n\t\t    ma = new InternetAddress();\n\t\t    ma.setAddress(addr);\n\t\t    if (pers != null)\n\t\t\tma.encodedPersonal = pers;\n\t\t    v.add(ma);\n\t\t} else {\n\t\t    // maybe we passed over more than one space-separated addr\n\t\t    StringTokenizer st = new StringTokenizer(addr);\n\t\t    while (st.hasMoreTokens()) {\n\t\t\tString a = st.nextToken();\n\t\t\tcheckAddress(a, false, false);\n\t\t\tma = new InternetAddress();\n\t\t\tma.setAddress(a);\n\t\t\tv.add(ma);\n\t\t    }\n\t\t}\n\n\t\troute_addr = false;\n\t\trfc822 = false;\n\t\tstart = end = -1;\n\t\tstart_personal = end_personal = -1;\n\t\tbreak;\n\n\t    case ':':\n\t\trfc822 = true;\n\t\tif (in_group)\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Nested group\", s, index);\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tif (parseHdr && !strict) {\n\t\t    /*\n\t\t     * If next char is a special character that can't occur at\n\t\t     * the start of a valid address, treat the group name\n\t\t     * as the entire address, e.g., \"Date:, Tue\", \"Re:@foo\".\n\t\t     */\n\t\t    if (index + 1 < length) {\n\t\t\tString addressSpecials = \")>[]:@\\\\,.\";\n\t\t\tchar nc = s.charAt(index + 1);\n\t\t\tif (addressSpecials.indexOf(nc) >= 0) {\n\t\t\t    if (nc != '@')\n\t\t\t\tbreak;\t// don't change in_group\n\t\t\t    /*\n\t\t\t     * Handle a common error:\n\t\t\t     * ``Undisclosed-Recipient:@example.com;''\n\t\t\t     *\n\t\t\t     * Scan ahead.  If we find a semicolon before\n\t\t\t     * one of these other special characters,\n\t\t\t     * consider it to be a group after all.\n\t\t\t     */\n\t\t\t    for (int i = index + 2; i < length; i++) {\n\t\t\t\tnc = s.charAt(i);\n\t\t\t\tif (nc == ';')\n\t\t\t\t    break;\n\t\t\t\tif (addressSpecials.indexOf(nc) >= 0)\n\t\t\t\t    break;\n\t\t\t    }\n\t\t\t    if (nc == ';')\n\t\t\t\tbreak;\t// don't change in_group\n\t\t\t}\n\t\t    }\n\n\t\t    // ignore bogus \"mailto:\" prefix in front of an address,\n\t\t    // or bogus mail header name included in the address field\n\t\t    String gname = s.substring(start, index);\n\t\t    if (ignoreBogusGroupName &&\n\t\t\t(gname.equalsIgnoreCase(\"mailto\") ||\n\t\t\tgname.equalsIgnoreCase(\"From\") ||\n\t\t\tgname.equalsIgnoreCase(\"To\") ||\n\t\t\tgname.equalsIgnoreCase(\"Cc\") ||\n\t\t\tgname.equalsIgnoreCase(\"Subject\") ||\n\t\t\tgname.equalsIgnoreCase(\"Re\")))\n\t\t\tstart = -1;\t// we're not really in a group\n\t\t    else\n\t\t\tin_group = true;\n\t\t} else\n\t\t    in_group = true;\n\t\tbreak;\n\n\t    // Ignore whitespace\n\t    case ' ':\n\t    case '\\t':\n\t    case '\\r':\n\t    case '\\n':\n\t\tbreak;\n\n\t    default:\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\t     }\n\t}\n\n\tif (start >= 0) {\n\t    /*\n\t     * The last token, add this to our InternetAddress vector.\n\t     * Note that this block of code should be identical to the\n\t     * block above for \"case ','\".\n\t     */\n\t    if (end == -1)\n\t\tend = length;\n\n\t    String addr = s.substring(start, end).trim();\n\t    String pers = null;\n\t    if (rfc822 && start_personal >= 0) {\n\t\tpers = unquote(\n\t\t\ts.substring(start_personal, end_personal).trim());\n\t\tif (pers.trim().length() == 0)\n\t\t    pers = null;\n\t    }\n\n\t    /*\n\t     * If the personal name field has an \"@\" and the address\n\t     * field does not, assume they were reversed, e.g.,\n\t     * ``\"joe doe\" (john.doe@example.com)''.\n\t     */\n\t    if (parseHdr && !strict &&\n\t\t    pers != null && pers.indexOf('@') >= 0 &&\n\t\t    addr.indexOf('@') < 0 && addr.indexOf('!') < 0) {\n\t\tString tmp = addr;\n\t\taddr = pers;\n\t\tpers = tmp;\n\t    }\n\t    if (rfc822 || strict || parseHdr) {\n\t\tif (!ignoreErrors)\n\t\t    checkAddress(addr, route_addr, false);\n\t\tma = new InternetAddress();\n\t\tma.setAddress(addr);\n\t\tif (pers != null)\n\t\t    ma.encodedPersonal = pers;\n\t\tv.add(ma);\n\t    } else {\n\t\t// maybe we passed over more than one space-separated addr\n\t\tStringTokenizer st = new StringTokenizer(addr);\n\t\twhile (st.hasMoreTokens()) {\n\t\t    String a = st.nextToken();\n\t\t    checkAddress(a, false, false);\n\t\t    ma = new InternetAddress();\n\t\t    ma.setAddress(a);\n\t\t    v.add(ma);\n\t\t}\n\t    }\n\t}\n\n\tInternetAddress[] a = new InternetAddress[v.size()];\n\tv.toArray(a);\n\treturn a;\n    }", "/*\n     * RFC822 Address parser.\n     *\n     * XXX - This is complex enough that it ought to be a real parser,\n     *       not this ad-hoc mess, and because of that, this is not perfect.\n     *\n     * XXX - Deal with encoded Headers too.\n     */\n"], "test_db": ["3c0ba876085c61429ebbeb0e0b3771128aa0800c", "javaee/javamail", "/data/comment_repos/javaee@javamail", "parse", "/data/comment_repos/javaee@javamail/mail/src/test/java/javax/mail/internet/InternetAddressTest.java", "parse", "    public static void parse(BufferedReader in) throws IOException {\n\tString header = \"\";\n\tboolean doStrict = strict;\n\tboolean doParseHeader = parse_header;\n\n\tfor (;;) {\n\t    String s = in.readLine();\n\t    if (s != null && s.length() > 0) {\n\t\tchar c = s.charAt(0);\n\t\tif (c == ' ' || c == '\\t') {\n\t\t    // a continuation line, add it to the current header\n\t\t    header += '\\n' + s;\n\t\t    continue;\n\t\t}\n\t    }\n\t    // \"s\" is the next header, \"header\" is the last complete header\n\t    if (header.startsWith(\"Strict: \")) {\n\t\tdoStrict = Boolean.parseBoolean(value(header));\n\t    } else if (header.startsWith(\"Header: \")) {\n\t\tdoParseHeader = Boolean.parseBoolean(value(header));\n\t    } else if (header.startsWith(\"From: \") ||\n\t\t    header.startsWith(\"To: \") ||\n\t\t    header.startsWith(\"Cc: \")) {\n\t\tint i;\n\t\tString[] expect = null;\n\t\tif (s != null && s.startsWith(\"Expect: \")) {\n\t\t    try {\n\t\t\tint nexpect = Integer.parseInt(s.substring(8));\n\t\t\texpect = new String[nexpect];\n\t\t\tfor (i = 0; i < nexpect; i++)\n\t\t\t    expect[i] = readLine(in).trim();\n\t\t    } catch (NumberFormatException e) {\n\t\t\ttry {\n\t\t\t    if (s.substring(8, 17).equals(\"Exception\")) {\n\t\t\t\texpect = new String[1];\n\t\t\t\texpect[0] = \"Exception\";\n\t\t\t    }\n\t\t\t} catch (StringIndexOutOfBoundsException se) {\n\t\t\t    // ignore it\n\t\t\t}\n\t\t    }\n\t\t}\n\t\ti = header.indexOf(':');\n\t\ttry {\n\t\t    if (junit)\n\t\t\ttestData.add(new Object[] {\n\t\t\t    header.substring(0, i), header.substring(i + 2),\n\t\t\t    expect, doStrict, doParseHeader });\n\t\t    else\n\t\t\ttest(header.substring(0, i), header.substring(i + 2),\n\t\t\t    expect, doStrict, doParseHeader);\n\t\t} catch (StringIndexOutOfBoundsException e) {\n\t\t    e.printStackTrace(System.out);\n\t\t}\n\t    }\n\t    if (s == null)\n\t\treturn;\t\t// EOF\n\t    if (s.length() == 0) {\n\t\twhile ((s = in.readLine()) != null) {\n\t\t    if (s.startsWith(\"From \"))\n\t\t\tbreak;\n\t\t}\n\t\tif (s == null)\n\t\t    return;\n\t    }\n\t    header = s;\n\t}\n    }", "private static InternetAddress[] parse(String s, boolean strict,\n\t\t\t\t    boolean parseHdr) throws AddressException {\n\tint start, end, index, nesting;\n\tint start_personal = -1, end_personal = -1;\n\tint length = s.length();\n\tboolean in_group = false;\t// we're processing a group term\n\tboolean route_addr = false;\t// address came from route-addr term\n\tboolean rfc822 = false;\t\t// looks like an RFC822 address\n\tchar c;\n\tVector v = new Vector();\n\tInternetAddress ma;\n\n\tfor (start = end = -1, index = 0; index < length; index++) {\n    \t    c = s.charAt(index);\n\n\t    switch (c) {\n\t    case '(': // We are parsing a Comment. Ignore everything inside.\n\t\t// XXX - comment fields should be parsed as whitespace,\n\t\t//\t more than one allowed per address\n\t\trfc822 = true;\n\t\tif (start >= 0 && end == -1)\n\t\t    end = index;\n\t\tif (start_personal == -1)\n\t\t    start_personal = index + 1;\n\t\tfor (index++, nesting = 1; index < length && nesting > 0;\n\t\t  index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '(':\n\t\t\tnesting++;\n\t\t\tbreak;\n\t\t    case ')':\n\t\t\tnesting--;\n\t\t\tbreak;\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (nesting > 0)\n\t\t    throw new AddressException(\"Missing ')'\", s, index);\n\t\tindex--;\t// point to closing paren\n\t\tif (end_personal == -1)\n\t\t    end_personal = index;\n\t\tbreak;\n\n\t    case ')':\n\t\tthrow new AddressException(\"Missing '('\", s, index);\n\n\t    case '<':\n\t\trfc822 = true;\n\t\tif (route_addr)\n\t\t    throw new AddressException(\"Extra route-addr\", s, index);\n\t\tif (!in_group) {\n\t\t    start_personal = start;\n\t\t    if (start_personal >= 0)\n\t\t\tend_personal = index;\n\t\t    start = index + 1;\n\t\t}\n\n\t\tboolean inquote = false;\n\t      outf:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\t// XXX - is this needed?\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '\"':\n\t\t\tinquote = !inquote;\n\t\t\tbreak;\n\t\t    case '>':\n\t\t\tif (inquote)\n\t\t\t    continue;\n\t\t\tbreak outf; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (index >= length) {\n\t\t    if (inquote)\n\t\t\tthrow new AddressException(\"Missing '\\\"'\", s, index);\n\t\t    else\n\t\t\tthrow new AddressException(\"Missing '>'\", s, index);\n\t\t}\n\t\troute_addr = true;\n\t\tend = index;\n\t\tbreak;\n\t    case '>':\n\t\tthrow new AddressException(\"Missing '<'\", s, index);\n\n\t    case '\"':\t// parse quoted string\n\t\trfc822 = true;\n\t\tif (start == -1)\n\t\t    start = index;\n\t      outq:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '\"':\n\t\t\tbreak outq; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (index >= length)\n\t\t    throw new AddressException(\"Missing '\\\"'\", s, index);\n\t\tbreak;\n\n\t    case '[':\t// a domain-literal, probably\n\t\trfc822 = true;\n\t      outb:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case ']':\n\t\t\tbreak outb; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (index >= length)\n\t\t    throw new AddressException(\"Missing ']'\", s, index);\n\t\tbreak;\n\n\t    case ',':\t// end of an address, probably\n\t\tif (start == -1) {\n\t\t    route_addr = false;\n\t\t    rfc822 = false;\n\t\t    start = end = -1;\n\t\t    break;\t// nope, nothing there\n\t\t}\n\t\tif (in_group) {\n\t\t    route_addr = false;\n\t\t    break;\n\t\t}\n\t\t// got a token, add this to our InternetAddress vector\n\t\tif (end == -1)\n\t\t    end = index;\n\t\tString addr = s.substring(start, end).trim();\n\t\tif (rfc822 || strict || parseHdr) {\n\t\t    if (strict || !parseHdr)\n\t\t\tcheckAddress(addr, route_addr, false);\n\t\t    ma = new InternetAddress();\n\t\t    ma.setAddress(addr);\n\t\t    if (start_personal >= 0) {\n\t\t\tma.encodedPersonal = unquote(\n\t\t\t    s.substring(start_personal, end_personal).trim());\n\t\t\tstart_personal = end_personal = -1;\n\t\t    }\n\t\t    v.addElement(ma);\n\t\t} else {\n\t\t    // maybe we passed over more than one space-separated addr\n\t\t    StringTokenizer st = new StringTokenizer(addr);\n\t\t    while (st.hasMoreTokens()) {\n\t\t\tString a = st.nextToken();\n\t\t\tcheckAddress(a, false, false);\n\t\t\tma = new InternetAddress();\n\t\t\tma.setAddress(a);\n\t\t\tv.addElement(ma);\n\t\t    }\n\t\t}\n\n\t\troute_addr = false;\n\t\trfc822 = false;\n\t\tstart = end = -1;\n\t\tbreak;\n\n\t    case ':':\n\t\trfc822 = true;\n\t\tif (in_group)\n\t\t    throw new AddressException(\"Nested group\", s, index);\n\t\tin_group = true;\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\n\t    case ';':\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tif (!in_group)\n\t\t    throw new AddressException(\n\t\t\t    \"Illegal semicolon, not in group\", s, index);\n\t\tin_group = false;\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tma = new InternetAddress();\n\t\tend = index + 1;\n\t\tma.setAddress(s.substring(start, end).trim());\n\t\tv.addElement(ma);\n\n\t\troute_addr = false;\n\t\tstart = end = -1;\n\t\tbreak;\n\n\t    // Ignore whitespace\n\t    case ' ':\n\t    case '\\t':\n\t    case '\\r':\n\t    case '\\n':\n\t\tbreak;\n\n\t    default:\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\t     }\n\t}\n\n\tif (start >= 0) {\n\t    /*\n\t     * The last token, add this to our InternetAddress vector.\n\t     * Note that this block of code should be identical to the\n\t     * block above for \"case ','\".\n\t     */\n\t    if (end == -1)\n\t\tend = index;\n\t    String addr = s.substring(start, end).trim();\n\t    if (rfc822 || strict || parseHdr) {\n\t\tif (strict || !parseHdr)\n\t\t    checkAddress(addr, route_addr, false);\n\t\tma = new InternetAddress();\n\t\tma.setAddress(addr);\n\t\tif (start_personal >= 0) {\n\t\t    ma.encodedPersonal = unquote(\n\t\t\t    s.substring(start_personal, end_personal).trim());\n\t\t}\n\t\tv.addElement(ma);\n\t    } else {\n\t\t// maybe we passed over more than one space-separated addr\n\t\tStringTokenizer st = new StringTokenizer(addr);\n\t\twhile (st.hasMoreTokens()) {\n\t\t    String a = st.nextToken();\n\t\t    checkAddress(a, false, false);\n\t\t    ma = new InternetAddress();\n\t\t    ma.setAddress(a);\n\t\t    v.addElement(ma);\n\t\t}\n\t    }\n\t}\n\n\tInternetAddress[] a = new InternetAddress[v.size()];\n\tv.copyInto(a);\n\treturn a;\n    }", "mail/src/main/java/javax/mail/internet/InternetAddress.java", "private static InternetAddress[] parse(String s, boolean strict,\n\t\t\t\t    boolean parseHdr) throws AddressException {\n\tint start, end, index, nesting;\n\tint start_personal = -1, end_personal = -1;\n\tint length = s.length();\n\tboolean ignoreErrors = parseHdr && !strict;\n\tboolean in_group = false;\t// we're processing a group term\n\tboolean route_addr = false;\t// address came from route-addr term\n\tboolean rfc822 = false;\t\t// looks like an RFC822 address\n\tchar c;\n\tList v = new ArrayList();\n\tInternetAddress ma;\n\n\tfor (start = end = -1, index = 0; index < length; index++) {\n    \t    c = s.charAt(index);\n\n\t    switch (c) {\n\t    case '(': // We are parsing a Comment. Ignore everything inside.\n\t\t// XXX - comment fields should be parsed as whitespace,\n\t\t//\t more than one allowed per address\n\t\trfc822 = true;\n\t\tif (start >= 0 && end == -1)\n\t\t    end = index;\n\t\tint pindex = index;\n\t\tfor (index++, nesting = 1; index < length && nesting > 0;\n\t\t  index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '(':\n\t\t\tnesting++;\n\t\t\tbreak;\n\t\t    case ')':\n\t\t\tnesting--;\n\t\t\tbreak;\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (nesting > 0) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing ')'\", s, index);\n\t\t    // pretend the first paren was a regular character and\n\t\t    // continue parsing after it\n\t\t    index = pindex + 1;\n\t\t    break;\n\t\t}\n\t\tindex--;\t// point to closing paren\n\t\tif (start_personal == -1)\n\t\t    start_personal = pindex + 1;\n\t\tif (end_personal == -1)\n\t\t    end_personal = index;\n\t\tbreak;\n\n\t    case ')':\n\t\tif (!ignoreErrors)\n\t\t    throw new AddressException(\"Missing '('\", s, index);\n\t\t// pretend the left paren was a regular character and\n\t\t// continue parsing\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\n\t    case '<':\n\t\trfc822 = true;\n\t\tif (route_addr) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\n\t\t\t\t\t\t\"Extra route-addr\", s, index);\n\n\t\t    // assume missing comma between addresses\n\t\t    if (start == -1) {\n\t\t\troute_addr = false;\n\t\t\trfc822 = false;\n\t\t\tstart = end = -1;\n\t\t\tbreak;\t// nope, nothing there\n\t\t    }\n\t\t    if (!in_group) {\n\t\t\t// got a token, add this to our InternetAddress vector\n\t\t\tif (end == -1)\t// should never happen\n\t\t\t    end = index;\n\t\t\tString addr = s.substring(start, end).trim();\n\n\t\t\tma = new InternetAddress();\n\t\t\tma.setAddress(addr);\n\t\t\tif (start_personal >= 0) {\n\t\t\t    ma.encodedPersonal = unquote(\n\t\t\t\ts.substring(start_personal, end_personal).\n\t\t\t\t\t\t\t\ttrim());\n\t\t\t}\n\t\t\tv.add(ma);\n\n\t\t\troute_addr = false;\n\t\t\trfc822 = false;\n\t\t\tstart = end = -1;\n\t\t\tstart_personal = end_personal = -1;\n\t\t\t// continue processing this new address...\n\t\t    }\n\t\t}\n\n\t\tint rindex = index;\n\t\tboolean inquote = false;\n\t      outf:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\t// XXX - is this needed?\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '\"':\n\t\t\tinquote = !inquote;\n\t\t\tbreak;\n\t\t    case '>':\n\t\t\tif (inquote)\n\t\t\t    continue;\n\t\t\tbreak outf; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\n\t\t// did we find a matching quote?\n\t\tif (inquote) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing '\\\"'\", s, index);\n\t\t    // didn't find matching quote, try again ignoring quotes\n\t\t    // (e.g., ``<\"@foo.com>'')\n\t\t  outq:\n\t\t    for (index = rindex + 1; index < length; index++) {\n\t\t\tc = s.charAt(index);\n\t\t\tif (c == '\\\\')\t// XXX - is this needed?\n\t\t\t    index++;\t// skip both '\\' and the escaped char\n\t\t\telse if (c == '>')\n\t\t\t    break;\n\t\t    }\n\t\t}\n\n\t\t// did we find a terminating '>'?\n\t\tif (index >= length) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing '>'\", s, index);\n\t\t    // pretend the \"<\" was a regular character and\n\t\t    // continue parsing after it (e.g., ``<@foo.com'')\n\t\t    index = rindex + 1;\n\t\t    if (start == -1)\n\t\t\tstart = rindex;\t// back up to include \"<\"\n\t\t    break;\n\t\t}\n\n\t\tif (!in_group) {\n\t\t    start_personal = start;\n\t\t    if (start_personal >= 0)\n\t\t\tend_personal = rindex;\n\t\t    start = rindex + 1;\n\t\t}\n\t\troute_addr = true;\n\t\tend = index;\n\t\tbreak;\n\n\t    case '>':\n\t\tif (!ignoreErrors)\n\t\t    throw new AddressException(\"Missing '<'\", s, index);\n\t\t// pretend the \">\" was a regular character and\n\t\t// continue parsing (e.g., ``>@foo.com'')\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\n\t    case '\"':\t// parse quoted string\n\t\tint qindex = index;\n\t\trfc822 = true;\n\t\tif (start == -1)\n\t\t    start = index;\n\t      outq:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case '\"':\n\t\t\tbreak outq; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (index >= length) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing '\\\"'\", s, index);\n\t\t    // pretend the quote was a regular character and\n\t\t    // continue parsing after it (e.g., ``\"@foo.com'')\n\t\t    index = qindex + 1;\n\t\t}\n\t\tbreak;\n\n\t    case '[':\t// a domain-literal, probably\n\t\trfc822 = true;\n\t\tint lindex = index;\n\t      outb:\n\t\tfor (index++; index < length; index++) {\n\t\t    c = s.charAt(index);\n\t\t    switch (c) {\n\t\t    case '\\\\':\n\t\t\tindex++; // skip both '\\' and the escaped char\n\t\t\tbreak;\n\t\t    case ']':\n\t\t\tbreak outb; // out of for loop\n\t\t    default:\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (index >= length) {\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Missing ']'\", s, index);\n\t\t    // pretend the \"[\" was a regular character and\n\t\t    // continue parsing after it (e.g., ``[@foo.com'')\n\t\t    index = lindex + 1;\n\t\t}\n\t\tbreak;\n\n\t    case ';':\n\t\tif (start == -1) {\n\t\t    route_addr = false;\n\t\t    rfc822 = false;\n\t\t    start = end = -1;\n\t\t    break;\t// nope, nothing there\n\t\t}\n\t\tif (in_group) {\n\t\t    in_group = false;\n\t\t    /*\n\t\t     * If parsing headers, but not strictly, peek ahead.\n\t\t     * If next char is \"@\", treat the group name\n\t\t     * like the local part of the address, e.g.,\n\t\t     * \"Undisclosed-Recipient:;@java.sun.com\".\n\t\t     */\n\t\t    if (parseHdr && !strict &&\n\t\t\t    index + 1 < length && s.charAt(index + 1) == '@')\n\t\t\tbreak;\n\t\t    ma = new InternetAddress();\n\t\t    end = index + 1;\n\t\t    ma.setAddress(s.substring(start, end).trim());\n\t\t    v.add(ma);\n\n\t\t    route_addr = false;\n\t\t    rfc822 = false;\n\t\t    start = end = -1;\n\t\t    start_personal = end_personal = -1;\n\t\t    break;\n\t\t}\n\t\tif (!ignoreErrors)\n\t\t    throw new AddressException(\n\t\t\t    \"Illegal semicolon, not in group\", s, index);\n\n\t\t// otherwise, parsing a header; treat semicolon like comma\n\t\t// fall through to comma case...\n\n\t    case ',':\t// end of an address, probably\n\t\tif (start == -1) {\n\t\t    route_addr = false;\n\t\t    rfc822 = false;\n\t\t    start = end = -1;\n\t\t    break;\t// nope, nothing there\n\t\t}\n\t\tif (in_group) {\n\t\t    route_addr = false;\n\t\t    break;\n\t\t}\n\t\t// got a token, add this to our InternetAddress vector\n\t\tif (end == -1)\n\t\t    end = index;\n\n\t\tString addr = s.substring(start, end).trim();\n\t\tString pers = null;\n\t\tif (rfc822 && start_personal >= 0) {\n\t\t    pers = unquote(\n\t\t\t    s.substring(start_personal, end_personal).trim());\n\t\t    if (pers.trim().length() == 0)\n\t\t\tpers = null;\n\t\t}\n\n\t\t/*\n\t\t * If the personal name field has an \"@\" and the address\n\t\t * field does not, assume they were reversed, e.g.,\n\t\t * ``\"joe doe\" (john.doe@example.com)''.\n\t\t */\n\t\tif (parseHdr && !strict && pers != null &&\n\t\t\tpers != null && pers.indexOf('@') >= 0 &&\n\t\t\taddr.indexOf('@') < 0 && addr.indexOf('!') < 0) {\n\t\t    String tmp = addr;\n\t\t    addr = pers;\n\t\t    pers = tmp;\n\t\t}\n\t\tif (rfc822 || strict || parseHdr) {\n\t\t    if (!ignoreErrors)\n\t\t\tcheckAddress(addr, route_addr, false);\n\t\t    ma = new InternetAddress();\n\t\t    ma.setAddress(addr);\n\t\t    if (pers != null)\n\t\t\tma.encodedPersonal = pers;\n\t\t    v.add(ma);\n\t\t} else {\n\t\t    // maybe we passed over more than one space-separated addr\n\t\t    StringTokenizer st = new StringTokenizer(addr);\n\t\t    while (st.hasMoreTokens()) {\n\t\t\tString a = st.nextToken();\n\t\t\tcheckAddress(a, false, false);\n\t\t\tma = new InternetAddress();\n\t\t\tma.setAddress(a);\n\t\t\tv.add(ma);\n\t\t    }\n\t\t}\n\n\t\troute_addr = false;\n\t\trfc822 = false;\n\t\tstart = end = -1;\n\t\tstart_personal = end_personal = -1;\n\t\tbreak;\n\n\t    case ':':\n\t\trfc822 = true;\n\t\tif (in_group)\n\t\t    if (!ignoreErrors)\n\t\t\tthrow new AddressException(\"Nested group\", s, index);\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tif (parseHdr && !strict) {\n\t\t    /*\n\t\t     * If next char is a special character that can't occur at\n\t\t     * the start of a valid address, treat the group name\n\t\t     * as the entire address, e.g., \"Date:, Tue\", \"Re:@foo\".\n\t\t     */\n\t\t    if (index + 1 < length) {\n\t\t\tString addressSpecials = \")>[]:@\\\\,.\";\n\t\t\tchar nc = s.charAt(index + 1);\n\t\t\tif (addressSpecials.indexOf(nc) >= 0) {\n\t\t\t    if (nc != '@')\n\t\t\t\tbreak;\t// don't change in_group\n\t\t\t    /*\n\t\t\t     * Handle a common error:\n\t\t\t     * ``Undisclosed-Recipient:@example.com;''\n\t\t\t     *\n\t\t\t     * Scan ahead.  If we find a semicolon before\n\t\t\t     * one of these other special characters,\n\t\t\t     * consider it to be a group after all.\n\t\t\t     */\n\t\t\t    for (int i = index + 2; i < length; i++) {\n\t\t\t\tnc = s.charAt(i);\n\t\t\t\tif (nc == ';')\n\t\t\t\t    break;\n\t\t\t\tif (addressSpecials.indexOf(nc) >= 0)\n\t\t\t\t    break;\n\t\t\t    }\n\t\t\t    if (nc == ';')\n\t\t\t\tbreak;\t// don't change in_group\n\t\t\t}\n\t\t    }\n\n\t\t    // ignore bogus \"mailto:\" prefix in front of an address,\n\t\t    // or bogus mail header name included in the address field\n\t\t    String gname = s.substring(start, index);\n\t\t    if (ignoreBogusGroupName &&\n\t\t\t(gname.equalsIgnoreCase(\"mailto\") ||\n\t\t\tgname.equalsIgnoreCase(\"From\") ||\n\t\t\tgname.equalsIgnoreCase(\"To\") ||\n\t\t\tgname.equalsIgnoreCase(\"Cc\") ||\n\t\t\tgname.equalsIgnoreCase(\"Subject\") ||\n\t\t\tgname.equalsIgnoreCase(\"Re\")))\n\t\t\tstart = -1;\t// we're not really in a group\n\t\t    else\n\t\t\tin_group = true;\n\t\t} else\n\t\t    in_group = true;\n\t\tbreak;\n\n\t    // Ignore whitespace\n\t    case ' ':\n\t    case '\\t':\n\t    case '\\r':\n\t    case '\\n':\n\t\tbreak;\n\n\t    default:\n\t\tif (start == -1)\n\t\t    start = index;\n\t\tbreak;\n\t     }\n\t}\n\n\tif (start >= 0) {\n\t    /*\n\t     * The last token, add this to our InternetAddress vector.\n\t     * Note that this block of code should be identical to the\n\t     * block above for \"case ','\".\n\t     */\n\t    if (end == -1)\n\t\tend = length;\n\n\t    String addr = s.substring(start, end).trim();\n\t    String pers = null;\n\t    if (rfc822 && start_personal >= 0) {\n\t\tpers = unquote(\n\t\t\ts.substring(start_personal, end_personal).trim());\n\t\tif (pers.trim().length() == 0)\n\t\t    pers = null;\n\t    }\n\n\t    /*\n\t     * If the personal name field has an \"@\" and the address\n\t     * field does not, assume they were reversed, e.g.,\n\t     * ``\"joe doe\" (john.doe@example.com)''.\n\t     */\n\t    if (parseHdr && !strict &&\n\t\t    pers != null && pers.indexOf('@') >= 0 &&\n\t\t    addr.indexOf('@') < 0 && addr.indexOf('!') < 0) {\n\t\tString tmp = addr;\n\t\taddr = pers;\n\t\tpers = tmp;\n\t    }\n\t    if (rfc822 || strict || parseHdr) {\n\t\tif (!ignoreErrors)\n\t\t    checkAddress(addr, route_addr, false);\n\t\tma = new InternetAddress();\n\t\tma.setAddress(addr);\n\t\tif (pers != null)\n\t\t    ma.encodedPersonal = pers;\n\t\tv.add(ma);\n\t    } else {\n\t\t// maybe we passed over more than one space-separated addr\n\t\tStringTokenizer st = new StringTokenizer(addr);\n\t\twhile (st.hasMoreTokens()) {\n\t\t    String a = st.nextToken();\n\t\t    checkAddress(a, false, false);\n\t\t    ma = new InternetAddress();\n\t\t    ma.setAddress(a);\n\t\t    v.add(ma);\n\t\t}\n\t    }\n\t}\n\n\tInternetAddress[] a = new InternetAddress[v.size()];\n\tv.toArray(a);\n\treturn a;\n    }", "mail/src/main/java/javax/mail/internet/InternetAddress.java"], "edit_seq": [["", "@", "insert"], ["", "Suppress", "insert"], ["", "<con>", "insert"], ["", "Warnings", "insert"], ["", "(", "insert"], ["", "\"", "insert"], ["", "fallthrough", "insert"], ["", "\"", "insert"], ["", ")", "insert"], ["private", "private", "equal"], ["static", "static", "equal"], ["Internet", "Internet", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["parse", "parse", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["boolean", "boolean", "equal"], ["strict", "strict", "equal"], [",", ",", "equal"], ["boolean", "boolean", "equal"], ["parse", "parse", "equal"], ["<con>", "<con>", "equal"], ["Hdr", "Hdr", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["int", "int", "equal"], ["start", "start", "equal"], [",", ",", "equal"], ["end", "end", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [",", ",", "equal"], ["nesting", "nesting", "equal"], [";", ";", "equal"], ["int", "int", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [",", ",", "equal"], ["end", "end", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["int", "int", "equal"], ["length", "length", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["boolean", "boolean", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], ["=", "=", "equal"], ["parse", "parse", "equal"], ["<con>", "<con>", "equal"], ["Hdr", "Hdr", "equal"], ["&&", "&&", "equal"], ["!", "!", "equal"], ["strict", "strict", "equal"], [";", ";", "equal"], ["boolean", "boolean", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["group", "group", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["boolean", "boolean", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["boolean", "boolean", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["char", "char", "equal"], ["c", "c", "equal"], [";", ";", "equal"], ["List", "List", "equal"], ["v", "v", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Array", "Array", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Internet", "Internet", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["ma", "ma", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [",", ",", "equal"], ["index", "index", "equal"], ["=", "=", "equal"], ["0", "0", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["<", "<", "equal"], ["length", "length", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["c", "c", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["char", "char", "equal"], ["<con>", "<con>", "equal"], ["At", "At", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["switch", "switch", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["case", "case", "equal"], ["'('", "'('", "equal"], [":", ":", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["true", "true", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], [">=", ">=", "equal"], ["0", "0", "equal"], ["&&", "&&", "equal"], ["end", "end", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["int", "int", "equal"], ["pindex", "pindex", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [",", ",", "equal"], ["nesting", "nesting", "equal"], ["=", "=", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["<", "<", "equal"], ["length", "length", "equal"], ["&&", "&&", "equal"], ["nesting", "nesting", "equal"], [">", ">", "equal"], ["0", "0", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["c", "c", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["char", "char", "equal"], ["<con>", "<con>", "equal"], ["At", "At", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["switch", "switch", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["case", "case", "equal"], ["'\\\\'", "'\\\\'", "equal"], [":", ":", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["'('", "'('", "equal"], [":", ":", "equal"], ["nesting", "nesting", "equal"], ["++", "++", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["')'", "')'", "equal"], [":", ":", "equal"], ["nesting", "nesting", "equal"], ["--", "--", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["default", "default", "equal"], [":", ":", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["nesting", "nesting", "equal"], [">", ">", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Missing", "Missing", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], [")", ")", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["=", "=", "equal"], ["pindex", "pindex", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["index", "index", "equal"], ["--", "--", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["pindex", "pindex", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["end", "end", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["end", "end", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["')'", "')'", "equal"], [":", ":", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Missing", "Missing", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["(", "(", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["'<'", "'<'", "equal"], [":", ":", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["true", "true", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Extra", "Extra", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["-", "-", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["group", "group", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["end", "end", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["String", "String", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["substring", "substring", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], [",", ",", "equal"], ["end", "end", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["trim", "trim", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Internet", "Internet", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], ["addr", "addr", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], [">=", ">=", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["ma", "ma", "equal"], [".", ".", "equal"], ["encoded", "encoded", "equal"], ["<con>", "<con>", "equal"], ["Personal", "Personal", "equal"], ["=", "=", "equal"], ["unquote", "unquote", "equal"], ["(", "(", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["substring", "substring", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], [",", ",", "equal"], ["end", "end", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["trim", "trim", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["v", "v", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["ma", "ma", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["end", "end", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["int", "int", "equal"], ["rindex", "rindex", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["boolean", "boolean", "equal"], ["inquote", "inquote", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["outf", "outf", "equal"], [":", ":", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["<", "<", "equal"], ["length", "length", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["c", "c", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["char", "char", "equal"], ["<con>", "<con>", "equal"], ["At", "At", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["switch", "switch", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["case", "case", "equal"], ["'\\\\'", "'\\\\'", "equal"], [":", ":", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["'\"'", "'\"'", "equal"], [":", ":", "equal"], ["inquote", "inquote", "equal"], ["=", "=", "equal"], ["!", "!", "equal"], ["inquote", "inquote", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["'>'", "'>'", "equal"], [":", ":", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["inquote", "inquote", "equal"], [")", ")", "equal"], ["continue", "continue", "equal"], [";", ";", "equal"], ["break", "break", "equal"], ["outf", "outf", "equal"], [";", ";", "equal"], ["default", "default", "equal"], [":", ":", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["inquote", "inquote", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Missing", "Missing", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["\\", "\\", "equal"], ["<con>", "<con>", "equal"], ["``", "``", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["outq", "outq", "equal"], [":", ":", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], ["=", "=", "equal"], ["rindex", "rindex", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["<", "<", "equal"], ["length", "length", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["c", "c", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["char", "char", "equal"], ["<con>", "<con>", "equal"], ["At", "At", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], ["==", "==", "equal"], ["'\\\\'", "'\\\\'", "equal"], [")", ")", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [";", ";", "equal"], ["else", "else", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], ["==", "==", "equal"], ["'>'", "'>'", "equal"], [")", ")", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], [">=", ">=", "equal"], ["length", "length", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Missing", "Missing", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], [">", ">", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["=", "=", "equal"], ["rindex", "rindex", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["rindex", "rindex", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["group", "group", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], [">=", ">=", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["start", "start", "equal"], [";", ";", "equal"], ["end", "end", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["rindex", "rindex", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["rindex", "rindex", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["true", "true", "equal"], [";", ";", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["'>'", "'>'", "equal"], [":", ":", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Missing", "Missing", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["<", "<", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["'\"'", "'\"'", "equal"], [":", ":", "equal"], ["int", "int", "equal"], ["qindex", "qindex", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["true", "true", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["outq", "outq", "equal"], [":", ":", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["<", "<", "equal"], ["length", "length", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["c", "c", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["char", "char", "equal"], ["<con>", "<con>", "equal"], ["At", "At", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["switch", "switch", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["case", "case", "equal"], ["'\\\\'", "'\\\\'", "equal"], [":", ":", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["'\"'", "'\"'", "equal"], [":", ":", "equal"], ["break", "break", "equal"], ["outq", "outq", "equal"], [";", ";", "equal"], ["default", "default", "equal"], [":", ":", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], [">=", ">=", "equal"], ["length", "length", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Missing", "Missing", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["\\", "\\", "equal"], ["<con>", "<con>", "equal"], ["``", "``", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["=", "=", "equal"], ["qindex", "qindex", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["'['", "'['", "equal"], [":", ":", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["true", "true", "equal"], [";", ";", "equal"], ["int", "int", "equal"], ["lindex", "lindex", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["outb", "outb", "equal"], [":", ":", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["<", "<", "equal"], ["length", "length", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["c", "c", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["char", "char", "equal"], ["<con>", "<con>", "equal"], ["At", "At", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["switch", "switch", "equal"], ["(", "(", "equal"], ["c", "c", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["case", "case", "equal"], ["'\\\\'", "'\\\\'", "equal"], [":", ":", "equal"], ["index", "index", "equal"], ["++", "++", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["']'", "']'", "equal"], [":", ":", "equal"], ["break", "break", "equal"], ["outb", "outb", "equal"], [";", ";", "equal"], ["default", "default", "equal"], [":", ":", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], [">=", ">=", "equal"], ["length", "length", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Missing", "Missing", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["]", "]", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["index", "index", "equal"], ["=", "=", "equal"], ["lindex", "lindex", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["';'", "';'", "equal"], [":", ":", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["group", "group", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["group", "group", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["parse", "parse", "equal"], ["<con>", "<con>", "equal"], ["Hdr", "Hdr", "equal"], ["&&", "&&", "equal"], ["!", "!", "equal"], ["strict", "strict", "equal"], ["&&", "&&", "equal"], ["index", "index", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], ["<", "<", "equal"], ["length", "length", "equal"], ["&&", "&&", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["char", "char", "equal"], ["<con>", "<con>", "equal"], ["At", "At", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["==", "==", "equal"], ["'@'", "'@'", "equal"], [")", ")", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Internet", "Internet", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["substring", "substring", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], [",", ",", "equal"], ["end", "end", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["trim", "trim", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["v", "v", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["ma", "ma", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["end", "end", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Illegal", "Illegal", "equal"], ["semicolon", "semicolon", "equal"], ["<con>", "<con>", "equal"], [",", ",", "equal"], ["not", "not", "equal"], ["in", "in", "equal"], ["group", "group", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["','", "','", "equal"], [":", ":", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["group", "group", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["end", "end", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["String", "String", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["substring", "substring", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], [",", ",", "equal"], ["end", "end", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["trim", "trim", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["String", "String", "equal"], ["pers", "pers", "equal"], ["=", "=", "equal"], ["null", "null", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["rfc822", "rfc822", "equal"], ["&&", "&&", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], [">=", ">=", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["pers", "pers", "equal"], ["=", "=", "equal"], ["unquote", "unquote", "equal"], ["(", "(", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["substring", "substring", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], [",", ",", "equal"], ["end", "end", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["trim", "trim", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["pers", "pers", "equal"], [".", ".", "equal"], ["trim", "trim", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["==", "==", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["pers", "pers", "equal"], ["=", "=", "equal"], ["null", "null", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["parse", "parse", "equal"], ["<con>", "<con>", "equal"], ["Hdr", "Hdr", "equal"], ["&&", "&&", "equal"], ["!", "!", "equal"], ["strict", "strict", "equal"], ["&&", "&&", "equal"], ["pers", "pers", "equal"], ["!=", "!=", "equal"], ["null", "null", "equal"], ["&&", "&&", "equal"], ["pers", "pers", "equal"], [".", ".", "equal"], ["index", "index", "equal"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["(", "(", "equal"], ["'@'", "'@'", "equal"], [")", ")", "equal"], [">=", ">=", "equal"], ["0", "0", "equal"], ["&&", "&&", "equal"], ["addr", "addr", "equal"], [".", ".", "equal"], ["index", "index", "equal"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["(", "(", "equal"], ["'@'", "'@'", "equal"], [")", ")", "equal"], ["<", "<", "equal"], ["0", "0", "equal"], ["&&", "&&", "equal"], ["addr", "addr", "equal"], [".", ".", "equal"], ["index", "index", "equal"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["(", "(", "equal"], ["'!'", "'!'", "equal"], [")", ")", "equal"], ["<", "<", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["String", "String", "equal"], ["tmp", "tmp", "equal"], ["=", "=", "equal"], ["addr", "addr", "equal"], [";", ";", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["pers", "pers", "equal"], [";", ";", "equal"], ["pers", "pers", "equal"], ["=", "=", "equal"], ["tmp", "tmp", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["rfc822", "rfc822", "equal"], ["||", "||", "equal"], ["strict", "strict", "equal"], ["||", "||", "equal"], ["parse", "parse", "equal"], ["<con>", "<con>", "equal"], ["Hdr", "Hdr", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["check", "check", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], ["addr", "addr", "equal"], [",", ",", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Internet", "Internet", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], ["addr", "addr", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["pers", "pers", "equal"], ["!=", "!=", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["ma", "ma", "equal"], [".", ".", "equal"], ["encoded", "encoded", "equal"], ["<con>", "<con>", "equal"], ["Personal", "Personal", "equal"], ["=", "=", "equal"], ["pers", "pers", "equal"], [";", ";", "equal"], ["v", "v", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["ma", "ma", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Tokenizer", "Tokenizer", "equal"], ["st", "st", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Tokenizer", "Tokenizer", "equal"], ["(", "(", "equal"], ["addr", "addr", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["while", "while", "equal"], ["(", "(", "equal"], ["st", "st", "equal"], [".", ".", "equal"], ["has", "has", "equal"], ["<con>", "<con>", "equal"], ["More", "More", "equal"], ["<con>", "<con>", "equal"], ["Tokens", "Tokens", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["String", "String", "equal"], ["a", "a", "equal"], ["=", "=", "equal"], ["st", "st", "equal"], [".", ".", "equal"], ["next", "next", "equal"], ["<con>", "<con>", "equal"], ["Token", "Token", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["check", "check", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], ["a", "a", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Internet", "Internet", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], ["a", "a", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["v", "v", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["ma", "ma", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["false", "false", "equal"], [";", ";", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["end", "end", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["':'", "':'", "equal"], [":", ":", "equal"], ["rfc822", "rfc822", "equal"], ["=", "=", "equal"], ["true", "true", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["group", "group", "equal"], [")", ")", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Address", "Address", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Nested", "Nested", "equal"], ["group", "group", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["s", "s", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["parse", "parse", "equal"], ["<con>", "<con>", "equal"], ["Hdr", "Hdr", "equal"], ["&&", "&&", "equal"], ["!", "!", "equal"], ["strict", "strict", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], ["<", "<", "equal"], ["length", "length", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["String", "String", "equal"], ["address", "address", "equal"], ["<con>", "<con>", "equal"], ["Specials", "Specials", "equal"], ["=", "=", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["<con>", "<con>", "equal"], [">", ">", "equal"], ["<con>", "<con>", "equal"], ["[", "[", "equal"], ["<con>", "<con>", "equal"], ["]", "]", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["<con>", "<con>", "equal"], ["@", "@", "equal"], ["<con>", "<con>", "equal"], ["\\", "\\", "equal"], ["<con>", "<con>", "equal"], ["\\", "\\", "equal"], ["<con>", "<con>", "equal"], [",", ",", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["\"", "\"", "equal"], [";", ";", "equal"], ["char", "char", "equal"], ["nc", "nc", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["char", "char", "equal"], ["<con>", "<con>", "equal"], ["At", "At", "equal"], ["(", "(", "equal"], ["index", "index", "equal"], ["+", "+", "equal"], ["1", "1", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["address", "address", "equal"], ["<con>", "<con>", "equal"], ["Specials", "Specials", "equal"], [".", ".", "equal"], ["index", "index", "equal"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["(", "(", "equal"], ["nc", "nc", "equal"], [")", ")", "equal"], [">=", ">=", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["nc", "nc", "equal"], ["!=", "!=", "equal"], ["'@'", "'@'", "equal"], [")", ")", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], ["i", "i", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], ["+", "+", "equal"], ["2", "2", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["<", "<", "equal"], ["length", "length", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["nc", "nc", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["char", "char", "equal"], ["<con>", "<con>", "equal"], ["At", "At", "equal"], ["(", "(", "equal"], ["i", "i", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["nc", "nc", "equal"], ["==", "==", "equal"], ["';'", "';'", "equal"], [")", ")", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["address", "address", "equal"], ["<con>", "<con>", "equal"], ["Specials", "Specials", "equal"], [".", ".", "equal"], ["index", "index", "equal"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["(", "(", "equal"], ["nc", "nc", "equal"], [")", ")", "equal"], [">=", ">=", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["nc", "nc", "equal"], ["==", "==", "equal"], ["';'", "';'", "equal"], [")", ")", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["String", "String", "equal"], ["gname", "gname", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["substring", "substring", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], [",", ",", "equal"], ["index", "index", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Bogus", "Bogus", "equal"], ["<con>", "<con>", "equal"], ["Group", "Group", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["&&", "&&", "equal"], ["(", "(", "equal"], ["gname", "gname", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["<con>", "<con>", "equal"], ["Ignore", "Ignore", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["mailto", "mailto", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["gname", "gname", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["<con>", "<con>", "equal"], ["Ignore", "Ignore", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["From", "From", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["gname", "gname", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["<con>", "<con>", "equal"], ["Ignore", "Ignore", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["To", "To", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["gname", "gname", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["<con>", "<con>", "equal"], ["Ignore", "Ignore", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Cc", "Cc", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["gname", "gname", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["<con>", "<con>", "equal"], ["Ignore", "Ignore", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Subject", "Subject", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["gname", "gname", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["<con>", "<con>", "equal"], ["Ignore", "Ignore", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Re", "Re", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [";", ";", "equal"], ["else", "else", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["group", "group", "equal"], ["=", "=", "equal"], ["true", "true", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["in", "in", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["group", "group", "equal"], ["=", "=", "equal"], ["true", "true", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["' '", "' '", "equal"], [":", ":", "equal"], ["case", "case", "equal"], ["'\\t'", "'\\t'", "equal"], [":", ":", "equal"], ["case", "case", "equal"], ["'\\r'", "'\\r'", "equal"], [":", ":", "equal"], ["case", "case", "equal"], ["'\\n'", "'\\n'", "equal"], [":", ":", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["default", "default", "equal"], [":", ":", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["start", "start", "equal"], ["=", "=", "equal"], ["index", "index", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], [">=", ">=", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["end", "end", "equal"], ["==", "==", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [")", ")", "equal"], ["end", "end", "equal"], ["=", "=", "equal"], ["length", "length", "equal"], [";", ";", "equal"], ["String", "String", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["substring", "substring", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], [",", ",", "equal"], ["end", "end", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["trim", "trim", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["String", "String", "equal"], ["pers", "pers", "equal"], ["=", "=", "equal"], ["null", "null", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["rfc822", "rfc822", "equal"], ["&&", "&&", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], [">=", ">=", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["pers", "pers", "equal"], ["=", "=", "equal"], ["unquote", "unquote", "equal"], ["(", "(", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["substring", "substring", "equal"], ["(", "(", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], [",", ",", "equal"], ["end", "end", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["personal", "personal", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["trim", "trim", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["pers", "pers", "equal"], [".", ".", "equal"], ["trim", "trim", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["length", "length", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["==", "==", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["pers", "pers", "equal"], ["=", "=", "equal"], ["null", "null", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["parse", "parse", "equal"], ["<con>", "<con>", "equal"], ["Hdr", "Hdr", "equal"], ["&&", "&&", "equal"], ["!", "!", "equal"], ["strict", "strict", "equal"], ["&&", "&&", "equal"], ["pers", "pers", "equal"], ["!=", "!=", "equal"], ["null", "null", "equal"], ["&&", "&&", "equal"], ["pers", "pers", "equal"], [".", ".", "equal"], ["index", "index", "equal"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["(", "(", "equal"], ["'@'", "'@'", "equal"], [")", ")", "equal"], [">=", ">=", "equal"], ["0", "0", "equal"], ["&&", "&&", "equal"], ["addr", "addr", "equal"], [".", ".", "equal"], ["index", "index", "equal"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["(", "(", "equal"], ["'@'", "'@'", "equal"], [")", ")", "equal"], ["<", "<", "equal"], ["0", "0", "equal"], ["&&", "&&", "equal"], ["addr", "addr", "equal"], [".", ".", "equal"], ["index", "index", "equal"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["(", "(", "equal"], ["'!'", "'!'", "equal"], [")", ")", "equal"], ["<", "<", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["String", "String", "equal"], ["tmp", "tmp", "equal"], ["=", "=", "equal"], ["addr", "addr", "equal"], [";", ";", "equal"], ["addr", "addr", "equal"], ["=", "=", "equal"], ["pers", "pers", "equal"], [";", ";", "equal"], ["pers", "pers", "equal"], ["=", "=", "equal"], ["tmp", "tmp", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["rfc822", "rfc822", "equal"], ["||", "||", "equal"], ["strict", "strict", "equal"], ["||", "||", "equal"], ["parse", "parse", "equal"], ["<con>", "<con>", "equal"], ["Hdr", "Hdr", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["ignore", "ignore", "equal"], ["<con>", "<con>", "equal"], ["Errors", "Errors", "equal"], [")", ")", "equal"], ["check", "check", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], ["addr", "addr", "equal"], [",", ",", "equal"], ["route", "route", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["addr", "addr", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Internet", "Internet", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], ["addr", "addr", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["pers", "pers", "equal"], ["!=", "!=", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["ma", "ma", "equal"], [".", ".", "equal"], ["encoded", "encoded", "equal"], ["<con>", "<con>", "equal"], ["Personal", "Personal", "equal"], ["=", "=", "equal"], ["pers", "pers", "equal"], [";", ";", "equal"], ["v", "v", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["ma", "ma", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["else", "else", "equal"], ["{", "{", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Tokenizer", "Tokenizer", "equal"], ["st", "st", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Tokenizer", "Tokenizer", "equal"], ["(", "(", "equal"], ["addr", "addr", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["while", "while", "equal"], ["(", "(", "equal"], ["st", "st", "equal"], [".", ".", "equal"], ["has", "has", "equal"], ["<con>", "<con>", "equal"], ["More", "More", "equal"], ["<con>", "<con>", "equal"], ["Tokens", "Tokens", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["String", "String", "equal"], ["a", "a", "equal"], ["=", "=", "equal"], ["st", "st", "equal"], [".", ".", "equal"], ["next", "next", "equal"], ["<con>", "<con>", "equal"], ["Token", "Token", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["check", "check", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], ["a", "a", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Internet", "Internet", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["ma", "ma", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["(", "(", "equal"], ["a", "a", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["v", "v", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["ma", "ma", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["Internet", "Internet", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["[", "[", "equal"], ["]", "]", "equal"], ["a", "a", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Internet", "Internet", "equal"], ["<con>", "<con>", "equal"], ["Address", "Address", "equal"], ["[", "[", "equal"], ["v", "v", "equal"], [".", ".", "equal"], ["size", "size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["]", "]", "equal"], [";", ";", "equal"], ["v", "v", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Array", "Array", "equal"], ["(", "(", "equal"], ["a", "a", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["a", "a", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static long createRandom(Number minValue, Number maxValue) { Validate.notNull(minValue, \"min can't be null!\"); Validate.notNull(maxValue, \"max can't be null!\"); long minLong = minValue.longValue(); long maxLong = maxValue.longValue(); Validate.isTrue(maxLong >= minLong, Slf4jUtil.format(\"maxLong:[{}] can not < minLong:[{}]\", maxLong, minLong)); return RandomUtils.nextLong(minLong, maxLong); } ", "focal_tgt": "public static long createRandom(Number minInclusiveValue, Number maxExclusiveValue) { Validate.notNull(minInclusiveValue, \"minInclusiveValue can't be null!\"); Validate.notNull(maxExclusiveValue, \"maxExclusiveValue can't be null!\"); long minLong = minInclusiveValue.longValue(); long maxLong = maxExclusiveValue.longValue(); Validate.isTrue(maxLong >= minLong, Slf4jUtil.format(\"minInclusiveValue:[{}] can not < maxExclusiveValue:[{}]\", maxLong, minLong)); return RandomUtils.nextLong(minLong, maxLong); } ", "test_src": "@Test public void testCreateRandom2() { LOGGER.debug(\"\" + RandomUtil.createRandom(10, 20)); LOGGER.debug(\"\" + RandomUtil.createRandom(0, 800)); assertEquals(800L, RandomUtil.createRandom(800, 800)); } ", "test_tgt": "@Test@Repeat(20000)public void testCreateRandom2() { assertThat(RandomUtil.createRandom(10, 20), allOf(greaterThanOrEqualTo(10L), lessThan(20L))); assertThat(RandomUtil.createRandom(0, 800), allOf(greaterThanOrEqualTo(0L), lessThan(800L))); } ", "label": 1, "focal_db": [3824793, "venusdrogon/feilong-core", "/data/comment_repos/venusdrogon@feilong-core", "0e0cbd8a98ee51f92f3233cb9d4c3d385e7bc9c7", "0c0509757eb833cdf6e2718c1a81fdc699236d82", "src/main/java/com/feilong/core/util/RandomUtil.java", "0fc6cad767c84511a4010d8de7674c0dec4e55ea", "src/main/java/com/feilong/core/util/RandomUtil.java", "public static long createRandom(Number minValue,Number maxValue){\n        Validate.notNull(minValue, \"min can't be null!\");\n        Validate.notNull(maxValue, \"max can't be null!\");\n\n        long minLong = minValue.longValue();\n        long maxLong = maxValue.longValue();\n\n        Validate.isTrue(maxLong >= minLong, Slf4jUtil.format(\"maxLong:[{}] can not < minLong:[{}]\", maxLong, minLong));\n        return RandomUtils.nextLong(minLong, maxLong);\n    }", "/**\n * \u521b\u5efa\u6700\u5c0f\u503c<code>minValue</code>\u548c\u6700\u5927\u503c<code>maxValue</code>\u4e4b\u95f4\u7684\u968f\u673a\u6570.\n *\n * <h3>\u793a\u4f8b:</h3>\n * <blockquote>\n *\n * <pre class=\"code\">\n * RandomUtil.createRandom(10, 20)\n * \u521b\u5efa\u4e00\u4e2a\u6570\u503c\u662f10-20\u4e4b\u95f4\u7684\u968f\u673a\u6570\n *\n * \u751f\u6210\u7684\u7ed3\u679c\u662f\u53ef\u80fd\u662f 12\n * </pre>\n *\n * </blockquote>\n *\n * @param minValue\n *            \u6700\u5c0f\u503c\n * @param maxValue\n *            \u6700\u5927\u503c\n * @return \u5982\u679c <code>minValue</code>\u662f null,\u629b\u51fa {@link NullPointerException};<br>\n *         \u5982\u679c <code>maxValue</code>\u662f null,\u629b\u51fa {@link NullPointerException};<br>\n *         \u5982\u679c <code>maxLong</code>{@code <}<code>minLong</code>,\u629b\u51fa{@link IllegalArgumentException}<br>\n *         \u5982\u679c <code>minLong</code>{@code =}<code>maxLong</code>,\u76f4\u63a5\u8fd4\u56de <code>minLong</code>\n *\n * @see org.apache.commons.lang3.RandomUtils#nextInt(int, int)\n * @see org.apache.commons.lang3.RandomUtils#nextLong(long, long)\n * @see org.apache.commons.lang3.RandomUtils#nextFloat(float, float)\n * @see org.apache.commons.lang3.RandomUtils#nextDouble(double, double)\n */\n", "public static long createRandom(Number minInclusiveValue,Number maxExclusiveValue){\n        Validate.notNull(minInclusiveValue, \"minInclusiveValue can't be null!\");\n        Validate.notNull(maxExclusiveValue, \"maxExclusiveValue can't be null!\");\n\n        long minLong = minInclusiveValue.longValue();\n        long maxLong = maxExclusiveValue.longValue();\n\n        Validate.isTrue(maxLong >= minLong, Slf4jUtil.format(\"minInclusiveValue:[{}] can not < maxExclusiveValue:[{}]\", maxLong, minLong));\n        return RandomUtils.nextLong(minLong, maxLong);\n    }", "/**\n * \u521b\u5efa\u6700\u5c0f\u503c(\u5305\u542b)<code>minInclusiveValue</code>\u548c\u6700\u5927\u503c(\u4e0d\u5305\u542b)<code>maxExclusiveValue</code>\u4e4b\u95f4\u7684\u968f\u673a\u6570.\n *\n * <h3>\u793a\u4f8b:</h3>\n * <blockquote>\n *\n * <pre class=\"code\">\n * RandomUtil.createRandom(10, 20)\n * \u521b\u5efa\u4e00\u4e2a\u6570\u503c\u662f10-20\u4e4b\u95f4\u7684\u968f\u673a\u6570\n *\n * \u751f\u6210\u7684\u7ed3\u679c\u662f\u53ef\u80fd\u662f 12\n * </pre>\n *\n * </blockquote>\n *\n * @param minInclusiveValue\n *            \u6700\u5c0f\u503c\n * @param maxExclusiveValue\n *            \u6700\u5927\u503c\n * @return \u5982\u679c <code>minInclusiveValue</code>\u662f null,\u629b\u51fa {@link NullPointerException};<br>\n *         \u5982\u679c <code>maxExclusiveValue</code>\u662f null,\u629b\u51fa {@link NullPointerException};<br>\n *         \u5982\u679c <code>minInclusiveValue</code>{@code <}<code>maxExclusiveValue</code>,\u629b\u51fa{@link IllegalArgumentException}<br>\n *         \u5982\u679c <code>minInclusiveValue</code>{@code =}<code>maxExclusiveValue</code>,\u76f4\u63a5\u8fd4\u56de <code>minLong</code>\n *\n * @see org.apache.commons.lang3.RandomUtils#nextInt(int, int)\n * @see org.apache.commons.lang3.RandomUtils#nextLong(long, long)\n * @see org.apache.commons.lang3.RandomUtils#nextFloat(float, float)\n * @see org.apache.commons.lang3.RandomUtils#nextDouble(double, double)\n */\n"], "test_db": [3824804, "venusdrogon/feilong-core", "/data/comment_repos/venusdrogon@feilong-core", "0e0cbd8a98ee51f92f3233cb9d4c3d385e7bc9c7", "ac2dcb6dde5199e938a27624c3a284798be4354a", "src/test/java/com/feilong/core/util/RandomUtilTest.java", "72bea83c7a69923892d1861010e6a23288a526f2", "src/test/java/com/feilong/core/util/RandomUtilTest.java", "@Test\n    public void testCreateRandom2(){\n        LOGGER.debug(\"\" + RandomUtil.createRandom(10, 20));\n        LOGGER.debug(\"\" + RandomUtil.createRandom(0, 800));\n\n        assertEquals(800L, RandomUtil.createRandom(800, 800));\n    }", "/**\n * Creates the random.\n */\n", "@Test\n    @Repeat(20000)\n    public void testCreateRandom2(){\n        assertThat(RandomUtil.createRandom(10, 20), allOf(greaterThanOrEqualTo(10L), lessThan(20L)));\n        assertThat(RandomUtil.createRandom(0, 800), allOf(greaterThanOrEqualTo(0L), lessThan(800L)));\n    }", "/**\n * Creates the random.\n */\n"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["long", "long", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Random", "Random", "equal"], ["(", "(", "equal"], ["Number", "Number", "equal"], ["min", "min", "equal"], ["<con>", "<con>", "equal"], ["", "Inclusive", "insert"], ["", "<con>", "insert"], ["Value", "Value", "equal"], [",", ",", "equal"], ["Number", "Number", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["", "Exclusive", "insert"], ["", "<con>", "insert"], ["Value", "Value", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Validate", "Validate", "equal"], [".", ".", "equal"], ["not", "not", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["(", "(", "equal"], ["min", "min", "equal"], ["<con>", "<con>", "equal"], ["", "Inclusive", "insert"], ["", "<con>", "insert"], ["Value", "Value", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["min", "min", "equal"], ["", "<con>", "insert"], ["", "Inclusive", "insert"], ["", "<con>", "insert"], ["", "Value", "insert"], ["can", "can", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["t", "t", "equal"], ["be", "be", "equal"], ["null", "null", "equal"], ["<con>", "<con>", "equal"], ["!", "!", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Validate", "Validate", "equal"], [".", ".", "equal"], ["not", "not", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["(", "(", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["", "Exclusive", "insert"], ["", "<con>", "insert"], ["Value", "Value", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["max", "max", "equal"], ["", "<con>", "insert"], ["", "Exclusive", "insert"], ["", "<con>", "insert"], ["", "Value", "insert"], ["can", "can", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["t", "t", "equal"], ["be", "be", "equal"], ["null", "null", "equal"], ["<con>", "<con>", "equal"], ["!", "!", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["long", "long", "equal"], ["min", "min", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], ["=", "=", "equal"], ["min", "min", "equal"], ["<con>", "<con>", "equal"], ["", "Inclusive", "insert"], ["", "<con>", "insert"], ["Value", "Value", "equal"], [".", ".", "equal"], ["long", "long", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["long", "long", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], ["=", "=", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["", "Exclusive", "insert"], ["", "<con>", "insert"], ["Value", "Value", "equal"], [".", ".", "equal"], ["long", "long", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Validate", "Validate", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["True", "True", "equal"], ["(", "(", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], [">=", ">=", "equal"], ["min", "min", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], [",", ",", "equal"], ["Slf4j", "Slf4j", "equal"], ["<con>", "<con>", "equal"], ["Util", "Util", "equal"], [".", ".", "equal"], ["format", "format", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["max", "min", "replace"], ["<con>", "<con>", "equal"], ["Long", "Inclusive", "replace"], ["", "<con>", "insert"], ["", "Value", "insert"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["<con>", "<con>", "equal"], ["[", "[", "equal"], ["<con>", "<con>", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["<con>", "<con>", "equal"], ["]", "]", "equal"], ["can", "can", "equal"], ["not", "not", "equal"], ["<", "<", "equal"], ["min", "max", "replace"], ["<con>", "<con>", "equal"], ["Long", "Exclusive", "replace"], ["", "<con>", "insert"], ["", "Value", "insert"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["<con>", "<con>", "equal"], ["[", "[", "equal"], ["<con>", "<con>", "equal"], ["{", "{", "equal"], ["<con>", "<con>", "equal"], ["}", "}", "equal"], ["<con>", "<con>", "equal"], ["]", "]", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], [",", ",", "equal"], ["min", "min", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["Random", "Random", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["next", "next", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], ["(", "(", "equal"], ["min", "min", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], [",", ",", "equal"], ["max", "max", "equal"], ["<con>", "<con>", "equal"], ["Long", "Long", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static < T > ToInt < T > plus(ToInt < T > first, ToInt < T > second) { return PlusUtil.plus(first, second); } ", "focal_tgt": "public static < T > ToInt < T > plus(ToInt < T > first, ToInt < T > second) { return PlusUtil.intPlusInt(first, second); } ", "test_src": "@Test void plus() { assertNotNull(Expressions.plus(ToShort.of(s -> (short)1), 1)); assertNotNull(Expressions.plus(ToShort.of(s -> (short)1), ToShort.of(s -> (short)1))); assertNotNull(Expressions.plus(ToFloat.of(f -> 1f), 1f)); assertNotNull(Expressions.plus(ToFloat.of(f -> 1f), ToFloat.of(f -> 1f))); } ", "label": 0, "focal_db": [3507416, "speedment/speedment", "/data/comment_repos/speedment@speedment", "c96fd8e456bf6cbde58c474a04f5f3ad0ecda473", "718f0fec59d0f7bb3fa697394133df628cf161df", "runtime-parent/runtime-compute/src/main/java/com/speedment/runtime/compute/expression/Expressions.java", "d362638c4d388e594e09bc1ab3b90bd1a81fab63", "runtime-parent/runtime-compute/src/main/java/com/speedment/runtime/compute/expression/Expressions.java", "public static <T> ToInt<T> plus(ToInt<T> first, ToInt<T> second) {\n        return PlusUtil.plus(first, second);\n    }", "/**\n * Creates and returns an expression that takes the result of the two\n * expressions and add them together.\n *\n * @param first   the first input expression\n * @param second  the second input expression\n * @param <T>     the input type\n * @return        the new expression\n */\n", "public static <T> ToInt<T> plus(ToInt<T> first, ToInt<T> second) {\n        return PlusUtil.intPlusInt(first, second);\n    }", "/**\n * Creates and returns an expression that takes the result of the two\n * expressions and add them together.\n *\n * @param first   the first input expression\n * @param second  the second input expression\n * @param <T>     the input type\n * @return        the new expression\n */\n"], "test_db": ["c96fd8e456bf6cbde58c474a04f5f3ad0ecda473", "speedment/speedment", "/data/comment_repos/speedment@speedment", "plus", "/data/comment_repos/speedment@speedment/runtime-parent/runtime-compute/src/test/java/com/speedment/runtime/compute/expression/ExpressionsTest.java", "plus", "    @Test\n    void plus() {\n        assertNotNull(Expressions.plus(ToShort.of(s -> (short) 1), 1));\n        assertNotNull(Expressions.plus(ToShort.of(s -> (short) 1), ToShort.of(s -> (short) 1)));\n\n        assertNotNull(Expressions.plus(ToFloat.of(f -> 1f), 1f));\n        assertNotNull(Expressions.plus(ToFloat.of(f -> 1f), ToFloat.of(f -> 1f)));\n    }", "public static <T> ToFloat<T> plus(ToFloat<T> first, int second) {\n        return PlusUtil.plus(first, second);\n    }", "runtime-parent/runtime-compute/src/main/java/com/speedment/runtime/compute/expression/Expressions.java", "public static <T> ToFloat<T> plus(ToFloat<T> first, int second) {\n        return PlusUtil.floatPlusInt(first, second);\n    }", "runtime-parent/runtime-compute/src/main/java/com/speedment/runtime/compute/expression/Expressions.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Int", "Int", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["plus", "plus", "equal"], ["(", "(", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Int", "Int", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["first", "first", "equal"], [",", ",", "equal"], ["To", "To", "equal"], ["<con>", "<con>", "equal"], ["Int", "Int", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["second", "second", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["Plus", "Plus", "equal"], ["<con>", "<con>", "equal"], ["Util", "Util", "equal"], [".", ".", "equal"], ["plus", "int", "replace"], ["", "<con>", "insert"], ["", "Plus", "insert"], ["", "<con>", "insert"], ["", "Int", "insert"], ["(", "(", "equal"], ["first", "first", "equal"], [",", ",", "equal"], ["second", "second", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}, {"focal_src": "public static ImmutableMap < UnflavoredBuildTargetView, MergedTargetNode > group(Collection < TargetNode < ? > > targetNodes) { Map < UnflavoredBuildTargetView, List < TargetNode < ? > > > collect = targetNodes.stream().collect(Collectors.groupingBy(t -> t.getBuildTarget().getUnflavoredBuildTarget())); ImmutableMap.Builder < UnflavoredBuildTargetView, MergedTargetNode > builder = ImmutableMap.builder(); for(Map.Entry < UnflavoredBuildTargetView, List < TargetNode < ? > > > entry : collect.entrySet()) { ImmutableList < TargetNode < ? > > nodes = entry.getValue().stream().sorted().collect(ImmutableList.toImmutableList()); builder.put(entry.getKey(), new MergedTargetNode(entry.getKey(), nodes)); } return builder.build(); } ", "focal_tgt": "public static ImmutableMap < UnflavoredBuildTarget, MergedTargetNode > group(Collection < TargetNode < ? > > targetNodes) { Map < UnflavoredBuildTarget, List < TargetNode < ? > > > collect = targetNodes.stream().collect(Collectors.groupingBy(t -> t.getBuildTarget().getUnflavoredBuildTarget())); ImmutableMap.Builder < UnflavoredBuildTarget, MergedTargetNode > builder = ImmutableMap.builder(); for(Map.Entry < UnflavoredBuildTarget, List < TargetNode < ? > > > entry : collect.entrySet()) { ImmutableList < TargetNode < ? > > nodes = entry.getValue().stream().sorted().collect(ImmutableList.toImmutableList()); builder.put(entry.getKey(), new MergedTargetNode(entry.getKey(), nodes)); } return builder.build(); } ", "test_src": "@Test public void group() { TargetNode < ? > qux = FakeTargetNodeBuilder.newBuilder(BuildTargetFactory.newInstance(\"//foo:qux\")).build(); TargetNode < FakeTargetNodeArg > bar1 = FakeTargetNodeBuilder.newBuilder(BuildTargetFactory.newInstance(\"//foo:bar\")).build(); TargetNode < FakeTargetNodeArg > bar2 = FakeTargetNodeBuilder.newBuilder(BuildTargetFactory.newInstance(\"//foo:bar#baz\")).build(); TargetNode < FakeTargetNodeArg > bar3 = FakeTargetNodeBuilder.newBuilder(BuildTargetFactory.newInstance(\"//foo:bar\").getUnconfiguredBuildTargetView().configure(ConfigurationBuildTargetFactoryForTests.newConfiguration(\"//:p\"))).build(); ImmutableMap < UnflavoredBuildTarget, MergedTargetNode > groups = MergedTargetNode.group(ImmutableList.of(bar1, bar2, bar3, qux)); assertEquals(ImmutableList.of(qux), groups.get(qux.getBuildTarget().getUnflavoredBuildTarget()).getNodes()); assertEquals(Stream.of(bar1, bar2, bar3).sorted().collect(ImmutableList.toImmutableList()), groups.get(bar1.getBuildTarget().getUnflavoredBuildTarget()).getNodes()); } ", "label": 0, "focal_db": [1920831, "facebook/buck", "/data/comment_repos/facebook@buck", "683e1a1f9cbb36f3401756d629893b41498c5b2e", "a1704c1b93f5ae77bc1109c3c07d1977488e07b3", "src/com/facebook/buck/core/model/targetgraph/MergedTargetNode.java", "32bd29ba85c446bc511ed3f70d52ef74f04ba675", "src/com/facebook/buck/core/model/targetgraph/MergedTargetNode.java", "public static ImmutableMap<UnflavoredBuildTargetView, MergedTargetNode> group(\n      Collection<TargetNode<?>> targetNodes) {\n    Map<UnflavoredBuildTargetView, List<TargetNode<?>>> collect =\n        targetNodes.stream()\n            .collect(Collectors.groupingBy(t -> t.getBuildTarget().getUnflavoredBuildTarget()));\n    ImmutableMap.Builder<UnflavoredBuildTargetView, MergedTargetNode> builder =\n        ImmutableMap.builder();\n    for (Map.Entry<UnflavoredBuildTargetView, List<TargetNode<?>>> entry : collect.entrySet()) {\n      // Sort nodes to make everything deterministic\n      ImmutableList<TargetNode<?>> nodes =\n          entry.getValue().stream().sorted().collect(ImmutableList.toImmutableList());\n      builder.put(entry.getKey(), new MergedTargetNode(entry.getKey(), nodes));\n    }\n    return builder.build();\n  }", "/**\n * Group targets by unflavored target.\n */\n", "public static ImmutableMap<UnflavoredBuildTarget, MergedTargetNode> group(\n      Collection<TargetNode<?>> targetNodes) {\n    Map<UnflavoredBuildTarget, List<TargetNode<?>>> collect =\n        targetNodes.stream()\n            .collect(Collectors.groupingBy(t -> t.getBuildTarget().getUnflavoredBuildTarget()));\n    ImmutableMap.Builder<UnflavoredBuildTarget, MergedTargetNode> builder = ImmutableMap.builder();\n    for (Map.Entry<UnflavoredBuildTarget, List<TargetNode<?>>> entry : collect.entrySet()) {\n      // Sort nodes to make everything deterministic\n      ImmutableList<TargetNode<?>> nodes =\n          entry.getValue().stream().sorted().collect(ImmutableList.toImmutableList());\n      builder.put(entry.getKey(), new MergedTargetNode(entry.getKey(), nodes));\n    }\n    return builder.build();\n  }", "/**\n * Group targets by unflavored target.\n */\n"], "test_db": ["683e1a1f9cbb36f3401756d629893b41498c5b2e", "facebook/buck", "/data/comment_repos/facebook@buck", "group", "/data/comment_repos/facebook@buck/test/com/facebook/buck/core/model/targetgraph/MergedTargetNodeTest.java", "group", "  @Test\n  public void group() {\n    TargetNode<?> qux =\n        FakeTargetNodeBuilder.newBuilder(BuildTargetFactory.newInstance(\"//foo:qux\")).build();\n    TargetNode<FakeTargetNodeArg> bar1 =\n        FakeTargetNodeBuilder.newBuilder(BuildTargetFactory.newInstance(\"//foo:bar\")).build();\n    TargetNode<FakeTargetNodeArg> bar2 =\n        FakeTargetNodeBuilder.newBuilder(BuildTargetFactory.newInstance(\"//foo:bar#baz\")).build();\n    TargetNode<FakeTargetNodeArg> bar3 =\n        FakeTargetNodeBuilder.newBuilder(\n                BuildTargetFactory.newInstance(\"//foo:bar\")\n                    .getUnconfiguredBuildTargetView()\n                    .configure(ConfigurationBuildTargetFactoryForTests.newConfiguration(\"//:p\")))\n            .build();\n    ImmutableMap<UnflavoredBuildTarget, MergedTargetNode> groups =\n        MergedTargetNode.group(ImmutableList.of(bar1, bar2, bar3, qux));\n\n    assertEquals(\n        ImmutableList.of(qux),\n        groups.get(qux.getBuildTarget().getUnflavoredBuildTarget()).getNodes());\n    assertEquals(\n        Stream.of(bar1, bar2, bar3).sorted().collect(ImmutableList.toImmutableList()),\n        groups.get(bar1.getBuildTarget().getUnflavoredBuildTarget()).getNodes());\n  }", "public static ImmutableMap<UnflavoredBuildTargetView, MergedTargetNode> group(\n      Collection<TargetNode<?>> targetNodes) {\n    Map<UnflavoredBuildTargetView, List<TargetNode<?>>> collect =\n        targetNodes.stream()\n            .collect(Collectors.groupingBy(t -> t.getBuildTarget().getUnflavoredBuildTarget()));\n    ImmutableMap.Builder<UnflavoredBuildTargetView, MergedTargetNode> builder =\n        ImmutableMap.builder();\n    for (Map.Entry<UnflavoredBuildTargetView, List<TargetNode<?>>> entry : collect.entrySet()) {\n      // Sort nodes to make everything deterministic\n      ImmutableList<TargetNode<?>> nodes =\n          entry.getValue().stream().sorted().collect(ImmutableList.toImmutableList());\n      builder.put(entry.getKey(), new MergedTargetNode(entry.getKey(), nodes));\n    }\n    return builder.build();\n  }", "src/com/facebook/buck/core/model/targetgraph/MergedTargetNode.java", "public static ImmutableMap<UnflavoredBuildTarget, MergedTargetNode> group(\n      Collection<TargetNode<?>> targetNodes) {\n    Map<UnflavoredBuildTarget, List<TargetNode<?>>> collect =\n        targetNodes.stream()\n            .collect(Collectors.groupingBy(t -> t.getBuildTarget().getUnflavoredBuildTarget()));\n    ImmutableMap.Builder<UnflavoredBuildTarget, MergedTargetNode> builder = ImmutableMap.builder();\n    for (Map.Entry<UnflavoredBuildTarget, List<TargetNode<?>>> entry : collect.entrySet()) {\n      // Sort nodes to make everything deterministic\n      ImmutableList<TargetNode<?>> nodes =\n          entry.getValue().stream().sorted().collect(ImmutableList.toImmutableList());\n      builder.put(entry.getKey(), new MergedTargetNode(entry.getKey(), nodes));\n    }\n    return builder.build();\n  }", "src/com/facebook/buck/core/model/targetgraph/MergedTargetNode.java"], "edit_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["Immutable", "Immutable", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], ["<", "<", "equal"], ["Unflavored", "Unflavored", "equal"], ["<con>", "<con>", "equal"], ["Build", "Build", "equal"], ["<con>", "<con>", "equal"], ["Target", "Target", "equal"], ["<con>", "", "delete"], ["View", "", "delete"], [",", ",", "equal"], ["Merged", "Merged", "equal"], ["<con>", "<con>", "equal"], ["Target", "Target", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], [">", ">", "equal"], ["group", "group", "equal"], ["(", "(", "equal"], ["Collection", "Collection", "equal"], ["<", "<", "equal"], ["Target", "Target", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["target", "target", "equal"], ["<con>", "<con>", "equal"], ["Nodes", "Nodes", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Map", "Map", "equal"], ["<", "<", "equal"], ["Unflavored", "Unflavored", "equal"], ["<con>", "<con>", "equal"], ["Build", "Build", "equal"], ["<con>", "<con>", "equal"], ["Target", "Target", "equal"], ["<con>", "", "delete"], ["View", "", "delete"], [",", ",", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Target", "Target", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], [">", ">", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["collect", "collect", "equal"], ["=", "=", "equal"], ["target", "target", "equal"], ["<con>", "<con>", "equal"], ["Nodes", "Nodes", "equal"], [".", ".", "equal"], ["stream", "stream", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["collect", "collect", "equal"], ["(", "(", "equal"], ["Collectors", "Collectors", "equal"], [".", ".", "equal"], ["grouping", "grouping", "equal"], ["<con>", "<con>", "equal"], ["By", "By", "equal"], ["(", "(", "equal"], ["t", "t", "equal"], ["->", "->", "equal"], ["t", "t", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Build", "Build", "equal"], ["<con>", "<con>", "equal"], ["Target", "Target", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Unflavored", "Unflavored", "equal"], ["<con>", "<con>", "equal"], ["Build", "Build", "equal"], ["<con>", "<con>", "equal"], ["Target", "Target", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Immutable", "Immutable", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], [".", ".", "equal"], ["Builder", "Builder", "equal"], ["<", "<", "equal"], ["Unflavored", "Unflavored", "equal"], ["<con>", "<con>", "equal"], ["Build", "Build", "equal"], ["<con>", "<con>", "equal"], ["Target", "Target", "equal"], ["<con>", "", "delete"], ["View", "", "delete"], [",", ",", "equal"], ["Merged", "Merged", "equal"], ["<con>", "<con>", "equal"], ["Target", "Target", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], [">", ">", "equal"], ["builder", "builder", "equal"], ["=", "=", "equal"], ["Immutable", "Immutable", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], [".", ".", "equal"], ["builder", "builder", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["Map", "Map", "equal"], [".", ".", "equal"], ["Entry", "Entry", "equal"], ["<", "<", "equal"], ["Unflavored", "Unflavored", "equal"], ["<con>", "<con>", "equal"], ["Build", "Build", "equal"], ["<con>", "<con>", "equal"], ["Target", "Target", "equal"], ["<con>", "", "delete"], ["View", "", "delete"], [",", ",", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Target", "Target", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], [">", ">", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["entry", "entry", "equal"], [":", ":", "equal"], ["collect", "collect", "equal"], [".", ".", "equal"], ["entry", "entry", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Immutable", "Immutable", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Target", "Target", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["nodes", "nodes", "equal"], ["=", "=", "equal"], ["entry", "entry", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["stream", "stream", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["sorted", "sorted", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["collect", "collect", "equal"], ["(", "(", "equal"], ["Immutable", "Immutable", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Immutable", "Immutable", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["put", "put", "equal"], ["(", "(", "equal"], ["entry", "entry", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["new", "new", "equal"], ["Merged", "Merged", "equal"], ["<con>", "<con>", "equal"], ["Target", "Target", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["(", "(", "equal"], ["entry", "entry", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["nodes", "nodes", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["builder", "builder", "equal"], [".", ".", "equal"], ["build", "build", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]]}]